"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuyWithFiatQuote = getBuyWithFiatQuote;
const Onramp_js_1 = require("../../bridge/Onramp.js");
const utils_js_1 = require("../../chains/utils.js");
const addresses_js_1 = require("../../constants/addresses.js");
const contract_js_1 = require("../../contract/contract.js");
const decimals_js_1 = require("../../extensions/erc20/read/decimals.js");
const units_js_1 = require("../../utils/units.js");
/**
 * Get a quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) to buy given token with fiat currency.
 * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.
 *
 * ### Rendering the On-Ramp provider UI
 * Once you have the `quote`, you can open the `quote.onRampLink` in a new tab - This will prompt the user to buy the token with fiat currency
 *
 * ### Determining the steps required
 * If `quote.onRampToken.token` is same as `quote.toToken` ( same chain + same token address ) - This means that the token can be directly bought from the on-ramp provider.
 * But if they are different, On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to swap it to the desired token onchain.
 *
 * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.
 *
 * ### Polling for the status
 * Once you open the `quote.onRampLink` in a new tab, you can start polling for the status using [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) to get the status of the transaction.
 *
 * `getBuyWithFiatStatus` returns a status object of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatStatus).
 *
 * - If no swap is required - the status will become `"ON_RAMP_TRANSFER_COMPLETED"` once the on-ramp provider has sent the desired token to the user's wallet address. Once you receive this status, the process is complete.
 * - If a swap is required - the status will become `"CRYPTO_SWAP_REQUIRED"` once the on-ramp provider has sent the tokens to the user's wallet address. Once you receive this status, you need to start the swap process.
 *
 * ### Swap Process
 * On receiving the `"CRYPTO_SWAP_REQUIRED"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).
 *
 * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.
 *
 * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)
 * @returns Object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.
 * @example
 * Get a quote for buying 10 USDC on polygon chain (chainId: 137) with USD fiat currency:
 *
 * ```ts
 * import { getBuyWithFiatQuote } from "thirdweb/pay";
 *
 * const quote = await getBuyWithFiatQuote({
 *  client: client, // thirdweb client
 *  fromCurrencySymbol: "USD", // fiat currency symbol
 *  toChainId: 137, // polygon chain id
 *  toAmount: "10", // amount of USDC to buy
 *  toTokenAddress: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359" // USDC token address in polygon chain
 *  toAddress: "0x...", // user's wallet address
 *  isTestMode: false, // whether to use onramp in test mode for testing purpose (defaults to false)
 * });
 *
 * window.open(quote.onRampLink, "_blank");
 * ```
 * @deprecated
 * @buyCrypto
 */
async function getBuyWithFiatQuote(params) {
    try {
        // map preferred provider (FiatProvider) → onramp string expected by Onramp.prepare
        const mapProviderToOnramp = (provider) => {
            switch (provider) {
                case "stripe":
                    return "stripe";
                case "transak":
                    return "transak";
                default: // default to coinbase when undefined or any other value
                    return "coinbase";
            }
        };
        // Choose provider or default to STRIPE
        const onrampProvider = mapProviderToOnramp(params.preferredProvider);
        const d = params.toTokenAddress !== addresses_js_1.NATIVE_TOKEN_ADDRESS
            ? await (0, decimals_js_1.decimals)({
                contract: (0, contract_js_1.getContract)({
                    address: params.toTokenAddress,
                    chain: (0, utils_js_1.getCachedChain)(params.toChainId),
                    client: params.client,
                }),
            })
            : 18;
        // Prepare amount in wei if provided
        const amountWei = params.toAmount ? (0, units_js_1.toUnits)(params.toAmount, d) : undefined;
        // Call new Onramp.prepare to get the quote & link
        const prepared = await (0, Onramp_js_1.prepare)({
            amount: amountWei,
            chainId: params.toChainId,
            client: params.client,
            currency: params.fromCurrencySymbol,
            maxSteps: 2,
            onramp: onrampProvider,
            onrampChainId: params.onrampChainId,
            onrampTokenAddress: params.onrampTokenAddress,
            paymentLinkId: params.paymentLinkId,
            purchaseData: params.purchaseData,
            receiver: params.toAddress, // force onramp to native token to avoid missing gas issues
            sender: params.fromAddress,
            tokenAddress: params.toTokenAddress,
        });
        // Determine tokens based on steps rules
        const hasSteps = prepared.steps.length > 0;
        const firstStep = hasSteps
            ? prepared.steps[0]
            : undefined;
        // Estimated duration in seconds – sum of all step durations
        const estimatedDurationSeconds = Math.max(120, Math.ceil(prepared.steps.reduce((acc, s) => acc + s.estimatedExecutionTimeMs, 0) /
            1000));
        const estimatedToAmountMinWeiBigInt = prepared.destinationAmount;
        const maxSlippageBPS = params.maxSlippageBPS ?? 0;
        const slippageWei = (estimatedToAmountMinWeiBigInt * BigInt(maxSlippageBPS)) / 10000n;
        const toAmountMinWeiBigInt = estimatedToAmountMinWeiBigInt - slippageWei;
        const estimatedToAmountMin = (0, units_js_1.toTokens)(estimatedToAmountMinWeiBigInt, d);
        const toAmountMin = (0, units_js_1.toTokens)(toAmountMinWeiBigInt, d);
        // Helper to convert a Token → PayTokenInfo
        const tokenToPayTokenInfo = (token) => ({
            chainId: token.chainId,
            decimals: token.decimals,
            name: token.name,
            priceUSDCents: Math.round((token.prices.USD || 0) * 100),
            symbol: token.symbol,
            tokenAddress: token.address,
        });
        // Determine the raw token objects using new simplified rules
        // 1. toToken is always the destination token
        const toTokenRaw = prepared.destinationToken;
        // 2. onRampToken: if exactly one step -> originToken of that step, else toTokenRaw
        const onRampTokenRaw = prepared.steps.length > 0 && firstStep
            ? firstStep.originToken
            : toTokenRaw;
        // 3. routingToken: if exactly two steps -> originToken of second step, else undefined
        const routingTokenRaw = prepared.steps.length > 1
            ? prepared.steps[1].originToken
            : undefined;
        // Amounts for onRampToken/raw
        const onRampTokenAmountWei = prepared.steps.length > 0 && firstStep
            ? firstStep.originAmount
            : prepared.destinationAmount;
        const onRampTokenAmount = (0, units_js_1.toTokens)(onRampTokenAmountWei, onRampTokenRaw.decimals);
        // Build info objects
        const onRampTokenObject = {
            amount: onRampTokenAmount,
            amountUSDCents: Math.round(Number(onRampTokenAmount) * (onRampTokenRaw.prices.USD || 0) * 100),
            amountWei: onRampTokenAmountWei.toString(),
            token: tokenToPayTokenInfo(onRampTokenRaw),
        };
        let routingTokenObject;
        if (routingTokenRaw) {
            const routingAmountWei = prepared.steps[1].originAmount;
            const routingAmount = (0, units_js_1.toTokens)(routingAmountWei, routingTokenRaw.decimals);
            routingTokenObject = {
                amount: routingAmount,
                amountUSDCents: Math.round(Number(routingAmount) * (routingTokenRaw.prices.USD || 0) * 100),
                amountWei: routingAmountWei.toString(),
                token: tokenToPayTokenInfo(routingTokenRaw),
            };
        }
        const buyWithFiatQuote = {
            estimatedDurationSeconds,
            estimatedToAmountMin: estimatedToAmountMin,
            estimatedToAmountMinWei: estimatedToAmountMinWeiBigInt.toString(),
            fromAddress: params.fromAddress,
            fromCurrency: {
                amount: prepared.currencyAmount.toString(),
                amountUnits: Number(prepared.currencyAmount).toFixed(2),
                currencySymbol: prepared.currency,
                decimals: 2,
            },
            fromCurrencyWithFees: {
                amount: prepared.currencyAmount.toString(),
                amountUnits: Number(prepared.currencyAmount).toFixed(2),
                currencySymbol: prepared.currency,
                decimals: 2,
            },
            intentId: prepared.id,
            maxSlippageBPS: maxSlippageBPS,
            onRampLink: prepared.link,
            onRampToken: onRampTokenObject,
            processingFees: [],
            provider: (params.preferredProvider ?? "COINBASE"),
            routingToken: routingTokenObject,
            toAddress: params.toAddress,
            toAmountMin: toAmountMin,
            toAmountMinWei: toAmountMinWeiBigInt.toString(),
            toToken: tokenToPayTokenInfo(toTokenRaw),
        };
        return buyWithFiatQuote;
    }
    catch (error) {
        console.error("Error getting buy with fiat quote", error);
        throw error;
    }
}
//# sourceMappingURL=getQuote.js.map