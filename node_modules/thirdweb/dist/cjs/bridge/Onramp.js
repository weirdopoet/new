"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.status = void 0;
exports.prepare = prepare;
const utils_js_1 = require("../chains/utils.js");
const domains_js_1 = require("../utils/domains.js");
const fetch_js_1 = require("../utils/fetch.js");
const json_js_1 = require("../utils/json.js");
const Errors_js_1 = require("./types/Errors.js");
// export status within the Onramp module
var OnrampStatus_js_1 = require("./OnrampStatus.js");
Object.defineProperty(exports, "status", { enumerable: true, get: function () { return OnrampStatus_js_1.status; } });
/**
 * Prepares an onramp transaction, returning a link from the specified provider to onramp to the specified token.
 *
 * @example
 * ```typescript
 * import { Bridge } from "thirdweb";
 * import { ethereum } from "thirdweb/chains";
 * import { NATIVE_TOKEN_ADDRESS, toWei } from "thirdweb/utils";
 *
 * const preparedOnramp = await Bridge.Onramp.prepare({
 *   client: thirdwebClient,
 *   onramp: "stripe",
 *   chainId: ethereum.id,
 *   tokenAddress: NATIVE_TOKEN_ADDRESS,
 *   receiver: "0x...", // receiver's address
 *   amount: toWei("10"), // 10 of the destination token
 *   // Optional params:
 *   // sender: "0x...", // sender's address
 *   // onrampTokenAddress: NATIVE_TOKEN_ADDRESS, // token to initially onramp to
 *   // onrampChainId: 1, // chain to initially onramp to
 *   // currency: "USD",
 *   // maxSteps: 2,
 *   // purchaseData: { customId: "123" }
 * });
 *
 * console.log(preparedOnramp.link); // URL to redirect the user to
 * console.log(preparedOnramp.currencyAmount); // Amount in fiat the user will pay
 * ```
 *
 * This function returns a quote that might look like:
 * ```typescript
 * {
 *   id: "123e4567-e89b-12d3-a456-426614174000",
 *   link: "https://onramp.example.com/session?id=...",
 *   currency: "USD",
 *   currencyAmount: 10.52,
 *   destinationAmount: 10000000000000000000n, // 10 ETH if decimals 18
 *   timestamp: 1689812800,
 *   expiration: 1689842800,
 *   steps: [
 *     // ... further steps if any post-onramp swaps are needed
 *   ],
 *   intent: {
 *     onramp: "stripe",
 *     chainId: 1,
 *     tokenAddress: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
 *     receiver: "0x...",
 *     amount: "10000000000000000000"
 *   }
 * }
 * ```
 *
 * ### Global Support
 *
 * For the best user experience, specify the user's `country` code in your request. This will return an error if the user's country is not supported by the provider.
 *
 * ```typescript
 * const preparedOnramp = await Bridge.Onramp.prepare({
 *   client: thirdwebClient,
 *   onramp: "stripe",
 *   chainId: ethereum.id,
 *   tokenAddress: NATIVE_TOKEN_ADDRESS,
 *   receiver: "0x...", // receiver's address
 *   amount: toWei("10"), // 10 of the destination token
 *   country: "AU" // User's country code
 * });
 * ```
 *
 * @param options - The options for preparing the onramp.
 * @param options.client - Your thirdweb client.
 * @param options.onramp - The onramp provider to use (e.g., "stripe", "coinbase", "transak").
 * @param options.chainId - The destination chain ID.
 * @param options.tokenAddress - The destination token address.
 * @param options.receiver - The address that will receive the output token.
 * @param [options.amount] - The desired token amount in wei.
 * @param [options.purchaseData] - Arbitrary purchase data.
 * @param [options.sender] - An optional address to associate as the onramp sender.
 * @param [options.onrampTokenAddress] - The token to initially onramp to if the destination token is not supported by the provider.
 * @param [options.onrampChainId] - The chain ID to initially onramp to if the destination chain is not supported.
 * @param [options.currency] - The currency for the onramp (e.g., "USD", "GBP"). Defaults to user's preferred or "USD".
 * @param [options.maxSteps] - Maximum number of post-onramp steps.
 * @param [options.excludeChainIds] - Chain IDs to exclude from the route (string or array of strings).
 * @param [options.country] - The user's country code (e.g. "US", "JP"). Defaults to "US". We highly recommend this be set (based on the user's IP address).
 *
 * @returns A promise that resolves to the prepared onramp details, including the link and quote.
 * @throws Will throw an error if there is an issue preparing the onramp.
 * @bridge Onramp
 * @beta
 */
async function prepare(options) {
    const { client, onramp, chainId, tokenAddress, receiver, amount, purchaseData, sender, onrampTokenAddress, onrampChainId, currency, maxSteps, excludeChainIds, paymentLinkId, country, } = options;
    const clientFetch = (0, fetch_js_1.getClientFetch)(client);
    const url = `${(0, domains_js_1.getThirdwebBaseUrl)("bridge")}/v1/onramp/prepare`;
    const apiRequestBody = {
        chainId: Number(chainId),
        onramp,
        receiver,
        tokenAddress,
    };
    if (amount !== undefined) {
        apiRequestBody.amount = amount.toString();
    }
    if (purchaseData !== undefined) {
        apiRequestBody.purchaseData = purchaseData;
    }
    if (sender !== undefined) {
        apiRequestBody.sender = sender;
    }
    if (onrampTokenAddress !== undefined) {
        apiRequestBody.onrampTokenAddress = onrampTokenAddress;
    }
    if (onrampChainId !== undefined) {
        apiRequestBody.onrampChainId = Number(onrampChainId);
    }
    if (currency !== undefined) {
        apiRequestBody.currency = currency;
    }
    if (maxSteps !== undefined) {
        apiRequestBody.maxSteps = maxSteps;
    }
    if (excludeChainIds !== undefined) {
        apiRequestBody.excludeChainIds = Array.isArray(excludeChainIds)
            ? excludeChainIds.join(",")
            : excludeChainIds;
    }
    if (paymentLinkId !== undefined) {
        apiRequestBody.paymentLinkId = paymentLinkId;
    }
    if (country !== undefined) {
        apiRequestBody.country = country;
    }
    const response = await clientFetch(url, {
        body: (0, json_js_1.stringify)(apiRequestBody),
        headers: {
            "Content-Type": "application/json",
        },
        method: "POST",
    });
    if (!response.ok) {
        const errorJson = await response.json();
        throw new Errors_js_1.ApiError({
            code: errorJson.code || "UNKNOWN_ERROR",
            correlationId: errorJson.correlationId || undefined,
            message: errorJson.message || response.statusText,
            statusCode: response.status,
        });
    }
    const { data } = await response.json();
    // Transform amounts from string to bigint where appropriate
    const transformedSteps = data.steps.map((step) => ({
        ...step,
        destinationAmount: BigInt(step.destinationAmount),
        originAmount: BigInt(step.originAmount),
        transactions: step.transactions.map((tx) => ({
            ...tx,
            chain: (0, utils_js_1.defineChain)(tx.chainId),
            client,
            value: tx.value ? BigInt(tx.value) : undefined,
        })),
    }));
    const intentFromResponse = {
        ...data.intent,
        amount: data.intent.amount ? data.intent.amount : undefined,
    };
    return {
        ...data,
        destinationAmount: BigInt(data.destinationAmount),
        intent: intentFromResponse,
        steps: transformedSteps,
    };
}
//# sourceMappingURL=Onramp.js.map