"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomButtonLabelLight = exports.CustomButtonLabel = exports.ContractInteractionLight = exports.ContractInteraction = exports.ERC20TokenTransferLight = exports.ERC20TokenTransfer = exports.EthereumTransferLight = exports.EthereumTransfer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const TransactionPayment_js_1 = require("../../react/web/ui/Bridge/TransactionPayment.js");
const utils_js_1 = require("../utils.js");
const fixtures_js_1 = require("./fixtures.js");
// Wrapper component to provide theme context
const TransactionPaymentWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return ((0, jsx_runtime_1.jsx)(utils_js_1.ModalThemeWrapper, { theme: theme, children: (0, jsx_runtime_1.jsx)("div", { style: { width: "400px" }, children: (0, jsx_runtime_1.jsx)(TransactionPayment_js_1.TransactionPayment, { ...componentProps }) }) }));
};
const meta = {
    args: {
        client: utils_js_1.storyClient,
        onExecuteTransaction: () => { },
        onContinue: (_amount, _token, _receiverAddress) => { },
        theme: "dark",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.ethTransfer,
    },
    argTypes: {
        onContinue: {
            action: "continue clicked",
            description: "Called when user continues with the transaction",
        },
        theme: {
            control: "select",
            description: "Theme for the component",
            options: ["light", "dark"],
        },
        uiOptions: {
            description: "UI configuration for transaction mode including prepared transaction",
        },
    },
    component: TransactionPaymentWithTheme,
    parameters: {
        docs: {
            description: {
                component: "Transaction payment component that displays detailed transaction information including contract details, function names, transaction costs, and network fees.\n\n" +
                    "## Features\n" +
                    "- **Contract Information**: Shows contract name and clickable address\n" +
                    "- **Function Detection**: Extracts function names from transaction data using ABI\n" +
                    "- **Cost Calculation**: Displays transaction value and USD equivalent\n" +
                    "- **Network Fees**: Shows estimated gas costs with token amounts\n" +
                    "- **Chain Details**: Network name and logo with proper formatting\n" +
                    "- **Skeleton Loading**: Comprehensive loading states matching final layout\n\n" +
                    "This component now accepts uiOptions directly to configure the transaction and metadata. Supports both native token and ERC20 token transactions with proper function name extraction.",
            },
        },
        layout: "centered",
    },
    tags: ["autodocs"],
    title: "Bridge/TransactionPayment",
};
exports.default = meta;
exports.EthereumTransfer = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.ethTransfer,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Simple ETH transfer transaction showing native token value and network fees with USD conversion. Demonstrates function name extraction from contract ABI.",
            },
        },
    },
};
exports.EthereumTransferLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.ethTransfer,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Simple ETH transfer transaction in light theme with skeleton loading support.",
            },
        },
    },
};
exports.ERC20TokenTransfer = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.erc20Transfer,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "ERC20 token transaction showing token amount, USD value, and proper formatting using real token data. Displays transfer function details.",
            },
        },
    },
};
exports.ERC20TokenTransferLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.erc20Transfer,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "ERC20 token transaction in light theme with enhanced formatting.",
            },
        },
    },
};
exports.ContractInteraction = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.contractInteraction,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Complex contract interaction showing function name extraction from ABI (claimTo), cost calculation, and network details with proper currency formatting.",
            },
        },
    },
};
exports.ContractInteractionLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.contractInteraction,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Contract interaction transaction in light theme with enhanced UX and skeleton loading.",
            },
        },
    },
};
exports.CustomButtonLabel = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.customButton,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example showcasing custom button label functionality. The button shows 'Execute Now' instead of the default 'Execute [functionName]' text.",
            },
        },
    },
};
exports.CustomButtonLabelLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.customButton,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version with custom button label 'Execute Now'.",
            },
        },
    },
};
//# sourceMappingURL=TransactionPayment.stories.js.map