"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomButtonLabelLight = exports.CustomButtonLabel = exports.NoImageLight = exports.NoImage = exports.PhysicalProductLight = exports.PhysicalProduct = exports.SubscriptionServiceLight = exports.SubscriptionService = exports.ConcertTicketLight = exports.ConcertTicket = exports.DigitalArtLight = exports.DigitalArt = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const DirectPayment_js_1 = require("../../react/web/ui/Bridge/DirectPayment.js");
const utils_js_1 = require("../utils.js");
const fixtures_js_1 = require("./fixtures.js");
// Wrapper component to provide theme context
const DirectPaymentWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return ((0, jsx_runtime_1.jsx)(utils_js_1.ModalThemeWrapper, { theme: theme, children: (0, jsx_runtime_1.jsx)(DirectPayment_js_1.DirectPayment, { ...componentProps }) }));
};
const meta = {
    args: {
        client: utils_js_1.storyClient,
        onContinue: (_amount, _token, _receiverAddress) => { },
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.digitalArt,
    },
    argTypes: {
        onContinue: {
            action: "continue clicked",
            description: "Called when user continues with the payment",
        },
        theme: {
            control: "select",
            description: "Theme for the component",
            options: ["light", "dark"],
        },
        uiOptions: {
            description: "UI configuration for direct payment mode including payment info and metadata",
        },
    },
    component: DirectPaymentWithTheme,
    parameters: {
        docs: {
            description: {
                component: "DirectPayment component displays a product/service purchase interface with payment details.\n\n" +
                    "## Features\n" +
                    "- **Product Display**: Shows product name, image, and pricing\n" +
                    "- **Payment Details**: Token amount, network information, and seller address\n" +
                    "- **Wallet Integration**: Connect button or continue with active wallet\n" +
                    "- **Responsive Design**: Adapts to different screen sizes and themes\n" +
                    "- **Fee Configuration**: Support for sender or receiver paying fees\n\n" +
                    "This component is used in the 'direct_payment' mode of BridgeOrchestrator for purchasing specific items or services. It now accepts uiOptions directly to configure payment info and metadata.",
            },
        },
        layout: "centered",
    },
    tags: ["autodocs"],
    title: "Bridge/DirectPayment",
};
exports.default = meta;
exports.DigitalArt = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.digitalArt,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example of purchasing a digital art NFT with ETH payment. Shows the product image, pricing in ETH, and seller information with sender paying fees.",
            },
        },
    },
};
exports.DigitalArtLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.digitalArt,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version of the digital art purchase interface.",
            },
        },
    },
};
exports.ConcertTicket = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.concertTicket,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example of purchasing a concert ticket with USDC payment. Shows different product type, stable token pricing, and receiver paying fees.",
            },
        },
    },
};
exports.ConcertTicketLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.concertTicket,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version of the concert ticket purchase.",
            },
        },
    },
};
exports.SubscriptionService = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.subscription,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example of a subscription service payment with detailed description. Shows how the component works for recurring service payments with comprehensive product information.",
            },
        },
    },
};
exports.SubscriptionServiceLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.subscription,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version of subscription service payment with full description text.",
            },
        },
    },
};
exports.PhysicalProduct = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.sneakers,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example of purchasing physical products with crypto payments. Shows how the component adapts to different product types with ETH payment.",
            },
        },
    },
};
exports.PhysicalProductLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.sneakers,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version of physical product purchase.",
            },
        },
    },
};
exports.NoImage = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.credits,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example of purchasing digital credits without product image. Shows how the component handles text-only products with description fallback.",
            },
        },
    },
};
exports.NoImageLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.credits,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version of credits purchase without image.",
            },
        },
    },
};
exports.CustomButtonLabel = {
    args: {
        theme: "dark",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.customButton,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example showcasing custom button label functionality. The button shows 'Purchase Now' instead of the default 'Buy Now' text.",
            },
        },
    },
};
exports.CustomButtonLabelLight = {
    args: {
        theme: "light",
        uiOptions: fixtures_js_1.DIRECT_PAYMENT_UI_OPTIONS.customButton,
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version with custom button label 'Purchase Now'.",
            },
        },
    },
};
//# sourceMappingURL=DirectPayment.stories.js.map