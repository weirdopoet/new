"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LargeAmount = exports.DifferentDestinationToken = exports.WithBackButtonLight = exports.WithBackButton = exports.Dark = exports.Light = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const PaymentSelection_js_1 = require("../../react/web/ui/Bridge/payment-selection/PaymentSelection.js");
const en_js_1 = require("../../react/web/ui/ConnectWallet/locale/en.js");
const utils_js_1 = require("../utils.js");
const fixtures_js_1 = require("./fixtures.js");
// Wrapper component to provide theme context
const PaymentSelectionWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return ((0, jsx_runtime_1.jsx)(utils_js_1.ModalThemeWrapper, { theme: theme, children: (0, jsx_runtime_1.jsx)(PaymentSelection_js_1.PaymentSelection, { ...componentProps }) }));
};
const meta = {
    args: {
        client: utils_js_1.storyClient,
        connectLocale: en_js_1.default,
        destinationAmount: "1",
        destinationToken: fixtures_js_1.USDC,
        onError: (error) => console.error("Error:", error),
        onPaymentMethodSelected: (_paymentMethod) => { },
        theme: "dark",
    },
    argTypes: {
        connectLocale: {
            description: "Locale for connecting wallets",
        },
        destinationAmount: {
            description: "Amount of destination token to bridge",
        },
        destinationToken: {
            description: "The target token to bridge to",
        },
        onBack: {
            action: "back clicked",
            description: "Called when user wants to go back (only shown in Step 1)",
        },
        onError: {
            action: "error occurred",
            description: "Called when an error occurs during the flow",
        },
        onPaymentMethodSelected: {
            action: "payment method selected",
            description: "Called when user selects a wallet token or fiat provider",
        },
        theme: {
            control: "select",
            description: "Theme for the component",
            options: ["light", "dark"],
        },
    },
    component: PaymentSelectionWithTheme,
    parameters: {
        docs: {
            description: {
                component: "Payment method selection screen with a 2-step flow:\n\n" +
                    "**Step 1:** Choose payment method - shows connected wallets, connect wallet option, and pay with fiat option\n\n" +
                    "**Step 2a:** If wallet selected - shows available origin tokens for bridging to the destination token (fetches real routes data from the Bridge API)\n\n" +
                    "**Step 2b:** If fiat selected - shows onramp provider options (Coinbase, Stripe, Transak)\n\n" +
                    "The component intelligently manages wallet context and provides proper error handling for each step.",
            },
        },
        layout: "centered",
    },
    tags: ["autodocs"],
    title: "Bridge/PaymentSelection",
};
exports.default = meta;
exports.Light = {
    args: {
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version showing the initial wallet selection step. Click on a connected wallet to see token selection, or click 'Pay with Fiat' to see provider selection.",
            },
        },
    },
};
exports.Dark = {
    args: {
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Dark theme version of the payment selection flow. The component starts with wallet selection and provides navigation through the 2-step process.",
            },
        },
    },
};
exports.WithBackButton = {
    args: {
        onBack: () => { },
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Version with a back button in the header. The back behavior changes based on the current step - Step 1 calls onBack, Steps 2a/2b return to Step 1.",
            },
        },
    },
};
exports.WithBackButtonLight = {
    args: {
        onBack: () => { },
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
        docs: {
            description: {
                story: "Light theme version with back button functionality. Demonstrates the navigation flow between steps.",
            },
        },
    },
};
exports.DifferentDestinationToken = {
    args: {
        destinationToken: fixtures_js_1.UNI,
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example with a different destination token (UNI). This will show different available origin tokens in Step 2a when a wallet is selected.",
            },
        },
    },
};
exports.LargeAmount = {
    args: {
        destinationAmount: "1000",
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Example with a larger destination amount (1000 USDC). This may affect which origin tokens are available based on user balances.",
            },
        },
    },
};
//# sourceMappingURL=PaymentSelection.stories.js.map