"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Img = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const ipfs_js_1 = require("../../../../utils/ipfs.js");
const Skeleton_js_1 = require("./Skeleton.js");
/**
 * @internal
 */
const Img = (props) => {
    const [isLoaded, setIsLoaded] = (0, react_1.useState)(false);
    const propSrc = props.src;
    const widthPx = `${props.width}px`;
    const heightPx = `${props.height || props.width}px`;
    if (propSrc === undefined) {
        return (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: heightPx, width: widthPx });
    }
    const getSrc = () => {
        try {
            return (0, ipfs_js_1.resolveScheme)({
                client: props.client,
                uri: propSrc,
            });
        }
        catch {
            return props.src;
        }
    };
    const src = getSrc();
    return ((0, jsx_runtime_1.jsxs)("div", { style: {
            alignItems: "center",
            display: "inline-flex",
            flexShrink: 0,
            justifyItems: "center",
            position: "relative",
        }, children: [!isLoaded && (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: heightPx, width: widthPx }), (0, jsx_runtime_1.jsx)("img", { alt: props.alt || "", className: props.className, decoding: "async", draggable: false, height: props.height, loading: props.loading, onError: (e) => {
                    if (props.fallbackImage &&
                        e.currentTarget.src !== props.fallbackImage) {
                        e.currentTarget.src = props.fallbackImage;
                    }
                }, onLoad: () => {
                    setIsLoaded(true);
                }, src: src, style: {
                    height: !isLoaded
                        ? 0
                        : props.height
                            ? `${props.height}px`
                            : undefined,
                    objectFit: "contain",
                    opacity: isLoaded ? 1 : 0,
                    transition: "opacity 0.4s ease",
                    userSelect: "none",
                    visibility: isLoaded ? "visible" : "hidden",
                    width: !isLoaded ? 0 : props.width ? `${props.width}px` : undefined,
                    ...props.style,
                }, width: props.width }, src)] }));
};
exports.Img = Img;
//# sourceMappingURL=Img.js.map