"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthToken = useAuthToken;
const useActiveAccount_js_1 = require("./useActiveAccount.js");
const useActiveWallet_js_1 = require("./useActiveWallet.js");
/**
 * A hook that returns the authentication token (JWT) for the currently active wallet.
 * This token can be used to authorize API calls to your backend server.
 *
 * @returns The JWT string if the active wallet is an in-app wallet and matches the active account, null otherwise
 *
 * @example
 * ```tsx
 * function MyComponent() {
 *   const authToken = useAuthToken();
 *
 *   const fetchData = async () => {
 *     const response = await fetch('https://api.example.com/data', {
 *       headers: {
 *         'Authorization': `Bearer ${authToken}`
 *       }
 *     });
 *     // ... handle response
 *   };
 * }
 * ```
 *
 * @wallet
 */
function useAuthToken() {
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    // if the active wallet is an in-app wallet and the active account is the same as the active wallet's account, return the auth token for the in-app wallet
    if (activeWallet?.getAuthToken &&
        activeAccount &&
        activeAccount.address === activeWallet.getAccount()?.address) {
        return activeWallet.getAuthToken();
    }
    // all other wallets don't expose an auth token for now
    return null;
}
//# sourceMappingURL=useAuthToken.js.map