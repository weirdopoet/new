"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBridgeRoutes = useBridgeRoutes;
const react_query_1 = require("@tanstack/react-query");
const Routes_js_1 = require("../../../bridge/Routes.js");
const Errors_js_1 = require("../../../bridge/types/Errors.js");
const mapBridgeError_js_1 = require("../errors/mapBridgeError.js");
/**
 * Hook that fetches available bridge routes with caching and retry logic
 *
 * @param params - Parameters for fetching routes including client and filter options
 * @returns React Query result with routes data, loading state, and error handling
 *
 * @example
 * ```tsx
 * const { data: routes, isLoading, error } = useBridgeRoutes({
 *   client: thirdwebClient,
 *   originChainId: 1,
 *   destinationChainId: 137,
 *   originTokenAddress: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
 * });
 * ```
 */
function useBridgeRoutes(params) {
    const { enabled = true, ...routeParams } = params;
    return (0, react_query_1.useQuery)({
        enabled: enabled && !!routeParams.client,
        gcTime: 10 * 60 * 1000,
        queryFn: () => (0, Routes_js_1.routes)(routeParams),
        queryKey: [
            "bridge-routes",
            {
                destinationChainId: routeParams.destinationChainId,
                destinationTokenAddress: routeParams.destinationTokenAddress,
                limit: routeParams.limit,
                maxSteps: routeParams.maxSteps,
                offset: routeParams.offset,
                originChainId: routeParams.originChainId,
                originTokenAddress: routeParams.originTokenAddress,
                sortBy: routeParams.sortBy,
            },
        ], // 5 minutes - routes are relatively stable
        retry: (failureCount, error) => {
            // Handle both ApiError and generic Error instances
            if (error instanceof Errors_js_1.ApiError) {
                const bridgeError = (0, mapBridgeError_js_1.mapBridgeError)(error);
                // Don't retry on client-side errors (4xx)
                if (bridgeError.statusCode &&
                    bridgeError.statusCode >= 400 &&
                    bridgeError.statusCode < 500) {
                    return false;
                }
            }
            // Retry up to 3 times for server errors or network issues
            return failureCount < 3;
        }, // 10 minutes garbage collection
        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
        staleTime: 5 * 60 * 1000, // Exponential backoff, max 30s
    });
}
//# sourceMappingURL=useBridgeRoutes.js.map