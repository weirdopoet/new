"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBuyWithFiatQuotesForProviders = useBuyWithFiatQuotesForProviders;
const react_query_1 = require("@tanstack/react-query");
const Onramp_js_1 = require("../../../../bridge/Onramp.js");
const get_token_js_1 = require("../../../../pay/convert/get-token.js");
const units_js_1 = require("../../../../utils/units.js");
/**
 * @internal
 * Hook to get prepared onramp quotes from Coinbase, Stripe, and Transak providers.
 */
function useBuyWithFiatQuotesForProviders(params, queryOptions) {
    const providers = ["coinbase", "stripe", "transak"];
    const queries = (0, react_query_1.useQueries)({
        queries: providers.map((provider) => ({
            ...queryOptions,
            enabled: !!params,
            queryFn: async () => {
                if (!params) {
                    throw new Error("No params provided");
                }
                const token = await (0, get_token_js_1.getToken)(params.client, params.tokenAddress, params.chainId);
                const amountWei = (0, units_js_1.toUnits)(params.amount, token.decimals);
                return (0, Onramp_js_1.prepare)({
                    amount: amountWei,
                    chainId: params.chainId,
                    client: params.client,
                    currency: params.currency || "USD",
                    onramp: provider,
                    receiver: params.receiver,
                    tokenAddress: params.tokenAddress,
                });
            },
            queryKey: ["onramp-prepare", provider, params],
            retry: false,
        })),
    });
    return queries;
}
//# sourceMappingURL=useBuyWithFiatQuotesForProviders.js.map