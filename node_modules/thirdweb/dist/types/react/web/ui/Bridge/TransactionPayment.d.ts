import type { TokenWithPrices } from "../../../../bridge/types/Token.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import { type Address } from "../../../../utils/address.js";
import type { PayEmbedConnectOptions } from "../PayEmbed.js";
import type { UIOptions } from "./BridgeOrchestrator.js";
export interface TransactionPaymentProps {
    /**
     * UI configuration and mode
     */
    uiOptions: Extract<UIOptions, {
        mode: "transaction";
    }>;
    /**
     * ThirdwebClient for blockchain interactions
     */
    client: ThirdwebClient;
    /**
     * Called when user confirms transaction execution
     */
    onContinue: (amount: string, token: TokenWithPrices, receiverAddress: Address) => void;
    /**
     * Request to execute the transaction immediately (skips funding flow)
     */
    onExecuteTransaction: () => void;
    /**
     * Connect options for wallet connection
     */
    connectOptions?: PayEmbedConnectOptions;
    /**
     * Whether to show thirdweb branding in the widget.
     * @default true
     */
    showThirdwebBranding?: boolean;
}
export declare function TransactionPayment({ uiOptions, client, onContinue, onExecuteTransaction, connectOptions, showThirdwebBranding, }: TransactionPaymentProps): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=TransactionPayment.d.ts.map