import type { Token } from "../../../../../bridge/types/Token.js";
import type { ThirdwebClient } from "../../../../../client/client.js";
import type { SupportedFiatCurrency } from "../../../../../pay/convert/type.js";
import type { Address } from "../../../../../utils/address.js";
import type { PaymentMethod } from "../../../../core/machines/paymentMachine.js";
import type { SupportedTokens } from "../../../../core/utils/defaultTokens.js";
import type { ConnectLocale } from "../../ConnectWallet/locale/types.js";
import type { PayEmbedConnectOptions } from "../../PayEmbed.js";
export interface PaymentSelectionProps {
    /**
     * The destination token to bridge to
     */
    destinationToken: Token;
    /**
     * The destination amount to bridge
     */
    destinationAmount: string;
    /**
     * The receiver address
     */
    receiverAddress?: Address;
    /**
     * ThirdwebClient for API calls
     */
    client: ThirdwebClient;
    /**
     * Called when user selects a payment method
     */
    onPaymentMethodSelected: (paymentMethod: PaymentMethod) => void;
    /**
     * Called when an error occurs
     */
    onError: (error: Error) => void;
    /**
     * Called when user wants to go back
     */
    onBack?: () => void;
    /**
     * Connect options for wallet connection
     */
    connectOptions?: PayEmbedConnectOptions;
    /**
     * Locale for connect UI
     */
    connectLocale: ConnectLocale;
    /**
     * Whether to include the destination token in the payment methods
     */
    includeDestinationToken?: boolean;
    /**
     * Allowed payment methods
     * @default ["crypto", "card"]
     */
    paymentMethods?: ("crypto" | "card")[];
    /**
     * Fee payer
     */
    feePayer?: "sender" | "receiver";
    /**
     * The currency to use for the payment.
     * @default "USD"
     */
    currency?: SupportedFiatCurrency;
    supportedTokens?: SupportedTokens;
}
export declare function PaymentSelection({ destinationToken, client, destinationAmount, receiverAddress, onPaymentMethodSelected, onError, onBack, connectOptions, connectLocale, includeDestinationToken, paymentMethods, supportedTokens, feePayer, currency, }: PaymentSelectionProps): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=PaymentSelection.d.ts.map