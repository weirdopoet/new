import type { TokenWithPrices } from "../../../../bridge/types/Token.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { SupportedFiatCurrency } from "../../../../pay/convert/type.js";
import type { PurchaseData } from "../../../../pay/types.js";
import type { PreparedTransaction } from "../../../../transaction/prepare-transaction.js";
import type { Address } from "../../../../utils/address.js";
import type { Prettify } from "../../../../utils/type-utils.js";
import type { SupportedTokens } from "../../../core/utils/defaultTokens.js";
import type { ConnectLocale } from "../ConnectWallet/locale/types.js";
import type { PayEmbedConnectOptions } from "../PayEmbed.js";
export type UIOptions = Prettify<{
    metadata?: {
        title?: string;
        description?: string;
        image?: string;
    };
    currency?: SupportedFiatCurrency;
    buttonLabel?: string;
} & ({
    mode: "fund_wallet";
    destinationToken: TokenWithPrices;
    initialAmount?: string;
    presetOptions?: [number, number, number];
} | {
    mode: "direct_payment";
    paymentInfo: {
        sellerAddress: Address;
        token: TokenWithPrices;
        amount: string;
        feePayer?: "sender" | "receiver";
    };
} | {
    mode: "transaction";
    transaction: PreparedTransaction;
})>;
export interface BridgeOrchestratorProps {
    /**
     * UI configuration and mode
     */
    uiOptions: UIOptions;
    /**
     * The receiver address, defaults to the connected wallet address
     */
    receiverAddress: Address | undefined;
    /**
     * ThirdwebClient for blockchain interactions
     */
    client: ThirdwebClient;
    /**
     * Called when the flow is completed successfully
     */
    onComplete: () => void;
    /**
     * Called when the flow encounters an error
     */
    onError: (error: Error) => void;
    /**
     * Called when the user cancels the flow
     */
    onCancel: () => void;
    /**
     * Connect options for wallet connection
     */
    connectOptions: PayEmbedConnectOptions | undefined;
    /**
     * Locale for connect UI
     */
    connectLocale: ConnectLocale | undefined;
    /**
     * Optional purchase data for the payment
     */
    purchaseData?: PurchaseData;
    /**
     * Optional payment link ID for the payment
     */
    paymentLinkId: string | undefined;
    /**
     * Quick buy amounts
     */
    presetOptions: [number, number, number] | undefined;
    /**
     * Allowed payment methods
     * @default ["crypto", "card"]
     */
    paymentMethods?: ("crypto" | "card")[];
    /**
     * Whether to show thirdweb branding in the widget.
     * @default true
     */
    showThirdwebBranding?: boolean;
    supportedTokens?: SupportedTokens;
}
export declare function BridgeOrchestrator({ client, uiOptions, receiverAddress, onComplete, onError, onCancel, connectOptions, connectLocale, purchaseData, paymentLinkId, presetOptions, paymentMethods, showThirdwebBranding, supportedTokens, }: BridgeOrchestratorProps): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=BridgeOrchestrator.d.ts.map