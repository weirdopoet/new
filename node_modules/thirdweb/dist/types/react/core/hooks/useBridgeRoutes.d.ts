import type { routes as RoutesTypes } from "../../../bridge/Routes.js";
/**
 * Parameters for the useBridgeRoutes hook
 */
export type UseBridgeRoutesParams = RoutesTypes.Options & {
    /**
     * Whether to enable the query. Useful for conditional fetching.
     * @default true
     */
    enabled?: boolean;
};
/**
 * Hook that fetches available bridge routes with caching and retry logic
 *
 * @param params - Parameters for fetching routes including client and filter options
 * @returns React Query result with routes data, loading state, and error handling
 *
 * @example
 * ```tsx
 * const { data: routes, isLoading, error } = useBridgeRoutes({
 *   client: thirdwebClient,
 *   originChainId: 1,
 *   destinationChainId: 137,
 *   originTokenAddress: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
 * });
 * ```
 */
export declare function useBridgeRoutes(params: UseBridgeRoutesParams): import("@tanstack/react-query").UseQueryResult<RoutesTypes.Result, Error>;
//# sourceMappingURL=useBridgeRoutes.d.ts.map