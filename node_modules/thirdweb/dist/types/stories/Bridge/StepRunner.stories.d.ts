import type { StoryObj } from "@storybook/react";
import type { ThirdwebClient } from "../../client/client.js";
import type { WindowAdapter } from "../../react/core/adapters/WindowAdapter.js";
import type { Theme } from "../../react/core/design-system/index.js";
import type { BridgePrepareRequest } from "../../react/core/hooks/useBridgePrepare.js";
import type { CompletedStatusResult } from "../../react/core/hooks/useStepExecutor.js";
import type { Wallet } from "../../wallets/interfaces/wallet.js";
interface StepRunnerWithThemeProps {
    request: BridgePrepareRequest;
    wallet: Wallet;
    client: ThirdwebClient;
    windowAdapter: WindowAdapter;
    onComplete: (completedStatuses: CompletedStatusResult[]) => void;
    onError: (error: Error) => void;
    onCancel?: () => void;
    onBack?: () => void;
    theme: "light" | "dark" | Theme;
}
declare const meta: {
    args: {
        client: ThirdwebClient;
        onCancel: () => void;
        onComplete: (_completedStatuses: CompletedStatusResult[]) => void;
        onError: (error: Error) => void;
        theme: "dark";
        wallet: Wallet;
        windowAdapter: WindowAdapter;
    };
    argTypes: {
        onCancel: {
            action: string;
        };
        onComplete: {
            action: string;
        };
        onError: {
            action: string;
        };
        theme: {
            control: "select";
            description: string;
            options: string[];
        };
    };
    component: (props: StepRunnerWithThemeProps) => import("react/jsx-runtime").JSX.Element;
    parameters: {
        docs: {
            description: {
                component: string;
            };
        };
        layout: string;
    };
    tags: string[];
    title: string;
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Light: Story;
export declare const Dark: Story;
//# sourceMappingURL=StepRunner.stories.d.ts.map