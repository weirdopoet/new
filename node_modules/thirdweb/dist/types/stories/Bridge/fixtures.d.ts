import type { TokenWithPrices } from "../../bridge/types/Token.js";
import type { BridgePrepareRequest, BridgePrepareResult } from "../../react/core/hooks/useBridgePrepare.js";
import type { UIOptions } from "../../react/web/ui/Bridge/BridgeOrchestrator.js";
import type { Wallet } from "../../wallets/interfaces/wallet.js";
export declare const ETH: TokenWithPrices;
export declare const USDC: TokenWithPrices;
export declare const UNI: TokenWithPrices;
export declare const STORY_MOCK_WALLET: Wallet;
export declare const simpleOnrampQuote: BridgePrepareResult;
export declare const onrampWithSwapsQuote: BridgePrepareResult;
export declare const simpleBuyQuote: BridgePrepareResult;
export declare const longTextBuyQuote: BridgePrepareResult;
export declare const buyWithApprovalQuote: BridgePrepareResult;
export declare const complexBuyQuote: BridgePrepareResult;
export declare const simpleBuyRequest: BridgePrepareRequest;
export declare const RECEIVER_ADDRESSES: {
    physical: "0x5555666677778888999900001111222233334444";
    primary: "0x2247d5d238d0f9d37184d8332aE0289d1aD9991b";
    secondary: "0xa3841994009B4fEabb01ebcC62062F9E56F701CD";
    seller: "0x1234567890123456789012345678901234567890";
    subscription: "0x9876543210987654321098765432109876543210";
};
type FundWalletUIOptions = Extract<UIOptions, {
    mode: "fund_wallet";
}>;
type DirectPaymentUIOptions = Extract<UIOptions, {
    mode: "direct_payment";
}>;
type TransactionUIOptions = Extract<UIOptions, {
    mode: "transaction";
}>;
export declare const FUND_WALLET_UI_OPTIONS: Record<"ethDefault" | "ethWithAmount" | "usdcDefault" | "uniLarge" | "customButton", FundWalletUIOptions>;
export declare const DIRECT_PAYMENT_UI_OPTIONS: Record<"digitalArt" | "concertTicket" | "subscription" | "sneakers" | "credits" | "customButton", DirectPaymentUIOptions>;
export declare const TRANSACTION_UI_OPTIONS: Record<"ethTransfer" | "erc20Transfer" | "contractInteraction" | "customButton", TransactionUIOptions>;
export {};
//# sourceMappingURL=fixtures.d.ts.map