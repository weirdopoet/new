"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { ChevronRightIcon, ExitIcon, PaperPlaneIcon, PinBottomIcon, PlusIcon, TextAlignJustifyIcon, } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import { useCallback, useContext, useEffect, useState, } from "react";
import { trackPayEvent } from "../../../../analytics/track/pay.js";
import { getCachedChain } from "../../../../chains/utils.js";
import { getContract } from "../../../../contract/contract.js";
import { getLastAuthProvider } from "../../../../react/core/utils/storage.js";
import { shortenAddress } from "../../../../utils/address.js";
import { isContractDeployed } from "../../../../utils/bytecode/is-contract-deployed.js";
import { webLocalStorage } from "../../../../utils/storage/webStorage.js";
import { isEcosystemWallet } from "../../../../wallets/ecosystem/is-ecosystem-wallet.js";
import { isSmartWallet } from "../../../../wallets/smart/is-smart-wallet.js";
import { socialAuthOptions, } from "../../../../wallets/types.js";
import { AccountProvider } from "../../../core/account/provider.js";
import { CustomThemeProvider, parseTheme, useCustomTheme, } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, radius, spacing, } from "../../../core/design-system/index.js";
import { useChainFaucets, useChainMetadata, } from "../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../../core/hooks/wallets/useActiveWalletChain.js";
import { useAdminWallet } from "../../../core/hooks/wallets/useAdminWallet.js";
import { useDisconnect } from "../../../core/hooks/wallets/useDisconnect.js";
import { useSwitchActiveWalletChain } from "../../../core/hooks/wallets/useSwitchActiveWalletChain.js";
import { SetRootElementContext } from "../../../core/providers/RootElementContext.js";
import { formatAccountFiatBalance, formatAccountTokenBalance, } from "../../../core/utils/account.js";
import { useWalletInfo } from "../../../core/utils/wallet.js";
import { WalletUIStatesProvider } from "../../providers/wallet-ui-states-provider.js";
import { BuyWidget } from "../Bridge/BuyWidget.js";
import { Container, Line } from "../components/basic.js";
import { Button, IconButton } from "../components/buttons.js";
import { ChainActiveDot } from "../components/ChainActiveDot.js";
import { CopyIcon } from "../components/CopyIcon.js";
import { fallbackChainIcon } from "../components/fallbackChainIcon.js";
import { IconContainer } from "../components/IconContainer.js";
import { Modal } from "../components/Modal.js";
import { Skeleton } from "../components/Skeleton.js";
import { Spacer } from "../components/Spacer.js";
import { Spinner } from "../components/Spinner.js";
import { ToolTip } from "../components/Tooltip.js";
import { Link, Text } from "../components/text.js";
import { WalletImage } from "../components/WalletImage.js";
import { fadeInAnimation } from "../design-system/animations.js";
import { StyledButton } from "../design-system/elements.js";
import { AccountAddress } from "../prebuilt/Account/address.js";
import { AccountAvatar } from "../prebuilt/Account/avatar.js";
import { AccountBalance } from "../prebuilt/Account/balance.js";
import { AccountBlobbie } from "../prebuilt/Account/blobbie.js";
import { AccountName } from "../prebuilt/Account/name.js";
import { ChainIcon } from "../prebuilt/Chain/icon.js";
import { ChainName } from "../prebuilt/Chain/name.js";
import { ChainProvider } from "../prebuilt/Chain/provider.js";
import { onModalUnmount } from "./constants.js";
import { CoinsIcon } from "./icons/CoinsIcon.js";
import { FundsIcon } from "./icons/FundsIcon.js";
import { OutlineWalletIcon } from "./icons/OutlineWalletIcon.js";
import { getConnectLocale } from "./locale/getConnectLocale.js";
import { MenuButton, MenuLink } from "./MenuButton.js";
import { ScreenSetupContext, useSetupScreen } from "./Modal/screen.js";
import { NetworkSelectorContent, } from "./NetworkSelector.js";
import { WalletManagerScreen } from "./screens/Details/WalletManagerScreen.js";
import { LinkedProfilesScreen } from "./screens/LinkedProfilesScreen.js";
import { LinkProfileScreen } from "./screens/LinkProfileScreen.js";
import { ManageWalletScreen } from "./screens/ManageWalletScreen.js";
import { PrivateKey } from "./screens/PrivateKey.js";
import { ReceiveFunds } from "./screens/ReceiveFunds.js";
import { SendFunds } from "./screens/SendFunds.js";
import { ViewAssets } from "./screens/ViewAssets.js";
import { ViewNFTs } from "./screens/ViewNFTs.js";
import { ViewTokens } from "./screens/ViewTokens.js";
import { WalletConnectReceiverScreen } from "./screens/WalletConnectReceiverScreen.js";
import { TransactionsScreen } from "./TransactionsScreen.js";
const TW_CONNECTED_WALLET = "tw-connected-wallet";
const LocalhostChainId = 1337;
/**
 * @internal
 */
export const ConnectedWalletDetails = (props) => {
    const { connectLocale: locale, client } = props;
    const setRootEl = useContext(SetRootElementContext);
    const walletChain = useActiveWalletChain();
    function closeModal() {
        setRootEl(null);
    }
    function openModal() {
        setRootEl(_jsx(DetailsModal, { assetTabs: props.detailsModal?.assetTabs, chains: props.chains, client: client, closeModal: closeModal, connectOptions: props.connectOptions, detailsModal: props.detailsModal, displayBalanceToken: props.detailsButton?.displayBalanceToken, locale: locale, onDisconnect: props.onDisconnect, supportedNFTs: props.supportedNFTs, supportedTokens: props.supportedTokens, theme: props.theme, showBalanceInFiat: props.detailsButton?.showBalanceInFiat }));
    }
    const isNetworkMismatch = props.chain && walletChain && walletChain.id !== props.chain.id;
    if (props.detailsButton?.render) {
        return (
        // biome-ignore lint/a11y/useKeyWithClickEvents: ok
        // biome-ignore lint/a11y/noStaticElementInteractions: TODO
        _jsx("div", { onClick: openModal, children: _jsx(props.detailsButton.render, {}) }));
    }
    if (props.chain && isNetworkMismatch) {
        return (_jsx(SwitchNetworkButton, { className: props.switchButton?.className, connectLocale: locale, style: props.switchButton?.style, switchNetworkBtnTitle: props.switchButton?.label, targetChain: props.chain }));
    }
    const combinedClassName = `${TW_CONNECTED_WALLET} ${props.detailsButton?.className || ""}`;
    const tokenAddress = props.detailsButton?.displayBalanceToken?.[Number(walletChain?.id)];
    return (_jsxs(WalletInfoButton, { className: combinedClassName, "data-test": "connected-wallet-details", onClick: openModal, style: props.detailsButton?.style, type: "button", children: [_jsx(Container, { style: {
                    borderRadius: "100%",
                    height: "35px",
                    overflow: "hidden",
                    width: "35px",
                }, children: props.detailsButton?.connectedAccountAvatarUrl ? (_jsx("img", { alt: "", src: props.detailsButton.connectedAccountAvatarUrl, style: {
                        height: "100%",
                        objectFit: "cover",
                        width: "100%",
                    } })) : (_jsx(AccountAvatar, { className: `${TW_CONNECTED_WALLET}__account_avatar`, fallbackComponent: _jsx(AccountBlobbie, { className: `${TW_CONNECTED_WALLET}__account_avatar`, size: 35 }), loadingComponent: _jsx(AccountBlobbie, { className: `${TW_CONNECTED_WALLET}__account_avatar`, size: 35 }), queryOptions: {
                        refetchOnMount: false,
                        refetchOnWindowFocus: false,
                    }, style: {
                        height: "100%",
                        objectFit: "cover",
                        width: "100%",
                    } })) }), _jsxs(Container, { flex: "column", gap: "4xs", style: {
                    borderRadius: `0 ${radius.md} ${radius.md} 0`,
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                }, children: [props.detailsButton?.connectedAccountName ? (_jsx(Text, { className: `${TW_CONNECTED_WALLET}__address`, color: "primaryText", size: "xs", weight: 500, children: props.detailsButton.connectedAccountName })) : (_jsx(Text, { className: `${TW_CONNECTED_WALLET}__address`, color: "primaryText", size: "xs", weight: 500, children: _jsx(AccountName, { fallbackComponent: _jsx(AccountAddress, { formatFn: shortenAddress }), loadingComponent: _jsx(AccountAddress, { formatFn: shortenAddress }) }) })), _jsx(Text, { className: `${TW_CONNECTED_WALLET}__balance`, color: "secondaryText", size: "xs", style: {
                            alignItems: "center",
                            display: "flex",
                            gap: "2px",
                        }, weight: 400, children: props.detailsButton?.showBalanceInFiat ? (_jsxs(_Fragment, { children: [_jsx(AccountBalance, { chain: walletChain, fallbackComponent: _jsx(Skeleton, { height: fontSize.xs, width: "50px" }), loadingComponent: _jsx(Skeleton, { height: fontSize.xs, width: "50px" }), tokenAddress: tokenAddress }), _jsx(AccountBalance, { chain: walletChain, formatFn: detailsBtn_formatFiatBalanceForButton, loadingComponent: _jsx(Skeleton, { height: fontSize.xs, width: "20px" }), showBalanceInFiat: "USD", tokenAddress: tokenAddress })] })) : (_jsx(AccountBalance, { chain: walletChain, fallbackComponent: _jsx(Skeleton, { height: fontSize.xs, width: "70px" }), formatFn: detailsBtn_formatTokenBalanceForButton, loadingComponent: _jsx(Skeleton, { height: fontSize.xs, width: "70px" }), tokenAddress: tokenAddress })) })] })] }));
};
/**
 * @internal Exported for tests
 */
export function detailsBtn_formatFiatBalanceForButton(props) {
    return ` (${formatAccountFiatBalance({ ...props, decimals: 0 })})`;
}
/**
 * @internal Exported for test
 */
export function detailsBtn_formatTokenBalanceForButton(props) {
    return `${formatAccountTokenBalance({ ...props, decimals: props.balance < 1 ? 5 : 4 })}`;
}
/**
 * @internal Exported for tests only
 */
export function DetailsModal(props) {
    const [screen, setScreen] = useState("main");
    const { disconnect } = useDisconnect();
    const [isOpen, setIsOpen] = useState(true);
    const { client, locale } = props;
    const walletChain = useActiveWalletChain();
    const activeAccount = useActiveAccount();
    const theme = parseTheme(props.theme);
    const activeWallet = useActiveWallet();
    const chainFaucetsQuery = useChainFaucets(walletChain);
    const chainMetadataQuery = useChainMetadata(walletChain);
    const disableSwitchChain = !activeWallet?.switchChain;
    const screenSetup = useSetupScreen({
        size: "compact",
        wallets: activeWallet ? [activeWallet] : [],
        welcomeScreen: undefined,
    });
    const closeModal = useCallback(() => {
        setIsOpen(false);
        onModalUnmount(() => {
            props.closeModal();
        });
    }, [props.closeModal]);
    function handleDisconnect(info) {
        setIsOpen(false);
        props.closeModal();
        props.onDisconnect(info);
    }
    useEffect(() => {
        if (!activeAccount) {
            closeModal();
        }
    }, [activeAccount, closeModal]);
    const { hideSendFunds, hideReceiveFunds, hideBuyFunds } = props.detailsModal || {};
    const hideAllButtons = hideSendFunds && hideReceiveFunds && hideBuyFunds;
    const avatarContent = (_jsxs(Container, { style: {
            height: `${iconSize.xl}px`,
            position: "relative",
            width: `${iconSize.xl}px`,
        }, children: [_jsx(Container, { style: {
                    borderRadius: "100%",
                    height: "100%",
                    overflow: "hidden",
                    width: "100%",
                }, children: props.detailsModal?.connectedAccountAvatarUrl ? (_jsx("img", { alt: "", src: props.detailsModal.connectedAccountAvatarUrl, style: {
                        height: "100%",
                        objectFit: "cover",
                        width: "100%",
                    } })) : (activeAccount && (_jsx(AccountAvatar, { fallbackComponent: _jsx(AccountBlobbie, { size: Number(iconSize.xxl) }), loadingComponent: _jsx(AccountBlobbie, { size: Number(iconSize.xxl) }), style: {
                        height: "100%",
                        objectFit: "cover",
                        width: "100%",
                    } }))) }), !props.detailsModal?.hideSwitchWallet ? (_jsx(Container, { style: {
                    bottom: -2,
                    position: "absolute",
                    right: -2,
                }, children: _jsx(IconContainer, { padding: "4px", style: {
                        background: theme.colors.modalBg,
                    }, children: activeWallet && (_jsx(WalletImage, { client: client, id: activeWallet.id, size: "12", style: { borderRadius: 0 } })) }) })) : null] }));
    let content = (_jsxs("div", { className: `${TW_CONNECTED_WALLET}__default_modal_screen`, children: [_jsx(Spacer, { y: "xs" }), _jsxs(Container, { center: "y", flex: "row", gap: "sm", px: "lg", style: {
                    paddingBottom: hideAllButtons ? spacing.md : spacing.lg,
                    paddingTop: spacing.lg,
                }, children: [props.detailsModal?.hideSwitchWallet ? (avatarContent) : (_jsx(ToolTip, { tip: "Switch wallet", children: _jsx("div", { onClick: () => {
                                setScreen("wallet-manager");
                            }, onKeyDown: (e) => {
                                if (e.key === "w") {
                                    setScreen("wallet-manager");
                                }
                            }, style: {
                                cursor: "pointer",
                            }, children: avatarContent }) })), _jsxs(Container, { flex: "column", gap: "3xs", children: [_jsxs("div", { style: {
                                    alignItems: "center",
                                    display: "flex",
                                    gap: spacing.xxs,
                                }, children: [props.detailsModal?.connectedAccountName ? (_jsx(Text, { color: "primaryText", size: "md", weight: 500, children: props.detailsModal.connectedAccountName })) : (_jsx(Text, { color: "primaryText", size: "md", weight: 500, children: _jsx(AccountName, { fallbackComponent: _jsx(AccountAddress, { formatFn: shortenAddress }), loadingComponent: _jsx(AccountAddress, { formatFn: shortenAddress }) }) })), _jsx(IconButton, { children: _jsx(CopyIcon, { text: activeAccount?.address || "", tip: locale.copyAddress }) })] }), _jsx(InAppWalletUserInfo, { client: client, locale: locale })] })] }), !hideAllButtons && (_jsxs(_Fragment, { children: [_jsx(Container, { px: "lg", children: _jsxs(Container, { style: {
                                display: "flex",
                                gap: spacing.xs,
                            }, children: [!hideSendFunds && (_jsxs(Button, { onClick: () => {
                                        setScreen("send");
                                    }, style: {
                                        alignItems: "center",
                                        display: "flex",
                                        flex: 1,
                                        fontSize: fontSize.sm,
                                        gap: spacing.xs,
                                        padding: spacing.sm,
                                    }, variant: "outline", children: [_jsx(Container, { center: "both", color: "secondaryText", flex: "row", children: _jsx(PaperPlaneIcon, { height: iconSize.sm, style: {
                                                    transform: "translateY(-10%) rotate(-45deg) ",
                                                }, width: iconSize.sm }) }), locale.send] })), !hideReceiveFunds && (_jsxs(Button, { onClick: () => {
                                        setScreen("receive");
                                    }, style: {
                                        alignItems: "center",
                                        display: "flex",
                                        flex: 1,
                                        fontSize: fontSize.sm,
                                        gap: spacing.xs,
                                        padding: spacing.sm,
                                    }, variant: "outline", children: [_jsx(Container, { center: "both", color: "secondaryText", flex: "row", children: _jsx(PinBottomIcon, { height: iconSize.sm, width: iconSize.sm }) }), locale.receive] })), !hideBuyFunds &&
                                    chainMetadataQuery.data &&
                                    !chainMetadataQuery.data.testnet && (_jsxs(Button, { onClick: () => {
                                        trackPayEvent({
                                            client: client,
                                            event: "details_modal_buy_click",
                                            walletAddress: activeAccount?.address,
                                            walletType: activeWallet?.id,
                                        });
                                        setScreen("buy");
                                    }, style: {
                                        alignItems: "center",
                                        display: "flex",
                                        flex: 1,
                                        fontSize: fontSize.sm,
                                        gap: spacing.xs,
                                        padding: spacing.sm,
                                    }, variant: "outline", children: [_jsx(Container, { center: "both", color: "secondaryText", flex: "row", children: _jsx(PlusIcon, { height: iconSize.sm, width: iconSize.sm }) }), locale.buy] }))] }) }), _jsx(Spacer, { y: "md" })] })), _jsxs(Container, { px: "md", children: [_jsxs(Container, { flex: "column", style: {
                            gap: "1px",
                        }, children: [_jsx(NetworkSwitcherButton, { client: props.client, disableSwitchChain: disableSwitchChain, displayBalanceToken: props.displayBalanceToken, setScreen: () => setScreen("network-switcher"), showBalanceInFiat: props.detailsModal?.showBalanceInFiat }), _jsxs(MenuButton, { onClick: () => {
                                    setScreen("transactions");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(TextAlignJustifyIcon, { height: iconSize.md, width: iconSize.md }), _jsx(Container, { center: "y", flex: "row", gap: "xs", children: _jsx(Text, { color: "primaryText", children: locale.transactions }) })] }), (props.assetTabs === undefined || props.assetTabs.length > 0) && (_jsxs(MenuButton, { onClick: () => {
                                    setScreen("view-assets");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(CoinsIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: locale.viewFunds.viewAssets })] })), _jsxs(MenuButton, { onClick: () => {
                                    setScreen("manage-wallet");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(OutlineWalletIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: props.locale.manageWallet.title })] }), (props.detailsModal?.showTestnetFaucet ?? false) &&
                                (chainFaucetsQuery.faucets.length > 0 ||
                                    walletChain?.id === LocalhostChainId) && (_jsxs(MenuLink, { as: "a", href: chainFaucetsQuery.faucets ? chainFaucetsQuery.faucets[0] : "#", style: {
                                    color: "inherit",
                                    textDecoration: "none",
                                }, target: "_blank", children: [_jsx(Container, { center: "both", color: "secondaryText", flex: "row", children: _jsx(FundsIcon, { size: iconSize.md }) }), locale.requestTestnetFunds] })), props.detailsModal?.footer && (_jsx(props.detailsModal.footer, { close: closeModal }))] }), _jsx(Spacer, { y: "md" })] }), props.detailsModal?.hideDisconnect !== true && (_jsxs(Container, { children: [_jsx(Line, {}), _jsx(Spacer, { y: "sm" }), _jsx(Container, { px: "md", children: _jsxs(MenuButton, { "data-variant": "danger", onClick: () => {
                                if (activeWallet && activeAccount) {
                                    disconnect(activeWallet);
                                    handleDisconnect({
                                        account: activeAccount,
                                        wallet: activeWallet,
                                    });
                                }
                            }, type: "button", children: [_jsx(ExitIcon, { height: iconSize.md, width: iconSize.md }), _jsx(Text, { color: "primaryText", children: locale.disconnectWallet })] }) }), _jsx(Spacer, { y: "sm" })] }))] }));
    if (screen === "transactions") {
        content = (_jsx(TransactionsScreen, { client: client, closeModal: closeModal, locale: locale, onBack: () => setScreen("main"), setScreen: setScreen, title: locale.buy }));
    }
    if (screen === "wallet-manager" &&
        activeAccount &&
        walletChain &&
        activeWallet) {
        content = (_jsx(WalletManagerScreen, { accountAbstraction: props.connectOptions?.accountAbstraction, activeAccount: activeAccount, activeChain: walletChain, activeWallet: activeWallet, appMetadata: props.connectOptions?.appMetadata, chain: props.connectOptions?.chain, chains: props.connectOptions?.chains, client: client, connectLocale: locale, hiddenWallets: props.connectOptions?.hiddenWallets, onBack: () => setScreen("main"), recommendedWallets: props.connectOptions?.recommendedWallets, showAllWallets: !!props.connectOptions?.showAllWallets, walletConnect: props.connectOptions?.walletConnect, wallets: props.connectOptions?.wallets }));
    }
    if (screen === "network-switcher") {
        content = (_jsx(NetworkSelectorContent
        // add currently connected chain to the list of chains if it's not already in the list
        , { 
            // add currently connected chain to the list of chains if it's not already in the list
            chains: walletChain &&
                props.chains.find((c) => c.id === walletChain.id) === undefined
                ? [walletChain, ...props.chains]
                : props.chains, client: client, closeModal: closeModal, connectLocale: locale, networkSelector: props.detailsModal?.networkSelector, onBack: () => {
                setScreen("main");
            } }));
    }
    else if (screen === "view-assets") {
        content = (_jsx(ViewAssets, { assetTabs: props.detailsModal?.assetTabs, client: client, connectLocale: locale, onBack: () => {
                setScreen("main");
            }, setScreen: setScreen, supportedNFTs: props.supportedNFTs, supportedTokens: props.supportedTokens, theme: props.theme }));
    }
    else if (screen === "view-nfts") {
        content = (_jsx(ViewNFTs, { client: client, connectLocale: locale, onBack: () => {
                setScreen("main");
            }, supportedNFTs: props.supportedNFTs, theme: props.theme }));
    }
    else if (screen === "view-tokens") {
        content = (_jsx(ViewTokens, { client: client, connectLocale: locale, onBack: () => {
                setScreen("main");
            }, supportedTokens: props.supportedTokens }));
    }
    else if (screen === "private-key") {
        content = (_jsx(PrivateKey, { client: client, connectLocale: locale, onBack: () => {
                setScreen("manage-wallet");
            }, theme: props.theme, wallet: activeWallet }));
    }
    else if (screen === "manage-wallet") {
        content = (_jsx(ManageWalletScreen, { client: client, closeModal: closeModal, locale: locale, onBack: () => {
                setScreen("main");
            }, manageWallet: props.detailsModal?.manageWallet, setScreen: setScreen }));
    }
    else if (screen === "wallet-connect-receiver") {
        content = (_jsx(WalletConnectReceiverScreen, { chains: props.chains, client: client, onBack: () => {
                setScreen("manage-wallet");
            } }));
    }
    else if (screen === "linked-profiles") {
        content = (_jsx(LinkedProfilesScreen, { client: client, locale: locale, onBack: () => setScreen("manage-wallet"), setScreen: setScreen }));
    }
    else if (screen === "link-profile") {
        content = (_jsx(LinkProfileScreen, { client: client, locale: locale, onBack: () => {
                setScreen("linked-profiles");
            }, walletConnect: props.connectOptions?.walletConnect }));
    }
    // send funds
    else if (screen === "send") {
        content = (_jsx(SendFunds, { client: client, connectLocale: locale, onBack: () => {
                setScreen("main");
            }, supportedTokens: props.supportedTokens }));
    }
    // receive funds
    else if (screen === "receive") {
        content = (_jsx(ReceiveFunds, { client: client, connectLocale: locale, onBack: () => {
                setScreen("main");
            }, walletId: activeWallet?.id }));
    }
    // thirdweb pay
    else if (screen === "buy") {
        const requestedChainId = props.detailsModal?.payOptions?.prefillBuy?.chain?.id ||
            walletChain?.id ||
            props.chains[0]?.id ||
            1;
        content = (_jsx(BuyWidget, { amount: props.detailsModal?.payOptions?.prefillBuy?.amount || "0.01", chain: getCachedChain(requestedChainId), client: client, hiddenWallets: props.detailsModal?.hiddenWallets, locale: locale.id, connectOptions: props.connectOptions, onCancel: () => setScreen("main"), onSuccess: () => setScreen("main"), supportedTokens: props.supportedTokens, theme: props.theme, style: {
                border: "none",
                borderRadius: radius.lg,
            }, tokenAddress: props.displayBalanceToken?.[Number(requestedChainId)] }));
    }
    return (_jsx(CustomThemeProvider, { theme: props.theme, children: _jsx(WalletUIStatesProvider, { isOpen: false, theme: props.theme, children: _jsx(ScreenSetupContext.Provider, { value: screenSetup, children: _jsx(Modal, { open: isOpen, setOpen: (_open) => {
                        if (!_open) {
                            closeModal();
                            if (props.detailsModal?.onClose) {
                                props.detailsModal?.onClose(screen);
                            }
                        }
                    }, size: "compact", children: activeAccount?.address && (_jsx(AccountProvider, { address: activeAccount.address, client: client, children: content })) }) }) }) }));
}
/**
 * When this button is clicked, it will switch to the screen where users
 * can select a chain to switch to.
 * @internal
 */
export function NetworkSwitcherButton(props) {
    const { disableSwitchChain, setScreen, showBalanceInFiat, client } = props;
    const walletChain = useActiveWalletChain();
    if (!walletChain) {
        return null;
    }
    return (_jsxs(MenuButton, { className: "tw-internal-network-switcher-button", "data-variant": "primary", disabled: disableSwitchChain, onClick: () => {
            setScreen("network-switcher");
        }, type: "button", children: [_jsxs(ChainProvider, { chain: walletChain, children: [_jsx("div", { style: {
                            alignItems: "center",
                            display: "flex",
                            position: "relative",
                        }, children: _jsxs(Container, { style: {
                                alignItems: "center",
                                display: "flex",
                                flexShrink: 0,
                                position: "relative",
                            }, children: [_jsx(ChainIcon, { client: client, fallbackComponent: _jsx("img", { alt: "", src: fallbackChainIcon, style: {
                                            height: `${iconSize.md}px`,
                                            width: `${iconSize.md}px`,
                                        } }), loadingComponent: _jsx(Skeleton, { height: `${iconSize.md}px`, width: `${iconSize.md}px` }), style: {
                                        height: `${iconSize.md}px`,
                                        width: `${iconSize.md}px`,
                                    } }), _jsx(ChainActiveDot, { className: "tw-chain-active-dot-details-button" })] }) }), _jsxs(Text, { color: "primaryText", multiline: true, size: "md", children: [_jsx(ChainName, { fallbackComponent: _jsxs("span", { children: ["Unknown chain #", walletChain?.id] }), loadingComponent: _jsx(Skeleton, { height: "16px", width: "150px" }) }), _jsx(Text, { color: "secondaryText", size: "xs", children: showBalanceInFiat ? (_jsxs(_Fragment, { children: [_jsx(AccountBalance, { chain: walletChain, fallbackComponent: _jsx(Skeleton, { height: "1em", width: "70px" }), formatFn: (props) => formatAccountTokenBalance({ ...props, decimals: 7 }), loadingComponent: _jsx(Skeleton, { height: "1em", width: "70px" }), tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)] }), " ", _jsx(AccountBalance, { chain: walletChain, formatFn: (props) => ` (${formatAccountFiatBalance({ ...props, decimals: 3 })})`, loadingComponent: _jsx(Skeleton, { height: "1em", width: "30px" }), showBalanceInFiat: "USD", tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)] })] })) : (_jsx(AccountBalance, { chain: walletChain, fallbackComponent: _jsx(Skeleton, { height: "1em", width: "100px" }), formatFn: (props) => formatAccountTokenBalance({ ...props, decimals: 7 }), loadingComponent: _jsx(Skeleton, { height: "1em", width: "100px" }), tokenAddress: props.displayBalanceToken?.[Number(walletChain?.id)] })) })] })] }), _jsx(StyledChevronRightIcon, { height: iconSize.sm, style: {
                    flexShrink: 0,
                    marginLeft: "auto",
                }, width: iconSize.sm })] }));
}
const WalletInfoButton = /* @__PURE__ */ StyledButton((_) => {
    const theme = useCustomTheme();
    return {
        all: "unset",
        "&:hover": {
            background: theme.colors.connectedButtonBgHover,
            transition: "background 250ms ease",
        },
        alignItems: "center",
        animation: `${fadeInAnimation} 300ms ease`,
        background: theme.colors.connectedButtonBg,
        border: `1px solid ${theme.colors.borderColor}`,
        borderRadius: radius.md,
        boxSizing: "border-box",
        cursor: "pointer",
        display: "inline-flex",
        gap: spacing.xs,
        height: "50px",
        lineHeight: "normal",
        minWidth: "165px",
        overflow: "hidden",
        padding: spacing.xs,
        WebkitTapHighlightColor: "transparent",
    };
});
/**
 * @internal Export for tests
 */
export const StyledChevronRightIcon = /* @__PURE__ */ styled(
/* @__PURE__ */ ChevronRightIcon)(() => {
    const theme = useCustomTheme();
    return {
        color: theme.colors.secondaryText,
    };
});
/**
 * @internal Exported for test
 */
export function ConnectedToSmartWallet(props) {
    const activeAccount = useActiveAccount();
    const activeWallet = useActiveWallet();
    const isSW = isSmartWallet(activeWallet);
    const chain = useActiveWalletChain();
    const { client, connectLocale: locale } = props;
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = useState(false);
    useEffect(() => {
        if (activeAccount && isSW && activeAccount.address && chain) {
            const contract = getContract({
                address: activeAccount.address,
                chain,
                client,
            });
            isContractDeployed(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSW]);
    const content = (_jsx(Container, { center: "y", flex: "row", gap: "3xs", children: _jsx(Text, { color: "secondaryText", size: "xs", weight: 400, children: locale.connectedToSmartWallet }) }));
    if (chain && activeAccount && isSW) {
        return (_jsx(_Fragment, { children: isSmartWalletDeployed ? (_jsx(Link, { color: "secondaryText", hoverColor: "primaryText", href: `https://thirdweb.com/${chain.id}/${activeAccount.address}/account`, size: "sm", target: "_blank", children: content })) : (_jsxs(Text, { size: "sm", children: [" ", content] })) }));
    }
    return null;
}
/**
 * @internal Exported for tests
 */
export function InAppWalletUserInfo(props) {
    const { client, locale } = props;
    const account = useActiveAccount();
    const activeWallet = useActiveWallet();
    const adminWallet = useAdminWallet();
    const { data: walletInfo } = useWalletInfo(activeWallet?.id);
    const isSW = isSmartWallet(activeWallet);
    const { data: walletName } = useQuery({
        enabled: !!activeWallet?.id && !!walletInfo,
        queryFn: async () => {
            const lastAuthProvider = await getLastAuthProvider(webLocalStorage);
            if (lastAuthProvider === "guest") {
                return "Guest";
            }
            if (lastAuthProvider &&
                (activeWallet?.id === "inApp" || activeWallet?.id === "smart") &&
                socialAuthOptions.includes(lastAuthProvider)) {
                return (lastAuthProvider.slice(0, 1).toUpperCase() + lastAuthProvider.slice(1));
            }
            return walletInfo?.name;
        },
        queryKey: [
            "wallet-name",
            { walletAddress: account?.address, walletId: activeWallet?.id },
        ],
    });
    const userInfoQuery = useQuery({
        enabled: !!adminWallet,
        queryFn: async () => {
            const isInAppWallet = adminWallet &&
                (adminWallet.id === "inApp" || adminWallet.id.startsWith("ecosystem."));
            if (!isInAppWallet) {
                return null;
            }
            let ecosystem;
            if (isEcosystemWallet(adminWallet)) {
                const ecosystemWallet = adminWallet;
                const partnerId = ecosystemWallet.getConfig()?.partnerId;
                ecosystem = {
                    id: ecosystemWallet.id,
                    partnerId,
                };
            }
            const { getUserEmail, getUserPhoneNumber } = await import("../../../../wallets/in-app/web/lib/auth/index.js");
            const [email, phone] = await Promise.all([
                getUserEmail({
                    client: client,
                    ecosystem,
                }),
                getUserPhoneNumber({
                    client: client,
                    ecosystem,
                }),
            ]);
            return email || phone || null;
        },
        queryKey: ["in-app-wallet-user", client, account?.address],
    });
    if (!userInfoQuery.data && isSW) {
        return _jsx(ConnectedToSmartWallet, { client: client, connectLocale: locale });
    }
    if (userInfoQuery.data || walletName) {
        return (_jsx(Text, { size: "xs", weight: 400, children: userInfoQuery.data || walletName }));
    }
    return (_jsx(Skeleton, { className: "InAppWalletUserInfo__skeleton", height: "10px", width: "50px" }));
}
/**
 * @internal Exported for tests
 */
export function SwitchNetworkButton(props) {
    const switchChain = useSwitchActiveWalletChain();
    const [switching, setSwitching] = useState(false);
    const locale = props.connectLocale;
    const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;
    return (_jsx(Button, { "aria-label": switching ? locale.switchingNetwork : undefined, className: `tw-connect-wallet--switch-network ${props.className || ""}`, "data-is-loading": switching, "data-test": "switch-network-button", disabled: switching, onClick: async () => {
            setSwitching(true);
            try {
                await switchChain(props.targetChain);
            }
            catch (e) {
                console.error(e);
            }
            setSwitching(false);
        }, style: {
            minWidth: "140px",
            ...props.style,
        }, type: "button", variant: "primary", children: switching ? (_jsx(Spinner, { color: "primaryButtonText", size: "sm" })) : (switchNetworkBtnTitle) }));
}
/**
 * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useWalletDetailsModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const detailsModal = useWalletDetailsModal();
 *
 *   function handleClick() {
 *      detailsModal.open({ client, theme: 'light' });
 *   }
 *
 *   return <button onClick={handleClick}> Show Wallet Details </button>
 * }
 * ```
 *
 * ### Callback for when the modal is closed
 * ```tsx
 * detailsModal.open({
 *   client,
 *   onClose: (screen: string) => console.log({ screen })
 * });
 * ```
 *
 * @wallet
 */
export function useWalletDetailsModal() {
    const account = useActiveAccount();
    const setRootEl = useContext(SetRootElementContext);
    function closeModal() {
        setRootEl(null);
    }
    function openModal(props) {
        if (!account) {
            throw new Error("Wallet is not connected.");
        }
        getConnectLocale(props.locale || "en_US")
            .then((locale) => {
            setRootEl(_jsx(DetailsModal, { chains: props.chains || [], client: props.client, closeModal: closeModal, connectOptions: props.connectOptions, detailsModal: {
                    showBalanceInFiat: props.showBalanceInFiat,
                    hiddenWallets: props.hiddenWallets,
                    manageWallet: props.manageWallet,
                    assetTabs: props.assetTabs,
                    connectedAccountAvatarUrl: props.connectedAccountAvatarUrl,
                    connectedAccountName: props.connectedAccountName,
                    footer: props.footer,
                    hideBuyFunds: props.hideBuyFunds,
                    hideDisconnect: props.hideDisconnect,
                    hideReceiveFunds: props.hideReceiveFunds,
                    hideSendFunds: props.hideSendFunds,
                    hideSwitchWallet: props.hideSwitchWallet,
                    networkSelector: props.networkSelector,
                    onClose: props.onClose,
                    payOptions: props.payOptions,
                    showTestnetFaucet: props.showTestnetFaucet,
                }, displayBalanceToken: props.displayBalanceToken, locale: locale, onDisconnect: (info) => {
                    props.onDisconnect?.(info);
                    closeModal();
                }, supportedNFTs: props.supportedNFTs, supportedTokens: props.supportedTokens, theme: props.theme || "dark" }));
        })
            .catch(() => {
            closeModal();
        });
    }
    return {
        open: openModal,
    };
}
//# sourceMappingURL=Details.js.map