"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getInstalledWalletProviders } from "../../../../wallets/injected/mipdStore.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, radius, spacing, } from "../../../core/design-system/index.js";
import { useWalletInfo } from "../../../core/utils/wallet.js";
import { Container } from "../components/basic.js";
import { Img } from "../components/Img.js";
import { Skeleton } from "../components/Skeleton.js";
import { Text } from "../components/text.js";
import { WalletImage } from "../components/WalletImage.js";
import { StyledButton } from "../design-system/elements.js";
/**
 * @internal
 */
export function WalletEntryButton(props) {
    const { selectWallet, wallet } = props;
    const walletId = wallet.id;
    const isRecommended = props.recommendedWallets?.find((w) => w.id === walletId);
    const walletInfo = useWalletInfo(walletId);
    const walletName = getInstalledWalletProviders().find((p) => p.info.rdns === walletId)?.info
        .name || walletInfo.data?.name;
    const isInstalled = getInstalledWalletProviders().find((p) => p.info.rdns === walletId);
    const customMeta = wallet && walletId === "inApp"
        ? wallet.getConfig()?.metadata
        : undefined;
    const nameOverride = customMeta?.name || walletName;
    const iconOverride = customMeta?.icon;
    return (_jsxs(WalletButtonEl, { "data-active": props.isActive, onClick: selectWallet, type: "button", children: [iconOverride ? (_jsx(Img, { alt: nameOverride, client: props.client, height: `${iconSize.xl}`, src: iconOverride, width: `${iconSize.xl}` })) : (_jsx(WalletImage, { client: props.client, id: walletId, size: iconSize.xl })), _jsxs(Container, { expand: true, flex: "column", gap: "xxs", children: [nameOverride ? (_jsx(Text, { color: "primaryText", weight: 600, children: nameOverride })) : (_jsx(Skeleton, { height: fontSize.md, width: "100px" })), props.badge ? (_jsx(Text, { size: "sm", children: props.badge })) : isRecommended ? (_jsx(Text, { size: "sm", children: props.connectLocale.recommended })) : isInstalled ? (_jsx(Text, { size: "sm", children: props.connectLocale.installed })) : null] })] }));
}
export const WalletButtonEl = /* @__PURE__ */ StyledButton((_) => {
    const theme = useCustomTheme();
    return {
        all: "unset",
        "&:hover": {
            backgroundColor: theme.colors.tertiaryBg,
            transform: "scale(1.01)",
        },
        '&[data-active="true"]': {
            backgroundColor: theme.colors.tertiaryBg,
        },
        alignItems: "center",
        borderRadius: radius.md,
        boxSizing: "border-box",
        color: theme.colors.secondaryText,
        cursor: "pointer",
        display: "flex",
        flexDirection: "row",
        gap: spacing.sm,
        padding: `${spacing.xs} ${spacing.xs}`,
        transition: "background-color 200ms ease, transform 200ms ease",
        width: "100%",
    };
});
//# sourceMappingURL=WalletEntryButton.js.map