"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { NATIVE_TOKEN_ADDRESS } from "../../../../constants/addresses.js";
import { getAddress, shortenAddress, } from "../../../../utils/address.js";
import { resolvePromisedValue } from "../../../../utils/promise/resolve-promised-value.js";
import { getWalletBalance } from "../../../../wallets/utils/getWalletBalance.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, spacing, } from "../../../core/design-system/index.js";
import { useChainMetadata } from "../../../core/hooks/others/useChainQuery.js";
import { useTransactionDetails } from "../../../core/hooks/useTransactionDetails.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { ConnectButton } from "../ConnectWallet/ConnectButton.js";
import { PoweredByThirdweb } from "../ConnectWallet/PoweredByTW.js";
import { Container, Line } from "../components/basic.js";
import { Button } from "../components/buttons.js";
import { ChainName } from "../components/ChainName.js";
import { Spacer } from "../components/Spacer.js";
import { Text } from "../components/text.js";
import { ChainIcon } from "./common/TokenAndChain.js";
import { WithHeader } from "./common/WithHeader.js";
export function TransactionPayment({ uiOptions, client, onContinue, onExecuteTransaction, connectOptions, showThirdwebBranding = true, }) {
    const theme = useCustomTheme();
    const activeAccount = useActiveAccount();
    const wallet = useActiveWallet();
    // Get chain metadata for native currency symbol
    const chainMetadata = useChainMetadata(uiOptions.transaction.chain);
    // Use the extracted hook for transaction details
    const transactionDataQuery = useTransactionDetails({
        client,
        transaction: uiOptions.transaction,
        wallet,
    });
    // We can't use useWalletBalance here because erc20Value is a possibly async value
    const { data: userBalance } = useQuery({
        enabled: !!activeAccount?.address,
        queryFn: async () => {
            if (!activeAccount?.address) {
                return "0";
            }
            const erc20Value = await resolvePromisedValue(uiOptions.transaction.erc20Value);
            const walletBalance = await getWalletBalance({
                address: activeAccount?.address,
                chain: uiOptions.transaction.chain,
                tokenAddress: erc20Value?.tokenAddress.toLowerCase() !== NATIVE_TOKEN_ADDRESS
                    ? erc20Value?.tokenAddress
                    : undefined,
                client,
            });
            return walletBalance.displayValue;
        },
        queryKey: ["user-balance", activeAccount?.address],
    });
    const contractName = transactionDataQuery.data?.contractMetadata?.name || "Unknown Contract";
    const functionName = transactionDataQuery.data?.functionInfo?.functionName || "Contract Call";
    const isLoading = transactionDataQuery.isLoading || chainMetadata.isLoading;
    const buttonLabel = uiOptions.buttonLabel || `Execute ${functionName}`;
    if (isLoading) {
        return (_jsxs(WithHeader, { client: client, defaultTitle: "Transaction", uiOptions: uiOptions, children: [_jsx(SkeletonHeader, { theme: theme }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsx(SkeletonRow, { theme: theme, width: "60%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { theme: theme, width: "40%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { theme: theme, width: "50%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { theme: theme, width: "45%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { theme: theme, width: "55%" }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "lg" }), _jsx("div", { style: {
                        backgroundColor: theme.colors.skeletonBg,
                        borderRadius: spacing.md,
                        height: "48px",
                        width: "100%",
                    } }), showThirdwebBranding ? (_jsxs("div", { children: [_jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {}), _jsx(Spacer, { y: "md" })] })) : null] }));
    }
    return (_jsxs(WithHeader, { client: client, defaultTitle: "Transaction", uiOptions: uiOptions, children: [_jsxs(Container, { center: "y", flex: "row", gap: "3xs", style: {
                    justifyContent: "space-between",
                }, children: [_jsx(Text, { color: "primaryText", size: "xl", weight: 700, children: transactionDataQuery.data?.usdValueDisplay ||
                            transactionDataQuery.data?.txCostDisplay }), _jsx(Text, { color: "secondaryText", size: "md", style: {
                            backgroundColor: theme.colors.tertiaryBg,
                            borderRadius: spacing.sm,
                            fontFamily: "monospace",
                            padding: `${spacing.xs} ${spacing.sm}`,
                            textAlign: "right",
                        }, children: functionName })] }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), contractName !== "UnknownContract" &&
                contractName !== undefined &&
                contractName !== "Unknown Contract" && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", style: {
                            alignItems: "center",
                            justifyContent: "space-between",
                        }, children: [_jsx(Text, { color: "secondaryText", size: "sm", children: "Contract" }), _jsx(Text, { color: "primaryText", size: "sm", children: contractName })] }), _jsx(Spacer, { y: "xs" })] })), _jsxs(Container, { flex: "row", style: {
                    alignItems: "center",
                    justifyContent: "space-between",
                }, children: [_jsx(Text, { color: "secondaryText", size: "sm", children: "Address" }), _jsx("a", { href: `https://thirdweb.com/${uiOptions.transaction.chain.id}/${uiOptions.transaction.to}`, rel: "noopener noreferrer", style: {
                            color: theme.colors.accentText,
                            fontFamily: "monospace",
                            fontSize: fontSize.sm,
                            textDecoration: "none",
                        }, target: "_blank", children: shortenAddress(uiOptions.transaction.to) })] }), _jsx(Spacer, { y: "xs" }), _jsxs(Container, { flex: "row", style: {
                    alignItems: "center",
                    justifyContent: "space-between",
                }, children: [_jsx(Text, { color: "secondaryText", size: "sm", children: "Network" }), _jsxs(Container, { center: "y", flex: "row", gap: "3xs", children: [_jsx(ChainIcon, { chain: uiOptions.transaction.chain, client: client, size: "xs" }), _jsx(ChainName, { chain: uiOptions.transaction.chain, client: client, color: "primaryText", short: true, size: "sm", style: {
                                    fontFamily: "monospace",
                                } })] })] }), _jsx(Spacer, { y: "xs" }), transactionDataQuery.data?.txCostDisplay && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", style: {
                            alignItems: "center",
                            justifyContent: "space-between",
                        }, children: [_jsx(Text, { color: "secondaryText", size: "sm", children: "Cost" }), _jsx(Text, { color: "primaryText", size: "sm", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.txCostDisplay })] }), _jsx(Spacer, { y: "xs" })] })), transactionDataQuery.data?.gasCostDisplay && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", style: {
                            alignItems: "center",
                            justifyContent: "space-between",
                        }, children: [_jsx(Text, { color: "secondaryText", size: "sm", children: "Network fees" }), _jsx(Text, { color: "primaryText", size: "sm", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.gasCostDisplay })] }), _jsx(Spacer, { y: "md" })] })), _jsx(Line, {}), _jsx(Spacer, { y: "lg" }), activeAccount ? (_jsx(Button, { fullWidth: true, onClick: () => {
                    if (transactionDataQuery.data?.tokenInfo) {
                        if (userBalance &&
                            Number(userBalance) <
                                Number(transactionDataQuery.data.totalCost)) {
                            // if user has funds, but not enough, we need to fund the wallet with the difference
                            onContinue((Number(transactionDataQuery.data.totalCost) -
                                Number(userBalance)).toString(), transactionDataQuery.data.tokenInfo, getAddress(activeAccount.address));
                            return;
                        }
                        // If the user has enough to pay, skip the payment step altogether
                        if (userBalance &&
                            Number(userBalance) >=
                                Number(transactionDataQuery.data.totalCost)) {
                            onExecuteTransaction();
                            return;
                        }
                        // otherwise, use the full transaction cost
                        onContinue(transactionDataQuery.data.totalCost, transactionDataQuery.data.tokenInfo, getAddress(activeAccount.address));
                    }
                }, style: {
                    fontSize: fontSize.md,
                    padding: `${spacing.sm} ${spacing.md}`,
                }, variant: "primary", children: buttonLabel })) : (_jsx(ConnectButton, { client: client, connectButton: {
                    label: buttonLabel,
                }, theme: theme, ...connectOptions })), showThirdwebBranding ? (_jsxs("div", { children: [_jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {})] })) : null, _jsx(Spacer, { y: "lg" })] }));
}
const SkeletonHeader = (props) => (_jsxs(Container, { center: "y", flex: "row", gap: "3xs", style: {
        justifyContent: "space-between",
    }, children: [_jsx("div", { style: {
                backgroundColor: props.theme.colors.skeletonBg,
                borderRadius: spacing.xs,
                height: "32px",
                width: "80px",
            } }), _jsx("div", { style: {
                backgroundColor: props.theme.colors.skeletonBg,
                borderRadius: spacing.sm,
                height: "24px",
                width: "120px",
            } })] }));
// Skeleton component for loading state
const SkeletonRow = ({ width = "100%", theme, }) => (_jsxs(Container, { flex: "row", style: {
        alignItems: "center",
        justifyContent: "space-between",
    }, children: [_jsx("div", { style: {
                backgroundColor: theme.colors.skeletonBg,
                borderRadius: spacing.xs,
                height: "16px",
                width: "30%",
            } }), _jsx("div", { style: {
                backgroundColor: theme.colors.skeletonBg,
                borderRadius: spacing.xs,
                height: "16px",
                width,
            } })] }));
//# sourceMappingURL=TransactionPayment.js.map