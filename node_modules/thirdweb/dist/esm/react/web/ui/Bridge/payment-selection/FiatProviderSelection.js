"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from "react";
import { checksumAddress } from "../../../../../utils/address.js";
import { formatNumber } from "../../../../../utils/formatNumber.js";
import { toTokens } from "../../../../../utils/units.js";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, spacing, } from "../../../../core/design-system/index.js";
import { useBuyWithFiatQuotesForProviders } from "../../../../core/hooks/pay/useBuyWithFiatQuotesForProviders.js";
import { formatCurrencyAmount } from "../../ConnectWallet/screens/formatTokenBalance.js";
import { Container } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Img } from "../../components/Img.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Text } from "../../components/text.js";
const PROVIDERS = [
    {
        description: "Fast and secure payments",
        iconUri: "https://i.ibb.co/LDJ3Rk2t/Frame-5.png",
        id: "coinbase",
        name: "Coinbase",
    },
    {
        description: "Trusted payment processing",
        iconUri: "https://i.ibb.co/CpgQC2Lf/images-3.png",
        id: "stripe",
        name: "Stripe",
    },
    {
        description: "Global payment solution",
        iconUri: "https://i.ibb.co/Xx2r882p/Transak-official-symbol-1.png",
        id: "transak",
        name: "Transak",
    },
];
export function FiatProviderSelection({ onProviderSelected, client, toChainId, toTokenAddress, toAddress, toAmount, currency, }) {
    const theme = useCustomTheme();
    // Fetch quotes for all providers
    const quoteQueries = useBuyWithFiatQuotesForProviders({
        amount: toAmount || "0",
        chainId: toChainId,
        client,
        currency: currency || "USD",
        receiver: checksumAddress(toAddress),
        tokenAddress: checksumAddress(toTokenAddress),
    });
    const quotes = useMemo(() => {
        return quoteQueries.map((q) => q.data).filter((q) => !!q);
    }, [quoteQueries]);
    if (quoteQueries.every((q) => q.isError)) {
        return (_jsx(Container, { center: "both", flex: "column", style: { minHeight: "120px" }, children: _jsx(Text, { color: "secondaryText", size: "sm", children: "No quotes available" }) }));
    }
    // TODO: add a "remember my choice" checkbox
    return (_jsx(Container, { flex: "column", gap: "sm", children: quotes.length > 0 ? (quotes
            .sort((a, b) => a.currencyAmount - b.currencyAmount)
            .map((quote, index) => {
            const provider = PROVIDERS.find((p) => p.id === quote.intent.onramp);
            if (!provider) {
                return null;
            }
            return (_jsx(Container, { animate: "fadein", style: {
                    animationDelay: `${index * 100}ms`,
                }, children: _jsx(Button, { fullWidth: true, onClick: () => onProviderSelected(provider.id), style: {
                        backgroundColor: theme.colors.tertiaryBg,
                        border: `1px solid ${theme.colors.borderColor}`,
                        borderRadius: radius.md,
                        padding: `${spacing.sm} ${spacing.md}`,
                        textAlign: "left",
                    }, variant: "secondary", children: _jsxs(Container, { flex: "row", gap: "sm", style: { alignItems: "center", width: "100%" }, children: [_jsx(Container, { style: {
                                    alignItems: "center",
                                    borderRadius: "50%",
                                    display: "flex",
                                    height: `${iconSize.md}px`,
                                    justifyContent: "center",
                                    overflow: "hidden",
                                    padding: spacing.xs,
                                    width: `${iconSize.md}px`,
                                }, children: _jsx(Img, { alt: provider.name, client: client, height: iconSize.md, src: provider.iconUri, width: iconSize.md }) }), _jsx(Container, { flex: "column", gap: "3xs", style: { flex: 1 }, children: _jsx(Text, { color: "primaryText", size: "md", style: { fontWeight: 600 }, children: provider.name }) }), _jsxs(Container, { flex: "column", gap: "3xs", style: { alignItems: "flex-end" }, children: [_jsx(Text, { color: "primaryText", size: "sm", style: { fontWeight: 500 }, children: formatCurrencyAmount(currency || "US", quote.currencyAmount) }), _jsxs(Text, { color: "secondaryText", size: "xs", children: [formatNumber(Number(toTokens(quote.destinationAmount, quote.destinationToken.decimals)), 4), " ", quote.destinationToken.symbol] })] })] }) }) }, provider.id));
        })) : (_jsxs(Container, { center: "both", flex: "column", style: { minHeight: "120px" }, children: [_jsx(Spinner, { color: "secondaryText", size: "lg" }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { center: true, color: "secondaryText", size: "sm", children: "Generating quotes..." })] })) }));
}
//# sourceMappingURL=FiatProviderSelection.js.map