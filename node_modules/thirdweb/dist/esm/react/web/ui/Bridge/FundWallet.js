/** biome-ignore-all lint/a11y/useSemanticElements: FIXME */
"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useRef, useState } from "react";
import { getAddress } from "../../../../utils/address.js";
import { numberToPlainString } from "../../../../utils/formatNumber.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, radius, spacing, } from "../../../core/design-system/index.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { ConnectButton } from "../ConnectWallet/ConnectButton.js";
import { OutlineWalletIcon } from "../ConnectWallet/icons/OutlineWalletIcon.js";
import { PoweredByThirdweb } from "../ConnectWallet/PoweredByTW.js";
import { WalletRow } from "../ConnectWallet/screens/Buy/swap/WalletRow.js";
import { formatCurrencyAmount } from "../ConnectWallet/screens/formatTokenBalance.js";
import { Container } from "../components/basic.js";
import { Button } from "../components/buttons.js";
import { Input } from "../components/formElements.js";
import { Spacer } from "../components/Spacer.js";
import { Text } from "../components/text.js";
import { TokenAndChain } from "./common/TokenAndChain.js";
import { WithHeader } from "./common/WithHeader.js";
export function FundWallet({ client, receiverAddress, uiOptions, onContinue, presetOptions = [5, 10, 20], connectOptions, showThirdwebBranding = true, }) {
    const [amount, setAmount] = useState(uiOptions.initialAmount ?? "");
    const theme = useCustomTheme();
    const account = useActiveAccount();
    const receiver = receiverAddress ?? account?.address;
    const handleAmountChange = (inputValue) => {
        let processedValue = inputValue;
        // Replace comma with period if it exists
        processedValue = processedValue.replace(",", ".");
        if (processedValue.startsWith(".")) {
            processedValue = `0${processedValue}`;
        }
        const numValue = Number(processedValue);
        if (Number.isNaN(numValue)) {
            return;
        }
        if (processedValue.startsWith("0") && !processedValue.startsWith("0.")) {
            setAmount(processedValue.slice(1));
        }
        else {
            setAmount(processedValue);
        }
    };
    const getAmountFontSize = () => {
        const length = amount.length;
        if (length > 12)
            return fontSize.md;
        if (length > 8)
            return fontSize.lg;
        return fontSize.xl;
    };
    const isValidAmount = amount && Number(amount) > 0;
    const inputRef = useRef(null);
    const focusInput = () => {
        inputRef.current?.focus();
    };
    const handleQuickAmount = (usdAmount) => {
        const price = uiOptions.destinationToken.prices[uiOptions.currency || "USD"] || 0;
        if (price === 0) {
            return;
        }
        // Convert USD amount to token amount using token price
        const tokenAmount = usdAmount / price;
        // Format to reasonable decimal places (up to 6 decimals, remove trailing zeros)
        const formattedAmount = numberToPlainString(Number.parseFloat(tokenAmount.toFixed(6)));
        setAmount(formattedAmount);
    };
    return (_jsxs(WithHeader, { client: client, defaultTitle: `Buy ${uiOptions.destinationToken.symbol}`, uiOptions: uiOptions, children: [_jsxs(Container, { flex: "column", children: [_jsxs(Container, { center: "both", flex: "row", gap: "3xs", p: "md", style: {
                            backgroundColor: theme.colors.tertiaryBg,
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: radius.md,
                            flexWrap: "nowrap",
                        }, children: [_jsx(TokenAndChain, { client: client, size: "xl", token: uiOptions.destinationToken }), _jsxs(Container, { center: "x", expand: true, flex: "column", gap: "3xs", style: {
                                    alignItems: "flex-end",
                                    justifyContent: "flex-end",
                                }, children: [_jsx("div", { onClick: focusInput, onKeyDown: (e) => {
                                            if (e.key === "Enter" || e.key === " ") {
                                                e.preventDefault();
                                                focusInput();
                                            }
                                        }, role: "button", style: { cursor: "text" }, tabIndex: 0, children: _jsx(Container, { center: "y", flex: "row", gap: "xs", style: {
                                                flexWrap: "nowrap",
                                                justifyContent: "flex-end",
                                            }, children: _jsx(Input, { "data-placeholder": amount === "", inputMode: "decimal", onChange: (e) => {
                                                    handleAmountChange(e.target.value);
                                                }, onClick: (e) => {
                                                    // put cursor at the end of the input
                                                    if (amount === "") {
                                                        e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                                    }
                                                }, pattern: "^[0-9]*[.,]?[0-9]*$", placeholder: "0", ref: inputRef, style: {
                                                    border: "none",
                                                    boxShadow: "none",
                                                    fontSize: getAmountFontSize(),
                                                    fontWeight: 600,
                                                    padding: "0",
                                                    textAlign: "right",
                                                }, type: "text", value: amount || "0", variant: "transparent" }) }) }), _jsx(Container, { center: "both", flex: "row", style: { flexWrap: "nowrap", height: fontSize.lg }, children: _jsxs(Text, { color: "secondaryText", size: "md", style: { textWrap: "nowrap" }, children: ["\u2248", " ", formatCurrencyAmount(uiOptions.currency || "USD", Number(amount) *
                                                    (uiOptions.destinationToken.prices[uiOptions.currency || "USD"] || 0))] }) })] })] }), presetOptions && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { center: "x", flex: "row", gap: "xs", style: {
                                    justifyContent: "space-evenly",
                                }, children: presetOptions?.map((amount) => (_jsxs(Button, { onClick: () => handleQuickAmount(Number(amount)), style: {
                                        backgroundColor: theme.colors.tertiaryBg,
                                        flex: 1,
                                        fontSize: fontSize.sm,
                                        padding: `${spacing.sm} ${spacing.md}`,
                                    }, variant: "outline", children: ["$", amount] }, amount))) })] })), _jsx(Spacer, { y: "md" }), _jsx(Container, { center: "y", color: "secondaryText", flex: "row", gap: "sm", px: "md", py: "sm", style: {
                            backgroundColor: theme.colors.tertiaryBg,
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: radius.md,
                        }, children: receiver ? (_jsx(WalletRow, { address: receiver, client: client, iconSize: "md", textSize: "sm" })) : (_jsxs(_Fragment, { children: [_jsx(OutlineWalletIcon, { size: iconSize.md }), _jsx(Text, { color: "secondaryText", size: "sm", style: {
                                        flex: 1,
                                    }, children: "No Wallet Connected" })] })) })] }), _jsx(Spacer, { y: "lg" }), receiver ? (_jsx(Button, { disabled: !isValidAmount, fullWidth: true, onClick: () => {
                    if (isValidAmount) {
                        onContinue(amount, uiOptions.destinationToken, getAddress(receiver));
                    }
                }, style: {
                    fontSize: fontSize.md,
                    padding: `${spacing.sm} ${spacing.md}`,
                }, variant: "primary", children: uiOptions.buttonLabel ||
                    `Buy ${amount} ${uiOptions.destinationToken.symbol}` })) : (_jsx(ConnectButton, { client: client, connectButton: {
                    label: uiOptions.buttonLabel ||
                        `Buy ${amount} ${uiOptions.destinationToken.symbol}`,
                }, theme: theme, ...connectOptions })), showThirdwebBranding ? (_jsxs("div", { children: [_jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {})] })) : null, _jsx(Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=FundWallet.js.map