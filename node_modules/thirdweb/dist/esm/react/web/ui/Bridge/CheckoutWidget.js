"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { trackPayEvent } from "../../../../analytics/track/pay.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../constants/addresses.js";
import { getToken } from "../../../../pay/convert/get-token.js";
import { checksumAddress } from "../../../../utils/address.js";
import { stringify } from "../../../../utils/json.js";
import { CustomThemeProvider } from "../../../core/design-system/CustomThemeProvider.js";
import { useConnectLocale } from "../ConnectWallet/locale/getConnectLocale.js";
import { EmbedContainer } from "../ConnectWallet/Modal/ConnectEmbed.js";
import { Container } from "../components/basic.js";
import { Button } from "../components/buttons.js";
import { DynamicHeight } from "../components/DynamicHeight.js";
import { Spinner } from "../components/Spinner.js";
import { Text } from "../components/text.js";
import { BridgeOrchestrator } from "./BridgeOrchestrator.js";
import { UnsupportedTokenScreen } from "./UnsupportedTokenScreen.js";
/**
 * Widget a prebuilt UI for purchasing a specific token.
 *
 * @param props - Props of type [`CheckoutWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/CheckoutWidgetProps) to configure the CheckoutWidget component.
 *
 * @example
 * ### Default configuration
 *
 * The `CheckoutWidget` component allows user to pay a given wallet for any product or service. You can register webhooks to get notified for every purchase done via the widget.
 *
 * ```tsx
 * <CheckoutWidget
 *   client={client}
 *   chain={base}
 *   amount="0.01" // in native tokens (ETH), pass tokenAddress to charge in a specific token (USDC, USDT, etc.)
 *   seller="0x123...abc" // the wallet address that will receive the payment
 *   name="Premium Course"
 *   description="Complete guide to web3 development"
 *   image="/course-thumbnail.jpg"
 *   onSuccess={() => {
 *     alert("Purchase successful!");
 *   }}
 *  />
 * ```
 *
 * ### Customize the supported tokens
 *
 * You can customize the supported tokens that users can pay with by passing a `supportedTokens` object to the `CheckoutWidget` component.
 *
 * ```tsx
 * <CheckoutWidget
 *   client={client}
 *   chain={arbitrum}
 *   amount="0.01"
 *   seller="0x123...abc"
 *   // user will only be able to pay with these tokens
 *   supportedTokens={{
 *     [8453]: [
 *       {
 *         address: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
 *         name: "USDC",
 *         symbol: "USDC",
 *       },
 *     ],
 *   }}
 *  />
 * ```
 *
 * ### Customize the UI
 *
 * You can customize the UI of the `CheckoutWidget` component by passing a custom theme object to the `theme` prop.
 *
 * ```tsx
 * <CheckoutWidget
 *   client={client}
 *   chain={arbitrum}
 *   amount="0.01"
 *   seller="0x123...abc"
 *   theme={darkTheme({
 *     colors: {
 *       modalBg: "red",
 *     },
 *   })}
 * />
 * ```
 *
 * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.
 *
 * ### Update the Title
 *
 * You can update the title of the widget by passing a `title` prop to the `CheckoutWidget` component.
 *
 * ```tsx
 * <CheckoutWidget
 *   client={client}
 *   title="Checkout ETH"
 * />
 * ```
 *
 * ### Configure the wallet connection
 *
 * You can customize the wallet connection flow by passing a `connectOptions` object to the `CheckoutWidget` component.
 *
 * ```tsx
 * <CheckoutWidget
 *   client={client}
 *   chain={arbitrum}
 *   amount="0.01"
 *   seller="0x123...abc"
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *       title: "Sign in",
 *     }
 *   }}
 * />
 * ```
 *
 * Refer to the [`CheckoutWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/CheckoutWidgetConnectOptions) type for more details.
 *
 * @bridge Widgets
 */
export function CheckoutWidget(props) {
    const localeQuery = useConnectLocale(props.locale || "en_US");
    const theme = props.theme || "dark";
    useQuery({
        queryFn: () => {
            trackPayEvent({
                client: props.client,
                event: "ub:ui:checkout_widget:render",
                toChainId: props.chain.id,
                toToken: props.tokenAddress,
            });
            return true;
        },
        queryKey: ["checkout_widget:render"],
    });
    const bridgeDataQuery = useQuery({
        queryFn: async () => {
            const token = await getToken(props.client, checksumAddress(props.tokenAddress || NATIVE_TOKEN_ADDRESS), props.chain.id).catch((err) => err.message.includes("not supported") ? undefined : Promise.reject(err));
            if (!token) {
                return {
                    chain: props.chain,
                    tokenAddress: checksumAddress(props.tokenAddress || NATIVE_TOKEN_ADDRESS),
                    type: "unsupported_token",
                };
            }
            return {
                data: {
                    metadata: {
                        description: props.description,
                        image: props.image,
                        title: props.name,
                    },
                    mode: "direct_payment",
                    currency: props.currency || "USD",
                    buttonLabel: props.buttonLabel,
                    paymentInfo: {
                        amount: props.amount,
                        feePayer: props.feePayer === "seller" ? "receiver" : "sender",
                        sellerAddress: props.seller,
                        token, // User is sender, seller is receiver
                    },
                },
                type: "success",
            };
        },
        queryKey: ["bridgeData", stringify(props)],
    });
    let content = null;
    if (!localeQuery.data || bridgeDataQuery.isLoading) {
        content = (_jsx("div", { style: {
                alignItems: "center",
                display: "flex",
                justifyContent: "center",
                minHeight: "350px",
            }, children: _jsx(Spinner, { color: "secondaryText", size: "xl" }) }));
    }
    else if (bridgeDataQuery.data?.type === "unsupported_token") {
        // Show unsupported token screen
        content = (_jsx(UnsupportedTokenScreen, { chain: bridgeDataQuery.data.chain, client: props.client, tokenAddress: props.tokenAddress }));
    }
    else if (bridgeDataQuery.data?.type === "success") {
        // Show normal bridge orchestrator
        content = (_jsx(BridgeOrchestrator, { client: props.client, connectLocale: localeQuery.data, connectOptions: props.connectOptions, onCancel: () => {
                props.onCancel?.();
            }, onComplete: () => {
                props.onSuccess?.();
            }, onError: (err) => {
                props.onError?.(err);
            }, paymentLinkId: props.paymentLinkId, paymentMethods: props.paymentMethods, presetOptions: props.presetOptions, purchaseData: props.purchaseData, receiverAddress: props.seller, showThirdwebBranding: props.showThirdwebBranding, uiOptions: bridgeDataQuery.data.data, supportedTokens: props.supportedTokens }));
    }
    if (bridgeDataQuery.isError) {
        content = (_jsxs(Container, { flex: "column", center: "both", gap: "md", p: "md", py: "xl", children: [_jsx(Text, { center: true, size: "md", weight: 600, children: "Something went wrong." }), _jsx(Button, { variant: "ghost", onClick: () => bridgeDataQuery.refetch(), children: "Retry" })] }));
    }
    return (_jsx(CustomThemeProvider, { theme: theme, children: _jsx(EmbedContainer, { className: props.className, modalSize: "compact", style: props.style, children: _jsx(DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=CheckoutWidget.js.map