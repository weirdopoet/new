import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { trackPayEvent } from "../../../../analytics/track/pay.js";
import { resolvePromisedValue } from "../../../../utils/promise/resolve-promised-value.js";
import { CustomThemeProvider } from "../../../core/design-system/CustomThemeProvider.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { webWindowAdapter } from "../../adapters/WindowAdapter.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { BridgeOrchestrator } from "../Bridge/BridgeOrchestrator.js";
import { useConnectLocale } from "../ConnectWallet/locale/getConnectLocale.js";
import { Modal } from "../components/Modal.js";
import { DepositScreen } from "./DepositScreen.js";
import { ExecutingTxScreen } from "./ExecutingScreen.js";
export function TransactionModal(props) {
    const account = useActiveAccount();
    const wallet = useActiveWallet();
    useQuery({
        enabled: !!wallet && !!account,
        queryFn: async () => {
            if (!account || !wallet) {
                throw new Error(); // never happens, because enabled is false
            }
            trackPayEvent({
                client: props.client,
                event: props.modalMode === "buy"
                    ? "open_pay_transaction_modal"
                    : "open_pay_deposit_modal",
                toChainId: props.tx.chain.id,
                toToken: props.tx.erc20Value
                    ? (await resolvePromisedValue(props.tx.erc20Value))?.tokenAddress
                    : undefined,
                walletAddress: account.address,
                walletType: wallet.id,
            });
            return null;
        },
        queryKey: ["transaction-modal-event", props.txId],
    });
    return (_jsx(CustomThemeProvider, { theme: props.theme, children: _jsx(Modal, { open: true, setOpen: (_open) => {
                if (!_open) {
                    props.onClose();
                }
            }, size: "compact", children: _jsx(TransactionModalContent, { ...props }) }) }));
}
function TransactionModalContent(props) {
    const localeQuery = useConnectLocale(props.localeId);
    const [screen, setScreen] = useState("buy");
    if (!localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    if (screen === "execute-tx") {
        return (_jsx(ExecutingTxScreen, { closeModal: props.onClose, onTxSent: props.onTxSent, tx: props.tx, windowAdapter: webWindowAdapter }));
    }
    if (props.modalMode === "deposit") {
        return (_jsx(DepositScreen, { client: props.client, connectLocale: localeQuery.data, onBack: props.onBack, onDone: () => {
                setScreen("execute-tx");
            }, tx: props.tx }));
    }
    return (_jsx(BridgeOrchestrator, { client: props.client, connectLocale: localeQuery.data, connectOptions: undefined, onCancel: props.onClose, onComplete: () => {
            setScreen("execute-tx");
        }, onError: (_error) => { }, paymentLinkId: undefined, presetOptions: undefined, purchaseData: undefined, receiverAddress: undefined, uiOptions: {
            mode: "transaction",
            transaction: props.tx,
        } }));
}
//# sourceMappingURL=TransactionModal.js.map