import { useCallback, useState } from "react";
/**
 * Hook to create and use the payment machine
 */
export function usePaymentMachine(adapters, mode = "fund_wallet") {
    const [currentState, setCurrentState] = useState("init");
    const [context, setContext] = useState({
        adapters,
        mode,
    });
    const send = useCallback((event) => {
        setCurrentState((state) => {
            setContext((ctx) => {
                switch (state) {
                    case "init":
                        if (event.type === "DESTINATION_CONFIRMED") {
                            return {
                                ...ctx,
                                destinationAmount: event.destinationAmount,
                                destinationToken: event.destinationToken,
                                receiverAddress: event.receiverAddress,
                            };
                        }
                        else if (event.type === "ERROR_OCCURRED") {
                            return {
                                ...ctx,
                                currentError: event.error,
                                retryState: "init",
                            };
                        }
                        break;
                    case "methodSelection":
                        if (event.type === "PAYMENT_METHOD_SELECTED") {
                            return {
                                ...ctx,
                                quote: undefined, // reset quote when method changes
                                selectedPaymentMethod: event.paymentMethod,
                            };
                        }
                        else if (event.type === "ERROR_OCCURRED") {
                            return {
                                ...ctx,
                                currentError: event.error,
                                retryState: "methodSelection",
                            };
                        }
                        break;
                    case "quote":
                        if (event.type === "QUOTE_RECEIVED") {
                            return {
                                ...ctx,
                                quote: event.quote,
                                request: event.request,
                            };
                        }
                        else if (event.type === "ERROR_OCCURRED") {
                            return {
                                ...ctx,
                                currentError: event.error,
                                retryState: "quote",
                            };
                        }
                        break;
                    case "preview":
                        if (event.type === "ERROR_OCCURRED") {
                            return {
                                ...ctx,
                                currentError: event.error,
                                retryState: "preview",
                            };
                        }
                        break;
                    case "execute":
                        if (event.type === "EXECUTION_COMPLETE") {
                            return {
                                ...ctx,
                                completedStatuses: event.completedStatuses,
                            };
                        }
                        else if (event.type === "ERROR_OCCURRED") {
                            return {
                                ...ctx,
                                currentError: event.error,
                                retryState: "execute",
                            };
                        }
                        break;
                    case "error":
                        if (event.type === "RETRY" || event.type === "RESET") {
                            return {
                                ...ctx,
                                currentError: undefined,
                                retryState: undefined,
                            };
                        }
                        break;
                    case "success":
                        if (event.type === "RESET") {
                            return {
                                adapters: ctx.adapters,
                                mode: ctx.mode,
                            };
                        }
                        break;
                    case "post-buy-transaction":
                        if (event.type === "RESET") {
                            return {
                                adapters: ctx.adapters,
                                mode: ctx.mode,
                            };
                        }
                        break;
                }
                return ctx;
            });
            // State transitions
            switch (state) {
                case "init":
                    if (event.type === "DESTINATION_CONFIRMED")
                        return "methodSelection";
                    if (event.type === "ERROR_OCCURRED")
                        return "error";
                    if (event.type === "CONTINUE_TO_TRANSACTION")
                        return "post-buy-transaction";
                    break;
                case "methodSelection":
                    if (event.type === "PAYMENT_METHOD_SELECTED")
                        return "quote";
                    if (event.type === "BACK")
                        return "init";
                    if (event.type === "ERROR_OCCURRED")
                        return "error";
                    break;
                case "quote":
                    if (event.type === "QUOTE_RECEIVED")
                        return "preview";
                    if (event.type === "BACK")
                        return "methodSelection";
                    if (event.type === "ERROR_OCCURRED")
                        return "error";
                    break;
                case "preview":
                    if (event.type === "ROUTE_CONFIRMED")
                        return "execute";
                    if (event.type === "BACK")
                        return "methodSelection";
                    if (event.type === "ERROR_OCCURRED")
                        return "error";
                    break;
                case "execute":
                    if (event.type === "EXECUTION_COMPLETE")
                        return "success";
                    if (event.type === "BACK")
                        return "preview";
                    if (event.type === "ERROR_OCCURRED")
                        return "error";
                    break;
                case "success":
                    if (event.type === "CONTINUE_TO_TRANSACTION")
                        return "post-buy-transaction";
                    if (event.type === "RESET")
                        return "init";
                    break;
                case "post-buy-transaction":
                    if (event.type === "RESET")
                        return "init";
                    break;
                case "error":
                    if (event.type === "RETRY") {
                        return context.retryState ?? "init";
                    }
                    if (event.type === "RESET") {
                        return "init";
                    }
                    break;
            }
            return state;
        });
    }, [context.retryState]);
    return [
        {
            context,
            value: currentState,
        },
        send,
    ];
}
//# sourceMappingURL=paymentMachine.js.map