import { jsx as _jsx } from "react/jsx-runtime";
import { StepRunner } from "../../react/web/ui/Bridge/StepRunner.js";
import { ModalThemeWrapper, storyClient } from "../utils.js";
import { STORY_MOCK_WALLET, simpleBuyRequest } from "./fixtures.js";
// Mock window adapter
const mockWindowAdapter = {
    open: async (_url) => { },
};
// Wrapper component to provide theme context
const StepRunnerWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return (_jsx(ModalThemeWrapper, { theme: theme, children: _jsx(StepRunner, { ...componentProps }) }));
};
const meta = {
    args: {
        client: storyClient,
        onCancel: () => { },
        onComplete: (_completedStatuses) => { },
        onError: (error) => console.error("Error:", error),
        theme: "dark",
        wallet: STORY_MOCK_WALLET,
        windowAdapter: mockWindowAdapter,
    },
    argTypes: {
        onCancel: { action: "execution cancelled" },
        onComplete: { action: "execution completed" },
        onError: { action: "error occurred" },
        theme: {
            control: "select",
            description: "Theme for the component",
            options: ["light", "dark"],
        },
    },
    component: StepRunnerWithTheme,
    parameters: {
        docs: {
            description: {
                component: "**StepRunner** executes prepared route steps sequentially, showing real-time progress and transaction status.\n\n" +
                    "## Features\n" +
                    "- **Real Execution**: Uses useStepExecutor hook for actual transaction processing\n" +
                    "- **Progress Tracking**: Visual progress bar and step-by-step status updates\n" +
                    "- **Error Handling**: Retry functionality for failed transactions\n" +
                    "- **Transaction Batching**: Optimizes multiple transactions when possible\n" +
                    "- **Onramp Support**: Handles fiat-to-crypto onramp flows\n\n" +
                    "## Props\n" +
                    "- `steps`: Array of RouteStep objects from Bridge.prepare()\n" +
                    "- `wallet`: Connected wallet for transaction signing\n" +
                    "- `client`: ThirdwebClient instance\n" +
                    "- `windowAdapter`: Platform-specific window/URL handler\n" +
                    "- `onramp`: Optional onramp configuration\n\n" +
                    "## Integration\n" +
                    "This component is typically used within the BridgeOrchestrator after route preparation.",
            },
        },
        layout: "centered",
    },
    tags: ["autodocs"],
    title: "Bridge/StepRunner",
};
export default meta;
export const Light = {
    args: {
        request: simpleBuyRequest,
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const Dark = {
    args: {
        request: simpleBuyRequest,
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
//# sourceMappingURL=StepRunner.stories.js.map