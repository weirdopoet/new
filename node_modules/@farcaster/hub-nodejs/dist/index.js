"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod2, secondTarget) => (__copyProps(target, mod2, "default"), secondTarget && __copyProps(secondTarget, mod2, "default"));
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// ../../node_modules/tsup/assets/cjs_shims.js
var init_cjs_shims = __esm({
  "../../node_modules/tsup/assets/cjs_shims.js"() {
  }
});

// ../../node_modules/long/src/long.js
var require_long = __commonJS({
  "../../node_modules/long/src/long.js"(exports2, module2) {
    init_cjs_shims();
    module2.exports = Long9;
    var wasm = null;
    try {
      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
      ])), {}).exports;
    } catch (e) {
    }
    function Long9(low, high, unsigned) {
      this.low = low | 0;
      this.high = high | 0;
      this.unsigned = !!unsigned;
    }
    Long9.prototype.__isLong__;
    Object.defineProperty(Long9.prototype, "__isLong__", { value: true });
    function isLong(obj) {
      return (obj && obj["__isLong__"]) === true;
    }
    Long9.isLong = isLong;
    var INT_CACHE = {};
    var UINT_CACHE = {};
    function fromInt(value, unsigned) {
      var obj, cachedObj, cache;
      if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
          cachedObj = UINT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
          UINT_CACHE[value] = obj;
        return obj;
      } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
          cachedObj = INT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
          INT_CACHE[value] = obj;
        return obj;
      }
    }
    Long9.fromInt = fromInt;
    function fromNumber(value, unsigned) {
      if (isNaN(value))
        return unsigned ? UZERO : ZERO;
      if (unsigned) {
        if (value < 0)
          return UZERO;
        if (value >= TWO_PWR_64_DBL)
          return MAX_UNSIGNED_VALUE;
      } else {
        if (value <= -TWO_PWR_63_DBL)
          return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
          return MAX_VALUE;
      }
      if (value < 0)
        return fromNumber(-value, unsigned).neg();
      return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    }
    Long9.fromNumber = fromNumber;
    function fromBits(lowBits, highBits, unsigned) {
      return new Long9(lowBits, highBits, unsigned);
    }
    Long9.fromBits = fromBits;
    var pow_dbl = Math.pow;
    function fromString(str, unsigned, radix) {
      if (str.length === 0)
        throw Error("empty string");
      if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
      if (typeof unsigned === "number") {
        radix = unsigned, unsigned = false;
      } else {
        unsigned = !!unsigned;
      }
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      var p;
      if ((p = str.indexOf("-")) > 0)
        throw Error("interior hyphen");
      else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
      }
      var radixToPower = fromNumber(pow_dbl(radix, 8));
      var result = ZERO;
      for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
          var power = fromNumber(pow_dbl(radix, size));
          result = result.mul(power).add(fromNumber(value));
        } else {
          result = result.mul(radixToPower);
          result = result.add(fromNumber(value));
        }
      }
      result.unsigned = unsigned;
      return result;
    }
    Long9.fromString = fromString;
    function fromValue(val, unsigned) {
      if (typeof val === "number")
        return fromNumber(val, unsigned);
      if (typeof val === "string")
        return fromString(val, unsigned);
      return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
    }
    Long9.fromValue = fromValue;
    var TWO_PWR_16_DBL = 1 << 16;
    var TWO_PWR_24_DBL = 1 << 24;
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
    var ZERO = fromInt(0);
    Long9.ZERO = ZERO;
    var UZERO = fromInt(0, true);
    Long9.UZERO = UZERO;
    var ONE = fromInt(1);
    Long9.ONE = ONE;
    var UONE = fromInt(1, true);
    Long9.UONE = UONE;
    var NEG_ONE = fromInt(-1);
    Long9.NEG_ONE = NEG_ONE;
    var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
    Long9.MAX_VALUE = MAX_VALUE;
    var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
    Long9.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
    var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
    Long9.MIN_VALUE = MIN_VALUE;
    var LongPrototype = Long9.prototype;
    LongPrototype.toInt = function toInt() {
      return this.unsigned ? this.low >>> 0 : this.low;
    };
    LongPrototype.toNumber = function toNumber() {
      if (this.unsigned)
        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    LongPrototype.toString = function toString(radix) {
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      if (this.isZero())
        return "0";
      if (this.isNegative()) {
        if (this.eq(MIN_VALUE)) {
          var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
          return div.toString(radix) + rem1.toInt().toString(radix);
        } else
          return "-" + this.neg().toString(radix);
      }
      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
      var result = "";
      while (true) {
        var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
          return digits + result;
        else {
          while (digits.length < 6)
            digits = "0" + digits;
          result = "" + digits + result;
        }
      }
    };
    LongPrototype.getHighBits = function getHighBits() {
      return this.high;
    };
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
      return this.high >>> 0;
    };
    LongPrototype.getLowBits = function getLowBits() {
      return this.low;
    };
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
      return this.low >>> 0;
    };
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
      if (this.isNegative())
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
      var val = this.high != 0 ? this.high : this.low;
      for (var bit = 31; bit > 0; bit--)
        if ((val & 1 << bit) != 0)
          break;
      return this.high != 0 ? bit + 33 : bit + 1;
    };
    LongPrototype.isZero = function isZero() {
      return this.high === 0 && this.low === 0;
    };
    LongPrototype.eqz = LongPrototype.isZero;
    LongPrototype.isNegative = function isNegative() {
      return !this.unsigned && this.high < 0;
    };
    LongPrototype.isPositive = function isPositive() {
      return this.unsigned || this.high >= 0;
    };
    LongPrototype.isOdd = function isOdd() {
      return (this.low & 1) === 1;
    };
    LongPrototype.isEven = function isEven() {
      return (this.low & 1) === 0;
    };
    LongPrototype.equals = function equals(other) {
      if (!isLong(other))
        other = fromValue(other);
      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
        return false;
      return this.high === other.high && this.low === other.low;
    };
    LongPrototype.eq = LongPrototype.equals;
    LongPrototype.notEquals = function notEquals(other) {
      return !this.eq(
        /* validates */
        other
      );
    };
    LongPrototype.neq = LongPrototype.notEquals;
    LongPrototype.ne = LongPrototype.notEquals;
    LongPrototype.lessThan = function lessThan(other) {
      return this.comp(
        /* validates */
        other
      ) < 0;
    };
    LongPrototype.lt = LongPrototype.lessThan;
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
      return this.comp(
        /* validates */
        other
      ) <= 0;
    };
    LongPrototype.lte = LongPrototype.lessThanOrEqual;
    LongPrototype.le = LongPrototype.lessThanOrEqual;
    LongPrototype.greaterThan = function greaterThan(other) {
      return this.comp(
        /* validates */
        other
      ) > 0;
    };
    LongPrototype.gt = LongPrototype.greaterThan;
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
      return this.comp(
        /* validates */
        other
      ) >= 0;
    };
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;
    LongPrototype.ge = LongPrototype.greaterThanOrEqual;
    LongPrototype.compare = function compare(other) {
      if (!isLong(other))
        other = fromValue(other);
      if (this.eq(other))
        return 0;
      var thisNeg = this.isNegative(), otherNeg = other.isNegative();
      if (thisNeg && !otherNeg)
        return -1;
      if (!thisNeg && otherNeg)
        return 1;
      if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    LongPrototype.comp = LongPrototype.compare;
    LongPrototype.negate = function negate() {
      if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
      return this.not().add(ONE);
    };
    LongPrototype.neg = LongPrototype.negate;
    LongPrototype.add = function add(addend) {
      if (!isLong(addend))
        addend = fromValue(addend);
      var a48 = this.high >>> 16;
      var a32 = this.high & 65535;
      var a16 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b48 = addend.high >>> 16;
      var b32 = addend.high & 65535;
      var b16 = addend.low >>> 16;
      var b00 = addend.low & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 + b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 + b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 + b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 + b48;
      c48 &= 65535;
      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    LongPrototype.subtract = function subtract(subtrahend) {
      if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
      return this.add(subtrahend.neg());
    };
    LongPrototype.sub = LongPrototype.subtract;
    LongPrototype.multiply = function multiply(multiplier) {
      if (this.isZero())
        return ZERO;
      if (!isLong(multiplier))
        multiplier = fromValue(multiplier);
      if (wasm) {
        var low = wasm.mul(
          this.low,
          this.high,
          multiplier.low,
          multiplier.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (multiplier.isZero())
        return ZERO;
      if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
      if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;
      if (this.isNegative()) {
        if (multiplier.isNegative())
          return this.neg().mul(multiplier.neg());
        else
          return this.neg().mul(multiplier).neg();
      } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();
      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
      var a48 = this.high >>> 16;
      var a32 = this.high & 65535;
      var a16 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b48 = multiplier.high >>> 16;
      var b32 = multiplier.high & 65535;
      var b16 = multiplier.low >>> 16;
      var b00 = multiplier.low & 65535;
      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 * b00;
      c16 += c00 >>> 16;
      c00 &= 65535;
      c16 += a16 * b00;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c16 += a00 * b16;
      c32 += c16 >>> 16;
      c16 &= 65535;
      c32 += a32 * b00;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a16 * b16;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c32 += a00 * b32;
      c48 += c32 >>> 16;
      c32 &= 65535;
      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
      c48 &= 65535;
      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    LongPrototype.mul = LongPrototype.multiply;
    LongPrototype.divide = function divide(divisor) {
      if (!isLong(divisor))
        divisor = fromValue(divisor);
      if (divisor.isZero())
        throw Error("division by zero");
      if (wasm) {
        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
          return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
          this.low,
          this.high,
          divisor.low,
          divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
      var approx, rem, res;
      if (!this.unsigned) {
        if (this.eq(MIN_VALUE)) {
          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
            return MIN_VALUE;
          else if (divisor.eq(MIN_VALUE))
            return ONE;
          else {
            var halfThis = this.shr(1);
            approx = halfThis.div(divisor).shl(1);
            if (approx.eq(ZERO)) {
              return divisor.isNegative() ? ONE : NEG_ONE;
            } else {
              rem = this.sub(divisor.mul(approx));
              res = approx.add(rem.div(divisor));
              return res;
            }
          }
        } else if (divisor.eq(MIN_VALUE))
          return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
          if (divisor.isNegative())
            return this.neg().div(divisor.neg());
          return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
          return this.div(divisor.neg()).neg();
        res = ZERO;
      } else {
        if (!divisor.unsigned)
          divisor = divisor.toUnsigned();
        if (divisor.gt(this))
          return UZERO;
        if (divisor.gt(this.shru(1)))
          return UONE;
        res = UZERO;
      }
      rem = this;
      while (rem.gte(divisor)) {
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
          approx -= delta;
          approxRes = fromNumber(approx, this.unsigned);
          approxRem = approxRes.mul(divisor);
        }
        if (approxRes.isZero())
          approxRes = ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
      }
      return res;
    };
    LongPrototype.div = LongPrototype.divide;
    LongPrototype.modulo = function modulo(divisor) {
      if (!isLong(divisor))
        divisor = fromValue(divisor);
      if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
          this.low,
          this.high,
          divisor.low,
          divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      return this.sub(this.div(divisor).mul(divisor));
    };
    LongPrototype.mod = LongPrototype.modulo;
    LongPrototype.rem = LongPrototype.modulo;
    LongPrototype.not = function not() {
      return fromBits(~this.low, ~this.high, this.unsigned);
    };
    LongPrototype.and = function and(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    LongPrototype.or = function or(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    LongPrototype.xor = function xor(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
      else
        return fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    LongPrototype.shl = LongPrototype.shiftLeft;
    LongPrototype.shiftRight = function shiftRight(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
      else
        return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    LongPrototype.shr = LongPrototype.shiftRight;
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      numBits &= 63;
      if (numBits === 0)
        return this;
      else {
        var high = this.high;
        if (numBits < 32) {
          var low = this.low;
          return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32)
          return fromBits(high, 0, this.unsigned);
        else
          return fromBits(high >>> numBits - 32, 0, this.unsigned);
      }
    };
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;
    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
    LongPrototype.toSigned = function toSigned() {
      if (!this.unsigned)
        return this;
      return fromBits(this.low, this.high, false);
    };
    LongPrototype.toUnsigned = function toUnsigned() {
      if (this.unsigned)
        return this;
      return fromBits(this.low, this.high, true);
    };
    LongPrototype.toBytes = function toBytes(le) {
      return le ? this.toBytesLE() : this.toBytesBE();
    };
    LongPrototype.toBytesLE = function toBytesLE() {
      var hi = this.high, lo = this.low;
      return [
        lo & 255,
        lo >>> 8 & 255,
        lo >>> 16 & 255,
        lo >>> 24,
        hi & 255,
        hi >>> 8 & 255,
        hi >>> 16 & 255,
        hi >>> 24
      ];
    };
    LongPrototype.toBytesBE = function toBytesBE() {
      var hi = this.high, lo = this.low;
      return [
        hi >>> 24,
        hi >>> 16 & 255,
        hi >>> 8 & 255,
        hi & 255,
        lo >>> 24,
        lo >>> 16 & 255,
        lo >>> 8 & 255,
        lo & 255
      ];
    };
    Long9.fromBytes = function fromBytes(bytes, unsigned, le) {
      return le ? Long9.fromBytesLE(bytes, unsigned) : Long9.fromBytesBE(bytes, unsigned);
    };
    Long9.fromBytesLE = function fromBytesLE(bytes, unsigned) {
      return new Long9(
        bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24,
        bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24,
        unsigned
      );
    };
    Long9.fromBytesBE = function fromBytesBE(bytes, unsigned) {
      return new Long9(
        bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7],
        bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3],
        unsigned
      );
    };
  }
});

// ../../node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "../../node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err2) {
          if (pending) {
            pending = false;
            if (err2)
              reject(err2);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err2) {
          if (pending) {
            pending = false;
            reject(err2);
          }
        }
      });
    }
  }
});

// ../../node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "../../node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    init_cjs_shims();
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// ../../node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "../../node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// ../../node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "../../node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// ../../node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "../../node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    init_cjs_shims();
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// ../../node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "../../node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    init_cjs_shims();
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// ../../node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "../../node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// ../../node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "../../node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// ../../node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "../../node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    init_cjs_shims();
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject2(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet9(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = /* istanbul ignore next */
    util.global.dcodeIO && /* istanbul ignore next */
    util.global.dcodeIO.Long || /* istanbul ignore next */
    util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", { get: function() {
        return name;
      } });
      CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// ../../node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "../../node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// ../../node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "../../node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// ../../node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "../../node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// ../../node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "../../node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// ../../node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "../../node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err2, response) {
            if (err2) {
              self2.emit("error", err2, method);
              return callback(err2);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err3) {
                self2.emit("error", err3, method);
                return callback(err3);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err2) {
        self2.emit("error", err2, method);
        setTimeout(function() {
          callback(err2);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// ../../node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "../../node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    init_cjs_shims();
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// ../../node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "../../node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = {};
  }
});

// ../../node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "../../node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    init_cjs_shims();
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// ../../node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "../../node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = require_index_minimal();
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  HubServiceClient: () => HubServiceClient,
  HubServiceService: () => HubServiceService,
  Metadata: () => import_grpc_js4.Metadata,
  Server: () => import_grpc_js4.Server,
  ServerCredentials: () => import_grpc_js4.ServerCredentials,
  createDefaultMetadataKeyInterceptor: () => createDefaultMetadataKeyInterceptor,
  getAdminClient: () => getAdminClient,
  getAdminRpcClient: () => getAdminRpcClient,
  getAuthMetadata: () => getAuthMetadata,
  getInsecureClient: () => getInsecureClient,
  getInsecureHubRpcClient: () => getInsecureHubRpcClient,
  getSSLClient: () => getSSLClient,
  getSSLHubRpcClient: () => getSSLHubRpcClient,
  getServer: () => getServer,
  status: () => import_grpc_js4.status
});
module.exports = __toCommonJS(src_exports);
init_cjs_shims();
var import_grpc_js4 = require("@grpc/grpc-js");
__reExport(src_exports, require("@farcaster/core"), module.exports);

// src/generated/rpc.ts
init_cjs_shims();
var import_grpc_js = require("@grpc/grpc-js");

// src/generated/blocks.ts
init_cjs_shims();
var import_long4 = __toESM(require_long());
var import_minimal4 = __toESM(require_minimal2());

// src/generated/message.ts
init_cjs_shims();
var import_long2 = __toESM(require_long());
var import_minimal2 = __toESM(require_minimal2());

// src/generated/username_proof.ts
init_cjs_shims();
var import_long = __toESM(require_long());
var import_minimal = __toESM(require_minimal2());
function userNameTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "USERNAME_TYPE_NONE":
      return 0 /* USERNAME_TYPE_NONE */;
    case 1:
    case "USERNAME_TYPE_FNAME":
      return 1 /* USERNAME_TYPE_FNAME */;
    case 2:
    case "USERNAME_TYPE_ENS_L1":
      return 2 /* USERNAME_TYPE_ENS_L1 */;
    case 3:
    case "USERNAME_TYPE_BASENAME":
      return 3 /* USERNAME_TYPE_BASENAME */;
    default:
      throw new tsProtoGlobalThis.Error("Unrecognized enum value " + object + " for enum UserNameType");
  }
}
function userNameTypeToJSON(object) {
  switch (object) {
    case 0 /* USERNAME_TYPE_NONE */:
      return "USERNAME_TYPE_NONE";
    case 1 /* USERNAME_TYPE_FNAME */:
      return "USERNAME_TYPE_FNAME";
    case 2 /* USERNAME_TYPE_ENS_L1 */:
      return "USERNAME_TYPE_ENS_L1";
    case 3 /* USERNAME_TYPE_BASENAME */:
      return "USERNAME_TYPE_BASENAME";
    default:
      throw new tsProtoGlobalThis.Error("Unrecognized enum value " + object + " for enum UserNameType");
  }
}
function createBaseUserNameProof() {
  return {
    timestamp: 0,
    name: new Uint8Array(),
    owner: new Uint8Array(),
    signature: new Uint8Array(),
    fid: 0,
    type: 0
  };
}
var UserNameProof = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    if (message.timestamp !== 0) {
      writer.uint32(8).uint64(message.timestamp);
    }
    if (message.name.length !== 0) {
      writer.uint32(18).bytes(message.name);
    }
    if (message.owner.length !== 0) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.fid !== 0) {
      writer.uint32(40).uint64(message.fid);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserNameProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.timestamp = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.name = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.owner = reader.bytes();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.fid = longToNumber(reader.uint64());
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.type = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
      name: isSet(object.name) ? bytesFromBase64(object.name) : new Uint8Array(),
      owner: isSet(object.owner) ? bytesFromBase64(object.owner) : new Uint8Array(),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(),
      fid: isSet(object.fid) ? Number(object.fid) : 0,
      type: isSet(object.type) ? userNameTypeFromJSON(object.type) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.name !== void 0 && (obj.name = base64FromBytes(message.name !== void 0 ? message.name : new Uint8Array()));
    message.owner !== void 0 && (obj.owner = base64FromBytes(message.owner !== void 0 ? message.owner : new Uint8Array()));
    message.signature !== void 0 && (obj.signature = base64FromBytes(message.signature !== void 0 ? message.signature : new Uint8Array()));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.type !== void 0 && (obj.type = userNameTypeToJSON(message.type));
    return obj;
  },
  create(base) {
    return UserNameProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUserNameProof();
    message.timestamp = object.timestamp ?? 0;
    message.name = object.name ?? new Uint8Array();
    message.owner = object.owner ?? new Uint8Array();
    message.signature = object.signature ?? new Uint8Array();
    message.fid = object.fid ?? 0;
    message.type = object.type ?? 0;
    return message;
  }
};
var tsProtoGlobalThis = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}
function longToNumber(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal.default.util.Long !== import_long.default) {
  import_minimal.default.util.Long = import_long.default;
  import_minimal.default.configure();
}
function isSet(value) {
  return value !== null && value !== void 0;
}

// src/generated/message.ts
function hashSchemeFromJSON(object) {
  switch (object) {
    case 0:
    case "HASH_SCHEME_NONE":
      return 0 /* NONE */;
    case 1:
    case "HASH_SCHEME_BLAKE3":
      return 1 /* BLAKE3 */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum HashScheme");
  }
}
function hashSchemeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "HASH_SCHEME_NONE";
    case 1 /* BLAKE3 */:
      return "HASH_SCHEME_BLAKE3";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum HashScheme");
  }
}
function signatureSchemeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGNATURE_SCHEME_NONE":
      return 0 /* NONE */;
    case 1:
    case "SIGNATURE_SCHEME_ED25519":
      return 1 /* ED25519 */;
    case 2:
    case "SIGNATURE_SCHEME_EIP712":
      return 2 /* EIP712 */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum SignatureScheme");
  }
}
function signatureSchemeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "SIGNATURE_SCHEME_NONE";
    case 1 /* ED25519 */:
      return "SIGNATURE_SCHEME_ED25519";
    case 2 /* EIP712 */:
      return "SIGNATURE_SCHEME_EIP712";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum SignatureScheme");
  }
}
function messageTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "MESSAGE_TYPE_CAST_ADD":
      return 1 /* CAST_ADD */;
    case 2:
    case "MESSAGE_TYPE_CAST_REMOVE":
      return 2 /* CAST_REMOVE */;
    case 3:
    case "MESSAGE_TYPE_REACTION_ADD":
      return 3 /* REACTION_ADD */;
    case 4:
    case "MESSAGE_TYPE_REACTION_REMOVE":
      return 4 /* REACTION_REMOVE */;
    case 5:
    case "MESSAGE_TYPE_LINK_ADD":
      return 5 /* LINK_ADD */;
    case 6:
    case "MESSAGE_TYPE_LINK_REMOVE":
      return 6 /* LINK_REMOVE */;
    case 7:
    case "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS":
      return 7 /* VERIFICATION_ADD_ETH_ADDRESS */;
    case 8:
    case "MESSAGE_TYPE_VERIFICATION_REMOVE":
      return 8 /* VERIFICATION_REMOVE */;
    case 11:
    case "MESSAGE_TYPE_USER_DATA_ADD":
      return 11 /* USER_DATA_ADD */;
    case 12:
    case "MESSAGE_TYPE_USERNAME_PROOF":
      return 12 /* USERNAME_PROOF */;
    case 13:
    case "MESSAGE_TYPE_FRAME_ACTION":
      return 13 /* FRAME_ACTION */;
    case 14:
    case "MESSAGE_TYPE_LINK_COMPACT_STATE":
      return 14 /* LINK_COMPACT_STATE */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum MessageType");
  }
}
function messageTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "MESSAGE_TYPE_NONE";
    case 1 /* CAST_ADD */:
      return "MESSAGE_TYPE_CAST_ADD";
    case 2 /* CAST_REMOVE */:
      return "MESSAGE_TYPE_CAST_REMOVE";
    case 3 /* REACTION_ADD */:
      return "MESSAGE_TYPE_REACTION_ADD";
    case 4 /* REACTION_REMOVE */:
      return "MESSAGE_TYPE_REACTION_REMOVE";
    case 5 /* LINK_ADD */:
      return "MESSAGE_TYPE_LINK_ADD";
    case 6 /* LINK_REMOVE */:
      return "MESSAGE_TYPE_LINK_REMOVE";
    case 7 /* VERIFICATION_ADD_ETH_ADDRESS */:
      return "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS";
    case 8 /* VERIFICATION_REMOVE */:
      return "MESSAGE_TYPE_VERIFICATION_REMOVE";
    case 11 /* USER_DATA_ADD */:
      return "MESSAGE_TYPE_USER_DATA_ADD";
    case 12 /* USERNAME_PROOF */:
      return "MESSAGE_TYPE_USERNAME_PROOF";
    case 13 /* FRAME_ACTION */:
      return "MESSAGE_TYPE_FRAME_ACTION";
    case 14 /* LINK_COMPACT_STATE */:
      return "MESSAGE_TYPE_LINK_COMPACT_STATE";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum MessageType");
  }
}
function farcasterNetworkFromJSON(object) {
  switch (object) {
    case 0:
    case "FARCASTER_NETWORK_NONE":
      return 0 /* NONE */;
    case 1:
    case "FARCASTER_NETWORK_MAINNET":
      return 1 /* MAINNET */;
    case 2:
    case "FARCASTER_NETWORK_TESTNET":
      return 2 /* TESTNET */;
    case 3:
    case "FARCASTER_NETWORK_DEVNET":
      return 3 /* DEVNET */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum FarcasterNetwork");
  }
}
function farcasterNetworkToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "FARCASTER_NETWORK_NONE";
    case 1 /* MAINNET */:
      return "FARCASTER_NETWORK_MAINNET";
    case 2 /* TESTNET */:
      return "FARCASTER_NETWORK_TESTNET";
    case 3 /* DEVNET */:
      return "FARCASTER_NETWORK_DEVNET";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum FarcasterNetwork");
  }
}
function userDataTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "USER_DATA_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "USER_DATA_TYPE_PFP":
      return 1 /* PFP */;
    case 2:
    case "USER_DATA_TYPE_DISPLAY":
      return 2 /* DISPLAY */;
    case 3:
    case "USER_DATA_TYPE_BIO":
      return 3 /* BIO */;
    case 5:
    case "USER_DATA_TYPE_URL":
      return 5 /* URL */;
    case 6:
    case "USER_DATA_TYPE_USERNAME":
      return 6 /* USERNAME */;
    case 7:
    case "USER_DATA_TYPE_LOCATION":
      return 7 /* LOCATION */;
    case 8:
    case "USER_DATA_TYPE_TWITTER":
      return 8 /* TWITTER */;
    case 9:
    case "USER_DATA_TYPE_GITHUB":
      return 9 /* GITHUB */;
    case 10:
    case "USER_DATA_TYPE_BANNER":
      return 10 /* BANNER */;
    case 11:
    case "USER_DATA_PRIMARY_ADDRESS_ETHEREUM":
      return 11 /* USER_DATA_PRIMARY_ADDRESS_ETHEREUM */;
    case 12:
    case "USER_DATA_PRIMARY_ADDRESS_SOLANA":
      return 12 /* USER_DATA_PRIMARY_ADDRESS_SOLANA */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum UserDataType");
  }
}
function userDataTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "USER_DATA_TYPE_NONE";
    case 1 /* PFP */:
      return "USER_DATA_TYPE_PFP";
    case 2 /* DISPLAY */:
      return "USER_DATA_TYPE_DISPLAY";
    case 3 /* BIO */:
      return "USER_DATA_TYPE_BIO";
    case 5 /* URL */:
      return "USER_DATA_TYPE_URL";
    case 6 /* USERNAME */:
      return "USER_DATA_TYPE_USERNAME";
    case 7 /* LOCATION */:
      return "USER_DATA_TYPE_LOCATION";
    case 8 /* TWITTER */:
      return "USER_DATA_TYPE_TWITTER";
    case 9 /* GITHUB */:
      return "USER_DATA_TYPE_GITHUB";
    case 10 /* BANNER */:
      return "USER_DATA_TYPE_BANNER";
    case 11 /* USER_DATA_PRIMARY_ADDRESS_ETHEREUM */:
      return "USER_DATA_PRIMARY_ADDRESS_ETHEREUM";
    case 12 /* USER_DATA_PRIMARY_ADDRESS_SOLANA */:
      return "USER_DATA_PRIMARY_ADDRESS_SOLANA";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum UserDataType");
  }
}
function castTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "CAST":
      return 0 /* CAST */;
    case 1:
    case "LONG_CAST":
      return 1 /* LONG_CAST */;
    case 2:
    case "TEN_K_CAST":
      return 2 /* TEN_K_CAST */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum CastType");
  }
}
function castTypeToJSON(object) {
  switch (object) {
    case 0 /* CAST */:
      return "CAST";
    case 1 /* LONG_CAST */:
      return "LONG_CAST";
    case 2 /* TEN_K_CAST */:
      return "TEN_K_CAST";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum CastType");
  }
}
function reactionTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "REACTION_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "REACTION_TYPE_LIKE":
      return 1 /* LIKE */;
    case 2:
    case "REACTION_TYPE_RECAST":
      return 2 /* RECAST */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum ReactionType");
  }
}
function reactionTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "REACTION_TYPE_NONE";
    case 1 /* LIKE */:
      return "REACTION_TYPE_LIKE";
    case 2 /* RECAST */:
      return "REACTION_TYPE_RECAST";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum ReactionType");
  }
}
function protocolFromJSON(object) {
  switch (object) {
    case 0:
    case "PROTOCOL_ETHEREUM":
      return 0 /* ETHEREUM */;
    case 1:
    case "PROTOCOL_SOLANA":
      return 1 /* SOLANA */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum Protocol");
  }
}
function protocolToJSON(object) {
  switch (object) {
    case 0 /* ETHEREUM */:
      return "PROTOCOL_ETHEREUM";
    case 1 /* SOLANA */:
      return "PROTOCOL_SOLANA";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum Protocol");
  }
}
function createBaseMessage() {
  return {
    data: void 0,
    hash: new Uint8Array(),
    hashScheme: 0,
    signature: new Uint8Array(),
    signatureScheme: 0,
    signer: new Uint8Array(),
    dataBytes: void 0
  };
}
var Message = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.data !== void 0) {
      MessageData.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.hashScheme !== 0) {
      writer.uint32(24).int32(message.hashScheme);
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.signatureScheme !== 0) {
      writer.uint32(40).int32(message.signatureScheme);
    }
    if (message.signer.length !== 0) {
      writer.uint32(50).bytes(message.signer);
    }
    if (message.dataBytes !== void 0) {
      writer.uint32(58).bytes(message.dataBytes);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.data = MessageData.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.hashScheme = reader.int32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.signatureScheme = reader.int32();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.signer = reader.bytes();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.dataBytes = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet2(object.data) ? MessageData.fromJSON(object.data) : void 0,
      hash: isSet2(object.hash) ? bytesFromBase642(object.hash) : new Uint8Array(),
      hashScheme: isSet2(object.hashScheme) ? hashSchemeFromJSON(object.hashScheme) : 0,
      signature: isSet2(object.signature) ? bytesFromBase642(object.signature) : new Uint8Array(),
      signatureScheme: isSet2(object.signatureScheme) ? signatureSchemeFromJSON(object.signatureScheme) : 0,
      signer: isSet2(object.signer) ? bytesFromBase642(object.signer) : new Uint8Array(),
      dataBytes: isSet2(object.dataBytes) ? bytesFromBase642(object.dataBytes) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.data !== void 0 && (obj.data = message.data ? MessageData.toJSON(message.data) : void 0);
    message.hash !== void 0 && (obj.hash = base64FromBytes2(message.hash !== void 0 ? message.hash : new Uint8Array()));
    message.hashScheme !== void 0 && (obj.hashScheme = hashSchemeToJSON(message.hashScheme));
    message.signature !== void 0 && (obj.signature = base64FromBytes2(message.signature !== void 0 ? message.signature : new Uint8Array()));
    message.signatureScheme !== void 0 && (obj.signatureScheme = signatureSchemeToJSON(message.signatureScheme));
    message.signer !== void 0 && (obj.signer = base64FromBytes2(message.signer !== void 0 ? message.signer : new Uint8Array()));
    message.dataBytes !== void 0 && (obj.dataBytes = message.dataBytes !== void 0 ? base64FromBytes2(message.dataBytes) : void 0);
    return obj;
  },
  create(base) {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMessage();
    message.data = object.data !== void 0 && object.data !== null ? MessageData.fromPartial(object.data) : void 0;
    message.hash = object.hash ?? new Uint8Array();
    message.hashScheme = object.hashScheme ?? 0;
    message.signature = object.signature ?? new Uint8Array();
    message.signatureScheme = object.signatureScheme ?? 0;
    message.signer = object.signer ?? new Uint8Array();
    message.dataBytes = object.dataBytes ?? void 0;
    return message;
  }
};
function createBaseMessageData() {
  return {
    type: 0,
    fid: 0,
    timestamp: 0,
    network: 0,
    castAddBody: void 0,
    castRemoveBody: void 0,
    reactionBody: void 0,
    verificationAddAddressBody: void 0,
    verificationRemoveBody: void 0,
    userDataBody: void 0,
    linkBody: void 0,
    usernameProofBody: void 0,
    frameActionBody: void 0,
    linkCompactStateBody: void 0
  };
}
var MessageData = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.fid !== 0) {
      writer.uint32(16).uint64(message.fid);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint32(message.timestamp);
    }
    if (message.network !== 0) {
      writer.uint32(32).int32(message.network);
    }
    if (message.castAddBody !== void 0) {
      CastAddBody.encode(message.castAddBody, writer.uint32(42).fork()).ldelim();
    }
    if (message.castRemoveBody !== void 0) {
      CastRemoveBody.encode(message.castRemoveBody, writer.uint32(50).fork()).ldelim();
    }
    if (message.reactionBody !== void 0) {
      ReactionBody.encode(message.reactionBody, writer.uint32(58).fork()).ldelim();
    }
    if (message.verificationAddAddressBody !== void 0) {
      VerificationAddAddressBody.encode(message.verificationAddAddressBody, writer.uint32(74).fork()).ldelim();
    }
    if (message.verificationRemoveBody !== void 0) {
      VerificationRemoveBody.encode(message.verificationRemoveBody, writer.uint32(82).fork()).ldelim();
    }
    if (message.userDataBody !== void 0) {
      UserDataBody.encode(message.userDataBody, writer.uint32(98).fork()).ldelim();
    }
    if (message.linkBody !== void 0) {
      LinkBody.encode(message.linkBody, writer.uint32(114).fork()).ldelim();
    }
    if (message.usernameProofBody !== void 0) {
      UserNameProof.encode(message.usernameProofBody, writer.uint32(122).fork()).ldelim();
    }
    if (message.frameActionBody !== void 0) {
      FrameActionBody.encode(message.frameActionBody, writer.uint32(130).fork()).ldelim();
    }
    if (message.linkCompactStateBody !== void 0) {
      LinkCompactStateBody.encode(message.linkCompactStateBody, writer.uint32(138).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.fid = longToNumber2(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.network = reader.int32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.castAddBody = CastAddBody.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.castRemoveBody = CastRemoveBody.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.reactionBody = ReactionBody.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.verificationAddAddressBody = VerificationAddAddressBody.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }
          message.verificationRemoveBody = VerificationRemoveBody.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }
          message.userDataBody = UserDataBody.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }
          message.linkBody = LinkBody.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }
          message.usernameProofBody = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }
          message.frameActionBody = FrameActionBody.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag != 138) {
            break;
          }
          message.linkCompactStateBody = LinkCompactStateBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? messageTypeFromJSON(object.type) : 0,
      fid: isSet2(object.fid) ? Number(object.fid) : 0,
      timestamp: isSet2(object.timestamp) ? Number(object.timestamp) : 0,
      network: isSet2(object.network) ? farcasterNetworkFromJSON(object.network) : 0,
      castAddBody: isSet2(object.castAddBody) ? CastAddBody.fromJSON(object.castAddBody) : void 0,
      castRemoveBody: isSet2(object.castRemoveBody) ? CastRemoveBody.fromJSON(object.castRemoveBody) : void 0,
      reactionBody: isSet2(object.reactionBody) ? ReactionBody.fromJSON(object.reactionBody) : void 0,
      verificationAddAddressBody: isSet2(object.verificationAddAddressBody) ? VerificationAddAddressBody.fromJSON(object.verificationAddAddressBody) : void 0,
      verificationRemoveBody: isSet2(object.verificationRemoveBody) ? VerificationRemoveBody.fromJSON(object.verificationRemoveBody) : void 0,
      userDataBody: isSet2(object.userDataBody) ? UserDataBody.fromJSON(object.userDataBody) : void 0,
      linkBody: isSet2(object.linkBody) ? LinkBody.fromJSON(object.linkBody) : void 0,
      usernameProofBody: isSet2(object.usernameProofBody) ? UserNameProof.fromJSON(object.usernameProofBody) : void 0,
      frameActionBody: isSet2(object.frameActionBody) ? FrameActionBody.fromJSON(object.frameActionBody) : void 0,
      linkCompactStateBody: isSet2(object.linkCompactStateBody) ? LinkCompactStateBody.fromJSON(object.linkCompactStateBody) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = messageTypeToJSON(message.type));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.network !== void 0 && (obj.network = farcasterNetworkToJSON(message.network));
    message.castAddBody !== void 0 && (obj.castAddBody = message.castAddBody ? CastAddBody.toJSON(message.castAddBody) : void 0);
    message.castRemoveBody !== void 0 && (obj.castRemoveBody = message.castRemoveBody ? CastRemoveBody.toJSON(message.castRemoveBody) : void 0);
    message.reactionBody !== void 0 && (obj.reactionBody = message.reactionBody ? ReactionBody.toJSON(message.reactionBody) : void 0);
    message.verificationAddAddressBody !== void 0 && (obj.verificationAddAddressBody = message.verificationAddAddressBody ? VerificationAddAddressBody.toJSON(message.verificationAddAddressBody) : void 0);
    message.verificationRemoveBody !== void 0 && (obj.verificationRemoveBody = message.verificationRemoveBody ? VerificationRemoveBody.toJSON(message.verificationRemoveBody) : void 0);
    message.userDataBody !== void 0 && (obj.userDataBody = message.userDataBody ? UserDataBody.toJSON(message.userDataBody) : void 0);
    message.linkBody !== void 0 && (obj.linkBody = message.linkBody ? LinkBody.toJSON(message.linkBody) : void 0);
    message.usernameProofBody !== void 0 && (obj.usernameProofBody = message.usernameProofBody ? UserNameProof.toJSON(message.usernameProofBody) : void 0);
    message.frameActionBody !== void 0 && (obj.frameActionBody = message.frameActionBody ? FrameActionBody.toJSON(message.frameActionBody) : void 0);
    message.linkCompactStateBody !== void 0 && (obj.linkCompactStateBody = message.linkCompactStateBody ? LinkCompactStateBody.toJSON(message.linkCompactStateBody) : void 0);
    return obj;
  },
  create(base) {
    return MessageData.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMessageData();
    message.type = object.type ?? 0;
    message.fid = object.fid ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.network = object.network ?? 0;
    message.castAddBody = object.castAddBody !== void 0 && object.castAddBody !== null ? CastAddBody.fromPartial(object.castAddBody) : void 0;
    message.castRemoveBody = object.castRemoveBody !== void 0 && object.castRemoveBody !== null ? CastRemoveBody.fromPartial(object.castRemoveBody) : void 0;
    message.reactionBody = object.reactionBody !== void 0 && object.reactionBody !== null ? ReactionBody.fromPartial(object.reactionBody) : void 0;
    message.verificationAddAddressBody = object.verificationAddAddressBody !== void 0 && object.verificationAddAddressBody !== null ? VerificationAddAddressBody.fromPartial(object.verificationAddAddressBody) : void 0;
    message.verificationRemoveBody = object.verificationRemoveBody !== void 0 && object.verificationRemoveBody !== null ? VerificationRemoveBody.fromPartial(object.verificationRemoveBody) : void 0;
    message.userDataBody = object.userDataBody !== void 0 && object.userDataBody !== null ? UserDataBody.fromPartial(object.userDataBody) : void 0;
    message.linkBody = object.linkBody !== void 0 && object.linkBody !== null ? LinkBody.fromPartial(object.linkBody) : void 0;
    message.usernameProofBody = object.usernameProofBody !== void 0 && object.usernameProofBody !== null ? UserNameProof.fromPartial(object.usernameProofBody) : void 0;
    message.frameActionBody = object.frameActionBody !== void 0 && object.frameActionBody !== null ? FrameActionBody.fromPartial(object.frameActionBody) : void 0;
    message.linkCompactStateBody = object.linkCompactStateBody !== void 0 && object.linkCompactStateBody !== null ? LinkCompactStateBody.fromPartial(object.linkCompactStateBody) : void 0;
    return message;
  }
};
function createBaseUserDataBody() {
  return { type: 0, value: "" };
}
var UserDataBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserDataBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? userDataTypeFromJSON(object.type) : 0,
      value: isSet2(object.value) ? String(object.value) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = userDataTypeToJSON(message.type));
    message.value !== void 0 && (obj.value = message.value);
    return obj;
  },
  create(base) {
    return UserDataBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUserDataBody();
    message.type = object.type ?? 0;
    message.value = object.value ?? "";
    return message;
  }
};
function createBaseEmbed() {
  return { url: void 0, castId: void 0 };
}
var Embed = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.url !== void 0) {
      writer.uint32(10).string(message.url);
    }
    if (message.castId !== void 0) {
      CastId.encode(message.castId, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEmbed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.url = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.castId = CastId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      url: isSet2(object.url) ? String(object.url) : void 0,
      castId: isSet2(object.castId) ? CastId.fromJSON(object.castId) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.url !== void 0 && (obj.url = message.url);
    message.castId !== void 0 && (obj.castId = message.castId ? CastId.toJSON(message.castId) : void 0);
    return obj;
  },
  create(base) {
    return Embed.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEmbed();
    message.url = object.url ?? void 0;
    message.castId = object.castId !== void 0 && object.castId !== null ? CastId.fromPartial(object.castId) : void 0;
    return message;
  }
};
function createBaseCastAddBody() {
  return {
    embedsDeprecated: [],
    mentions: [],
    parentCastId: void 0,
    parentUrl: void 0,
    text: "",
    mentionsPositions: [],
    embeds: [],
    type: 0
  };
}
var CastAddBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    for (const v of message.embedsDeprecated) {
      writer.uint32(10).string(v);
    }
    writer.uint32(18).fork();
    for (const v of message.mentions) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.parentCastId !== void 0) {
      CastId.encode(message.parentCastId, writer.uint32(26).fork()).ldelim();
    }
    if (message.parentUrl !== void 0) {
      writer.uint32(58).string(message.parentUrl);
    }
    if (message.text !== "") {
      writer.uint32(34).string(message.text);
    }
    writer.uint32(42).fork();
    for (const v of message.mentionsPositions) {
      writer.uint32(v);
    }
    writer.ldelim();
    for (const v of message.embeds) {
      Embed.encode(v, writer.uint32(50).fork()).ldelim();
    }
    if (message.type !== 0) {
      writer.uint32(64).int32(message.type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastAddBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.embedsDeprecated.push(reader.string());
          continue;
        case 2:
          if (tag == 16) {
            message.mentions.push(longToNumber2(reader.uint64()));
            continue;
          }
          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mentions.push(longToNumber2(reader.uint64()));
            }
            continue;
          }
          break;
        case 3:
          if (tag != 26) {
            break;
          }
          message.parentCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.parentUrl = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.text = reader.string();
          continue;
        case 5:
          if (tag == 40) {
            message.mentionsPositions.push(reader.uint32());
            continue;
          }
          if (tag == 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mentionsPositions.push(reader.uint32());
            }
            continue;
          }
          break;
        case 6:
          if (tag != 50) {
            break;
          }
          message.embeds.push(Embed.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.type = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      embedsDeprecated: Array.isArray(object == null ? void 0 : object.embedsDeprecated) ? object.embedsDeprecated.map((e) => String(e)) : [],
      mentions: Array.isArray(object == null ? void 0 : object.mentions) ? object.mentions.map((e) => Number(e)) : [],
      parentCastId: isSet2(object.parentCastId) ? CastId.fromJSON(object.parentCastId) : void 0,
      parentUrl: isSet2(object.parentUrl) ? String(object.parentUrl) : void 0,
      text: isSet2(object.text) ? String(object.text) : "",
      mentionsPositions: Array.isArray(object == null ? void 0 : object.mentionsPositions) ? object.mentionsPositions.map((e) => Number(e)) : [],
      embeds: Array.isArray(object == null ? void 0 : object.embeds) ? object.embeds.map((e) => Embed.fromJSON(e)) : [],
      type: isSet2(object.type) ? castTypeFromJSON(object.type) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.embedsDeprecated) {
      obj.embedsDeprecated = message.embedsDeprecated.map((e) => e);
    } else {
      obj.embedsDeprecated = [];
    }
    if (message.mentions) {
      obj.mentions = message.mentions.map((e) => Math.round(e));
    } else {
      obj.mentions = [];
    }
    message.parentCastId !== void 0 && (obj.parentCastId = message.parentCastId ? CastId.toJSON(message.parentCastId) : void 0);
    message.parentUrl !== void 0 && (obj.parentUrl = message.parentUrl);
    message.text !== void 0 && (obj.text = message.text);
    if (message.mentionsPositions) {
      obj.mentionsPositions = message.mentionsPositions.map((e) => Math.round(e));
    } else {
      obj.mentionsPositions = [];
    }
    if (message.embeds) {
      obj.embeds = message.embeds.map((e) => e ? Embed.toJSON(e) : void 0);
    } else {
      obj.embeds = [];
    }
    message.type !== void 0 && (obj.type = castTypeToJSON(message.type));
    return obj;
  },
  create(base) {
    return CastAddBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d;
    const message = createBaseCastAddBody();
    message.embedsDeprecated = ((_a = object.embedsDeprecated) == null ? void 0 : _a.map((e) => e)) || [];
    message.mentions = ((_b = object.mentions) == null ? void 0 : _b.map((e) => e)) || [];
    message.parentCastId = object.parentCastId !== void 0 && object.parentCastId !== null ? CastId.fromPartial(object.parentCastId) : void 0;
    message.parentUrl = object.parentUrl ?? void 0;
    message.text = object.text ?? "";
    message.mentionsPositions = ((_c = object.mentionsPositions) == null ? void 0 : _c.map((e) => e)) || [];
    message.embeds = ((_d = object.embeds) == null ? void 0 : _d.map((e) => Embed.fromPartial(e))) || [];
    message.type = object.type ?? 0;
    return message;
  }
};
function createBaseCastRemoveBody() {
  return { targetHash: new Uint8Array() };
}
var CastRemoveBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.targetHash.length !== 0) {
      writer.uint32(10).bytes(message.targetHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastRemoveBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.targetHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { targetHash: isSet2(object.targetHash) ? bytesFromBase642(object.targetHash) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.targetHash !== void 0 && (obj.targetHash = base64FromBytes2(message.targetHash !== void 0 ? message.targetHash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return CastRemoveBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCastRemoveBody();
    message.targetHash = object.targetHash ?? new Uint8Array();
    return message;
  }
};
function createBaseCastId() {
  return { fid: 0, hash: new Uint8Array() };
}
var CastId = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber2(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet2(object.fid) ? Number(object.fid) : 0,
      hash: isSet2(object.hash) ? bytesFromBase642(object.hash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.hash !== void 0 && (obj.hash = base64FromBytes2(message.hash !== void 0 ? message.hash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return CastId.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCastId();
    message.fid = object.fid ?? 0;
    message.hash = object.hash ?? new Uint8Array();
    return message;
  }
};
function createBaseReactionBody() {
  return { type: 0, targetCastId: void 0, targetUrl: void 0 };
}
var ReactionBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(18).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(26).string(message.targetUrl);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? reactionTypeFromJSON(object.type) : 0,
      targetCastId: isSet2(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet2(object.targetUrl) ? String(object.targetUrl) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = reactionTypeToJSON(message.type));
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    return obj;
  },
  create(base) {
    return ReactionBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseReactionBody();
    message.type = object.type ?? 0;
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = object.targetUrl ?? void 0;
    return message;
  }
};
function createBaseVerificationAddAddressBody() {
  return {
    address: new Uint8Array(),
    claimSignature: new Uint8Array(),
    blockHash: new Uint8Array(),
    verificationType: 0,
    chainId: 0,
    protocol: 0
  };
}
var VerificationAddAddressBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.claimSignature.length !== 0) {
      writer.uint32(18).bytes(message.claimSignature);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(26).bytes(message.blockHash);
    }
    if (message.verificationType !== 0) {
      writer.uint32(32).uint32(message.verificationType);
    }
    if (message.chainId !== 0) {
      writer.uint32(40).uint32(message.chainId);
    }
    if (message.protocol !== 0) {
      writer.uint32(56).int32(message.protocol);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationAddAddressBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.claimSignature = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.blockHash = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.verificationType = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.chainId = reader.uint32();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.protocol = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet2(object.address) ? bytesFromBase642(object.address) : new Uint8Array(),
      claimSignature: isSet2(object.claimSignature) ? bytesFromBase642(object.claimSignature) : new Uint8Array(),
      blockHash: isSet2(object.blockHash) ? bytesFromBase642(object.blockHash) : new Uint8Array(),
      verificationType: isSet2(object.verificationType) ? Number(object.verificationType) : 0,
      chainId: isSet2(object.chainId) ? Number(object.chainId) : 0,
      protocol: isSet2(object.protocol) ? protocolFromJSON(object.protocol) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes2(message.address !== void 0 ? message.address : new Uint8Array()));
    message.claimSignature !== void 0 && (obj.claimSignature = base64FromBytes2(
      message.claimSignature !== void 0 ? message.claimSignature : new Uint8Array()
    ));
    message.blockHash !== void 0 && (obj.blockHash = base64FromBytes2(message.blockHash !== void 0 ? message.blockHash : new Uint8Array()));
    message.verificationType !== void 0 && (obj.verificationType = Math.round(message.verificationType));
    message.chainId !== void 0 && (obj.chainId = Math.round(message.chainId));
    message.protocol !== void 0 && (obj.protocol = protocolToJSON(message.protocol));
    return obj;
  },
  create(base) {
    return VerificationAddAddressBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVerificationAddAddressBody();
    message.address = object.address ?? new Uint8Array();
    message.claimSignature = object.claimSignature ?? new Uint8Array();
    message.blockHash = object.blockHash ?? new Uint8Array();
    message.verificationType = object.verificationType ?? 0;
    message.chainId = object.chainId ?? 0;
    message.protocol = object.protocol ?? 0;
    return message;
  }
};
function createBaseVerificationRemoveBody() {
  return { address: new Uint8Array(), protocol: 0 };
}
var VerificationRemoveBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.protocol !== 0) {
      writer.uint32(16).int32(message.protocol);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationRemoveBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.protocol = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet2(object.address) ? bytesFromBase642(object.address) : new Uint8Array(),
      protocol: isSet2(object.protocol) ? protocolFromJSON(object.protocol) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes2(message.address !== void 0 ? message.address : new Uint8Array()));
    message.protocol !== void 0 && (obj.protocol = protocolToJSON(message.protocol));
    return obj;
  },
  create(base) {
    return VerificationRemoveBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVerificationRemoveBody();
    message.address = object.address ?? new Uint8Array();
    message.protocol = object.protocol ?? 0;
    return message;
  }
};
function createBaseLinkBody() {
  return { type: "", displayTimestamp: void 0, targetFid: void 0 };
}
var LinkBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.displayTimestamp !== void 0) {
      writer.uint32(16).uint32(message.displayTimestamp);
    }
    if (message.targetFid !== void 0) {
      writer.uint32(24).uint64(message.targetFid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinkBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.displayTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.targetFid = longToNumber2(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? String(object.type) : "",
      displayTimestamp: isSet2(object.displayTimestamp) ? Number(object.displayTimestamp) : void 0,
      targetFid: isSet2(object.targetFid) ? Number(object.targetFid) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = message.type);
    message.displayTimestamp !== void 0 && (obj.displayTimestamp = Math.round(message.displayTimestamp));
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    return obj;
  },
  create(base) {
    return LinkBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLinkBody();
    message.type = object.type ?? "";
    message.displayTimestamp = object.displayTimestamp ?? void 0;
    message.targetFid = object.targetFid ?? void 0;
    return message;
  }
};
function createBaseLinkCompactStateBody() {
  return { type: "", targetFids: [] };
}
var LinkCompactStateBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    writer.uint32(18).fork();
    for (const v of message.targetFids) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinkCompactStateBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag == 16) {
            message.targetFids.push(longToNumber2(reader.uint64()));
            continue;
          }
          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targetFids.push(longToNumber2(reader.uint64()));
            }
            continue;
          }
          break;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? String(object.type) : "",
      targetFids: Array.isArray(object == null ? void 0 : object.targetFids) ? object.targetFids.map((e) => Number(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = message.type);
    if (message.targetFids) {
      obj.targetFids = message.targetFids.map((e) => Math.round(e));
    } else {
      obj.targetFids = [];
    }
    return obj;
  },
  create(base) {
    return LinkCompactStateBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseLinkCompactStateBody();
    message.type = object.type ?? "";
    message.targetFids = ((_a = object.targetFids) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseFrameActionBody() {
  return {
    url: new Uint8Array(),
    buttonIndex: 0,
    castId: void 0,
    inputText: new Uint8Array(),
    state: new Uint8Array(),
    transactionId: new Uint8Array(),
    address: new Uint8Array()
  };
}
var FrameActionBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.url.length !== 0) {
      writer.uint32(10).bytes(message.url);
    }
    if (message.buttonIndex !== 0) {
      writer.uint32(16).uint32(message.buttonIndex);
    }
    if (message.castId !== void 0) {
      CastId.encode(message.castId, writer.uint32(26).fork()).ldelim();
    }
    if (message.inputText.length !== 0) {
      writer.uint32(34).bytes(message.inputText);
    }
    if (message.state.length !== 0) {
      writer.uint32(42).bytes(message.state);
    }
    if (message.transactionId.length !== 0) {
      writer.uint32(50).bytes(message.transactionId);
    }
    if (message.address.length !== 0) {
      writer.uint32(58).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFrameActionBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.url = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.buttonIndex = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.castId = CastId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.inputText = reader.bytes();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.state = reader.bytes();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.transactionId = reader.bytes();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      url: isSet2(object.url) ? bytesFromBase642(object.url) : new Uint8Array(),
      buttonIndex: isSet2(object.buttonIndex) ? Number(object.buttonIndex) : 0,
      castId: isSet2(object.castId) ? CastId.fromJSON(object.castId) : void 0,
      inputText: isSet2(object.inputText) ? bytesFromBase642(object.inputText) : new Uint8Array(),
      state: isSet2(object.state) ? bytesFromBase642(object.state) : new Uint8Array(),
      transactionId: isSet2(object.transactionId) ? bytesFromBase642(object.transactionId) : new Uint8Array(),
      address: isSet2(object.address) ? bytesFromBase642(object.address) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.url !== void 0 && (obj.url = base64FromBytes2(message.url !== void 0 ? message.url : new Uint8Array()));
    message.buttonIndex !== void 0 && (obj.buttonIndex = Math.round(message.buttonIndex));
    message.castId !== void 0 && (obj.castId = message.castId ? CastId.toJSON(message.castId) : void 0);
    message.inputText !== void 0 && (obj.inputText = base64FromBytes2(message.inputText !== void 0 ? message.inputText : new Uint8Array()));
    message.state !== void 0 && (obj.state = base64FromBytes2(message.state !== void 0 ? message.state : new Uint8Array()));
    message.transactionId !== void 0 && (obj.transactionId = base64FromBytes2(
      message.transactionId !== void 0 ? message.transactionId : new Uint8Array()
    ));
    message.address !== void 0 && (obj.address = base64FromBytes2(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return FrameActionBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFrameActionBody();
    message.url = object.url ?? new Uint8Array();
    message.buttonIndex = object.buttonIndex ?? 0;
    message.castId = object.castId !== void 0 && object.castId !== null ? CastId.fromPartial(object.castId) : void 0;
    message.inputText = object.inputText ?? new Uint8Array();
    message.state = object.state ?? new Uint8Array();
    message.transactionId = object.transactionId ?? new Uint8Array();
    message.address = object.address ?? new Uint8Array();
    return message;
  }
};
var tsProtoGlobalThis2 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase642(b64) {
  if (tsProtoGlobalThis2.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis2.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis2.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes2(arr) {
  if (tsProtoGlobalThis2.Buffer) {
    return tsProtoGlobalThis2.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis2.btoa(bin.join(""));
  }
}
function longToNumber2(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal2.default.util.Long !== import_long2.default) {
  import_minimal2.default.util.Long = import_long2.default;
  import_minimal2.default.configure();
}
function isSet2(value) {
  return value !== null && value !== void 0;
}

// src/generated/onchain_event.ts
init_cjs_shims();
var import_long3 = __toESM(require_long());
var import_minimal3 = __toESM(require_minimal2());
function onChainEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "EVENT_TYPE_NONE":
      return 0 /* EVENT_TYPE_NONE */;
    case 1:
    case "EVENT_TYPE_SIGNER":
      return 1 /* EVENT_TYPE_SIGNER */;
    case 2:
    case "EVENT_TYPE_SIGNER_MIGRATED":
      return 2 /* EVENT_TYPE_SIGNER_MIGRATED */;
    case 3:
    case "EVENT_TYPE_ID_REGISTER":
      return 3 /* EVENT_TYPE_ID_REGISTER */;
    case 4:
    case "EVENT_TYPE_STORAGE_RENT":
      return 4 /* EVENT_TYPE_STORAGE_RENT */;
    case 5:
    case "EVENT_TYPE_TIER_PURCHASE":
      return 5 /* EVENT_TYPE_TIER_PURCHASE */;
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum OnChainEventType");
  }
}
function onChainEventTypeToJSON(object) {
  switch (object) {
    case 0 /* EVENT_TYPE_NONE */:
      return "EVENT_TYPE_NONE";
    case 1 /* EVENT_TYPE_SIGNER */:
      return "EVENT_TYPE_SIGNER";
    case 2 /* EVENT_TYPE_SIGNER_MIGRATED */:
      return "EVENT_TYPE_SIGNER_MIGRATED";
    case 3 /* EVENT_TYPE_ID_REGISTER */:
      return "EVENT_TYPE_ID_REGISTER";
    case 4 /* EVENT_TYPE_STORAGE_RENT */:
      return "EVENT_TYPE_STORAGE_RENT";
    case 5 /* EVENT_TYPE_TIER_PURCHASE */:
      return "EVENT_TYPE_TIER_PURCHASE";
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum OnChainEventType");
  }
}
function tierTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "None":
      return 0 /* None */;
    case 1:
    case "Pro":
      return 1 /* Pro */;
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum TierType");
  }
}
function tierTypeToJSON(object) {
  switch (object) {
    case 0 /* None */:
      return "None";
    case 1 /* Pro */:
      return "Pro";
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum TierType");
  }
}
function signerEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGNER_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "SIGNER_EVENT_TYPE_ADD":
      return 1 /* ADD */;
    case 2:
    case "SIGNER_EVENT_TYPE_REMOVE":
      return 2 /* REMOVE */;
    case 3:
    case "SIGNER_EVENT_TYPE_ADMIN_RESET":
      return 3 /* ADMIN_RESET */;
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum SignerEventType");
  }
}
function signerEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "SIGNER_EVENT_TYPE_NONE";
    case 1 /* ADD */:
      return "SIGNER_EVENT_TYPE_ADD";
    case 2 /* REMOVE */:
      return "SIGNER_EVENT_TYPE_REMOVE";
    case 3 /* ADMIN_RESET */:
      return "SIGNER_EVENT_TYPE_ADMIN_RESET";
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum SignerEventType");
  }
}
function idRegisterEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "ID_REGISTER_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "ID_REGISTER_EVENT_TYPE_REGISTER":
      return 1 /* REGISTER */;
    case 2:
    case "ID_REGISTER_EVENT_TYPE_TRANSFER":
      return 2 /* TRANSFER */;
    case 3:
    case "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY":
      return 3 /* CHANGE_RECOVERY */;
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum IdRegisterEventType");
  }
}
function idRegisterEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "ID_REGISTER_EVENT_TYPE_NONE";
    case 1 /* REGISTER */:
      return "ID_REGISTER_EVENT_TYPE_REGISTER";
    case 2 /* TRANSFER */:
      return "ID_REGISTER_EVENT_TYPE_TRANSFER";
    case 3 /* CHANGE_RECOVERY */:
      return "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY";
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum IdRegisterEventType");
  }
}
function createBaseOnChainEvent() {
  return {
    type: 0,
    chainId: 0,
    blockNumber: 0,
    blockHash: new Uint8Array(),
    blockTimestamp: 0,
    transactionHash: new Uint8Array(),
    logIndex: 0,
    fid: 0,
    signerEventBody: void 0,
    signerMigratedEventBody: void 0,
    idRegisterEventBody: void 0,
    storageRentEventBody: void 0,
    tierPurchaseEventBody: void 0,
    txIndex: 0,
    version: 0
  };
}
var OnChainEvent = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.chainId !== 0) {
      writer.uint32(16).uint32(message.chainId);
    }
    if (message.blockNumber !== 0) {
      writer.uint32(24).uint32(message.blockNumber);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(34).bytes(message.blockHash);
    }
    if (message.blockTimestamp !== 0) {
      writer.uint32(40).uint64(message.blockTimestamp);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(50).bytes(message.transactionHash);
    }
    if (message.logIndex !== 0) {
      writer.uint32(56).uint32(message.logIndex);
    }
    if (message.fid !== 0) {
      writer.uint32(64).uint64(message.fid);
    }
    if (message.signerEventBody !== void 0) {
      SignerEventBody.encode(message.signerEventBody, writer.uint32(74).fork()).ldelim();
    }
    if (message.signerMigratedEventBody !== void 0) {
      SignerMigratedEventBody.encode(message.signerMigratedEventBody, writer.uint32(82).fork()).ldelim();
    }
    if (message.idRegisterEventBody !== void 0) {
      IdRegisterEventBody.encode(message.idRegisterEventBody, writer.uint32(90).fork()).ldelim();
    }
    if (message.storageRentEventBody !== void 0) {
      StorageRentEventBody.encode(message.storageRentEventBody, writer.uint32(98).fork()).ldelim();
    }
    if (message.tierPurchaseEventBody !== void 0) {
      TierPurchaseBody.encode(message.tierPurchaseEventBody, writer.uint32(122).fork()).ldelim();
    }
    if (message.txIndex !== 0) {
      writer.uint32(104).uint32(message.txIndex);
    }
    if (message.version !== 0) {
      writer.uint32(112).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.chainId = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.blockNumber = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.blockHash = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.blockTimestamp = longToNumber3(reader.uint64());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.transactionHash = reader.bytes();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.logIndex = reader.uint32();
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.fid = longToNumber3(reader.uint64());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.signerEventBody = SignerEventBody.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }
          message.signerMigratedEventBody = SignerMigratedEventBody.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }
          message.idRegisterEventBody = IdRegisterEventBody.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }
          message.storageRentEventBody = StorageRentEventBody.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }
          message.tierPurchaseEventBody = TierPurchaseBody.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 104) {
            break;
          }
          message.txIndex = reader.uint32();
          continue;
        case 14:
          if (tag != 112) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet3(object.type) ? onChainEventTypeFromJSON(object.type) : 0,
      chainId: isSet3(object.chainId) ? Number(object.chainId) : 0,
      blockNumber: isSet3(object.blockNumber) ? Number(object.blockNumber) : 0,
      blockHash: isSet3(object.blockHash) ? bytesFromBase643(object.blockHash) : new Uint8Array(),
      blockTimestamp: isSet3(object.blockTimestamp) ? Number(object.blockTimestamp) : 0,
      transactionHash: isSet3(object.transactionHash) ? bytesFromBase643(object.transactionHash) : new Uint8Array(),
      logIndex: isSet3(object.logIndex) ? Number(object.logIndex) : 0,
      fid: isSet3(object.fid) ? Number(object.fid) : 0,
      signerEventBody: isSet3(object.signerEventBody) ? SignerEventBody.fromJSON(object.signerEventBody) : void 0,
      signerMigratedEventBody: isSet3(object.signerMigratedEventBody) ? SignerMigratedEventBody.fromJSON(object.signerMigratedEventBody) : void 0,
      idRegisterEventBody: isSet3(object.idRegisterEventBody) ? IdRegisterEventBody.fromJSON(object.idRegisterEventBody) : void 0,
      storageRentEventBody: isSet3(object.storageRentEventBody) ? StorageRentEventBody.fromJSON(object.storageRentEventBody) : void 0,
      tierPurchaseEventBody: isSet3(object.tierPurchaseEventBody) ? TierPurchaseBody.fromJSON(object.tierPurchaseEventBody) : void 0,
      txIndex: isSet3(object.txIndex) ? Number(object.txIndex) : 0,
      version: isSet3(object.version) ? Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = onChainEventTypeToJSON(message.type));
    message.chainId !== void 0 && (obj.chainId = Math.round(message.chainId));
    message.blockNumber !== void 0 && (obj.blockNumber = Math.round(message.blockNumber));
    message.blockHash !== void 0 && (obj.blockHash = base64FromBytes3(message.blockHash !== void 0 ? message.blockHash : new Uint8Array()));
    message.blockTimestamp !== void 0 && (obj.blockTimestamp = Math.round(message.blockTimestamp));
    message.transactionHash !== void 0 && (obj.transactionHash = base64FromBytes3(
      message.transactionHash !== void 0 ? message.transactionHash : new Uint8Array()
    ));
    message.logIndex !== void 0 && (obj.logIndex = Math.round(message.logIndex));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.signerEventBody !== void 0 && (obj.signerEventBody = message.signerEventBody ? SignerEventBody.toJSON(message.signerEventBody) : void 0);
    message.signerMigratedEventBody !== void 0 && (obj.signerMigratedEventBody = message.signerMigratedEventBody ? SignerMigratedEventBody.toJSON(message.signerMigratedEventBody) : void 0);
    message.idRegisterEventBody !== void 0 && (obj.idRegisterEventBody = message.idRegisterEventBody ? IdRegisterEventBody.toJSON(message.idRegisterEventBody) : void 0);
    message.storageRentEventBody !== void 0 && (obj.storageRentEventBody = message.storageRentEventBody ? StorageRentEventBody.toJSON(message.storageRentEventBody) : void 0);
    message.tierPurchaseEventBody !== void 0 && (obj.tierPurchaseEventBody = message.tierPurchaseEventBody ? TierPurchaseBody.toJSON(message.tierPurchaseEventBody) : void 0);
    message.txIndex !== void 0 && (obj.txIndex = Math.round(message.txIndex));
    message.version !== void 0 && (obj.version = Math.round(message.version));
    return obj;
  },
  create(base) {
    return OnChainEvent.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOnChainEvent();
    message.type = object.type ?? 0;
    message.chainId = object.chainId ?? 0;
    message.blockNumber = object.blockNumber ?? 0;
    message.blockHash = object.blockHash ?? new Uint8Array();
    message.blockTimestamp = object.blockTimestamp ?? 0;
    message.transactionHash = object.transactionHash ?? new Uint8Array();
    message.logIndex = object.logIndex ?? 0;
    message.fid = object.fid ?? 0;
    message.signerEventBody = object.signerEventBody !== void 0 && object.signerEventBody !== null ? SignerEventBody.fromPartial(object.signerEventBody) : void 0;
    message.signerMigratedEventBody = object.signerMigratedEventBody !== void 0 && object.signerMigratedEventBody !== null ? SignerMigratedEventBody.fromPartial(object.signerMigratedEventBody) : void 0;
    message.idRegisterEventBody = object.idRegisterEventBody !== void 0 && object.idRegisterEventBody !== null ? IdRegisterEventBody.fromPartial(object.idRegisterEventBody) : void 0;
    message.storageRentEventBody = object.storageRentEventBody !== void 0 && object.storageRentEventBody !== null ? StorageRentEventBody.fromPartial(object.storageRentEventBody) : void 0;
    message.tierPurchaseEventBody = object.tierPurchaseEventBody !== void 0 && object.tierPurchaseEventBody !== null ? TierPurchaseBody.fromPartial(object.tierPurchaseEventBody) : void 0;
    message.txIndex = object.txIndex ?? 0;
    message.version = object.version ?? 0;
    return message;
  }
};
function createBaseTierPurchaseBody() {
  return { tierType: 0, forDays: 0, payer: new Uint8Array() };
}
var TierPurchaseBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.tierType !== 0) {
      writer.uint32(8).int32(message.tierType);
    }
    if (message.forDays !== 0) {
      writer.uint32(16).uint64(message.forDays);
    }
    if (message.payer.length !== 0) {
      writer.uint32(26).bytes(message.payer);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTierPurchaseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.tierType = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.forDays = longToNumber3(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.payer = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tierType: isSet3(object.tierType) ? tierTypeFromJSON(object.tierType) : 0,
      forDays: isSet3(object.forDays) ? Number(object.forDays) : 0,
      payer: isSet3(object.payer) ? bytesFromBase643(object.payer) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.tierType !== void 0 && (obj.tierType = tierTypeToJSON(message.tierType));
    message.forDays !== void 0 && (obj.forDays = Math.round(message.forDays));
    message.payer !== void 0 && (obj.payer = base64FromBytes3(message.payer !== void 0 ? message.payer : new Uint8Array()));
    return obj;
  },
  create(base) {
    return TierPurchaseBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTierPurchaseBody();
    message.tierType = object.tierType ?? 0;
    message.forDays = object.forDays ?? 0;
    message.payer = object.payer ?? new Uint8Array();
    return message;
  }
};
function createBaseSignerEventBody() {
  return { key: new Uint8Array(), keyType: 0, eventType: 0, metadata: new Uint8Array(), metadataType: 0 };
}
var SignerEventBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.keyType !== 0) {
      writer.uint32(16).uint32(message.keyType);
    }
    if (message.eventType !== 0) {
      writer.uint32(24).int32(message.eventType);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(34).bytes(message.metadata);
    }
    if (message.metadataType !== 0) {
      writer.uint32(40).uint32(message.metadataType);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.keyType = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.metadata = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.metadataType = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet3(object.key) ? bytesFromBase643(object.key) : new Uint8Array(),
      keyType: isSet3(object.keyType) ? Number(object.keyType) : 0,
      eventType: isSet3(object.eventType) ? signerEventTypeFromJSON(object.eventType) : 0,
      metadata: isSet3(object.metadata) ? bytesFromBase643(object.metadata) : new Uint8Array(),
      metadataType: isSet3(object.metadataType) ? Number(object.metadataType) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = base64FromBytes3(message.key !== void 0 ? message.key : new Uint8Array()));
    message.keyType !== void 0 && (obj.keyType = Math.round(message.keyType));
    message.eventType !== void 0 && (obj.eventType = signerEventTypeToJSON(message.eventType));
    message.metadata !== void 0 && (obj.metadata = base64FromBytes3(message.metadata !== void 0 ? message.metadata : new Uint8Array()));
    message.metadataType !== void 0 && (obj.metadataType = Math.round(message.metadataType));
    return obj;
  },
  create(base) {
    return SignerEventBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignerEventBody();
    message.key = object.key ?? new Uint8Array();
    message.keyType = object.keyType ?? 0;
    message.eventType = object.eventType ?? 0;
    message.metadata = object.metadata ?? new Uint8Array();
    message.metadataType = object.metadataType ?? 0;
    return message;
  }
};
function createBaseSignerMigratedEventBody() {
  return { migratedAt: 0 };
}
var SignerMigratedEventBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.migratedAt !== 0) {
      writer.uint32(8).uint32(message.migratedAt);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerMigratedEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.migratedAt = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { migratedAt: isSet3(object.migratedAt) ? Number(object.migratedAt) : 0 };
  },
  toJSON(message) {
    const obj = {};
    message.migratedAt !== void 0 && (obj.migratedAt = Math.round(message.migratedAt));
    return obj;
  },
  create(base) {
    return SignerMigratedEventBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignerMigratedEventBody();
    message.migratedAt = object.migratedAt ?? 0;
    return message;
  }
};
function createBaseIdRegisterEventBody() {
  return { to: new Uint8Array(), eventType: 0, from: new Uint8Array(), recoveryAddress: new Uint8Array() };
}
var IdRegisterEventBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.to.length !== 0) {
      writer.uint32(10).bytes(message.to);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    if (message.from.length !== 0) {
      writer.uint32(26).bytes(message.from);
    }
    if (message.recoveryAddress.length !== 0) {
      writer.uint32(34).bytes(message.recoveryAddress);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseIdRegisterEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.to = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.from = reader.bytes();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.recoveryAddress = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      to: isSet3(object.to) ? bytesFromBase643(object.to) : new Uint8Array(),
      eventType: isSet3(object.eventType) ? idRegisterEventTypeFromJSON(object.eventType) : 0,
      from: isSet3(object.from) ? bytesFromBase643(object.from) : new Uint8Array(),
      recoveryAddress: isSet3(object.recoveryAddress) ? bytesFromBase643(object.recoveryAddress) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.to !== void 0 && (obj.to = base64FromBytes3(message.to !== void 0 ? message.to : new Uint8Array()));
    message.eventType !== void 0 && (obj.eventType = idRegisterEventTypeToJSON(message.eventType));
    message.from !== void 0 && (obj.from = base64FromBytes3(message.from !== void 0 ? message.from : new Uint8Array()));
    message.recoveryAddress !== void 0 && (obj.recoveryAddress = base64FromBytes3(
      message.recoveryAddress !== void 0 ? message.recoveryAddress : new Uint8Array()
    ));
    return obj;
  },
  create(base) {
    return IdRegisterEventBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseIdRegisterEventBody();
    message.to = object.to ?? new Uint8Array();
    message.eventType = object.eventType ?? 0;
    message.from = object.from ?? new Uint8Array();
    message.recoveryAddress = object.recoveryAddress ?? new Uint8Array();
    return message;
  }
};
function createBaseStorageRentEventBody() {
  return { payer: new Uint8Array(), units: 0, expiry: 0 };
}
var StorageRentEventBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.payer.length !== 0) {
      writer.uint32(10).bytes(message.payer);
    }
    if (message.units !== 0) {
      writer.uint32(16).uint32(message.units);
    }
    if (message.expiry !== 0) {
      writer.uint32(24).uint32(message.expiry);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageRentEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.payer = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.units = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.expiry = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      payer: isSet3(object.payer) ? bytesFromBase643(object.payer) : new Uint8Array(),
      units: isSet3(object.units) ? Number(object.units) : 0,
      expiry: isSet3(object.expiry) ? Number(object.expiry) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.payer !== void 0 && (obj.payer = base64FromBytes3(message.payer !== void 0 ? message.payer : new Uint8Array()));
    message.units !== void 0 && (obj.units = Math.round(message.units));
    message.expiry !== void 0 && (obj.expiry = Math.round(message.expiry));
    return obj;
  },
  create(base) {
    return StorageRentEventBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStorageRentEventBody();
    message.payer = object.payer ?? new Uint8Array();
    message.units = object.units ?? 0;
    message.expiry = object.expiry ?? 0;
    return message;
  }
};
var tsProtoGlobalThis3 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase643(b64) {
  if (tsProtoGlobalThis3.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis3.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis3.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes3(arr) {
  if (tsProtoGlobalThis3.Buffer) {
    return tsProtoGlobalThis3.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis3.btoa(bin.join(""));
  }
}
function longToNumber3(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis3.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal3.default.util.Long !== import_long3.default) {
  import_minimal3.default.util.Long = import_long3.default;
  import_minimal3.default.configure();
}
function isSet3(value) {
  return value !== null && value !== void 0;
}

// src/generated/blocks.ts
function createBaseHeight() {
  return { shardIndex: 0, blockNumber: 0 };
}
var Height = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.shardIndex !== 0) {
      writer.uint32(8).uint32(message.shardIndex);
    }
    if (message.blockNumber !== 0) {
      writer.uint32(16).uint64(message.blockNumber);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.blockNumber = longToNumber4(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardIndex: isSet4(object.shardIndex) ? Number(object.shardIndex) : 0,
      blockNumber: isSet4(object.blockNumber) ? Number(object.blockNumber) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    message.blockNumber !== void 0 && (obj.blockNumber = Math.round(message.blockNumber));
    return obj;
  },
  create(base) {
    return Height.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseHeight();
    message.shardIndex = object.shardIndex ?? 0;
    message.blockNumber = object.blockNumber ?? 0;
    return message;
  }
};
function createBaseShardHash() {
  return { shardIndex: 0, hash: new Uint8Array() };
}
var ShardHash = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.shardIndex !== 0) {
      writer.uint32(8).uint32(message.shardIndex);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardIndex: isSet4(object.shardIndex) ? Number(object.shardIndex) : 0,
      hash: isSet4(object.hash) ? bytesFromBase644(object.hash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    message.hash !== void 0 && (obj.hash = base64FromBytes4(message.hash !== void 0 ? message.hash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return ShardHash.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseShardHash();
    message.shardIndex = object.shardIndex ?? 0;
    message.hash = object.hash ?? new Uint8Array();
    return message;
  }
};
function createBaseCommitSignature() {
  return { signer: new Uint8Array(), signature: new Uint8Array() };
}
var CommitSignature = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.signer.length !== 0) {
      writer.uint32(10).bytes(message.signer);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.signer = reader.bytes();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.signature = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signer: isSet4(object.signer) ? bytesFromBase644(object.signer) : new Uint8Array(),
      signature: isSet4(object.signature) ? bytesFromBase644(object.signature) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.signer !== void 0 && (obj.signer = base64FromBytes4(message.signer !== void 0 ? message.signer : new Uint8Array()));
    message.signature !== void 0 && (obj.signature = base64FromBytes4(message.signature !== void 0 ? message.signature : new Uint8Array()));
    return obj;
  },
  create(base) {
    return CommitSignature.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommitSignature();
    message.signer = object.signer ?? new Uint8Array();
    message.signature = object.signature ?? new Uint8Array();
    return message;
  }
};
function createBaseCommits() {
  return { height: void 0, round: 0, value: void 0, signatures: [] };
}
var Commits = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.height !== void 0) {
      Height.encode(message.height, writer.uint32(10).fork()).ldelim();
    }
    if (message.round !== 0) {
      writer.uint32(16).int64(message.round);
    }
    if (message.value !== void 0) {
      ShardHash.encode(message.value, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.signatures) {
      CommitSignature.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommits();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.height = Height.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.round = longToNumber4(reader.int64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.value = ShardHash.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.signatures.push(CommitSignature.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet4(object.height) ? Height.fromJSON(object.height) : void 0,
      round: isSet4(object.round) ? Number(object.round) : 0,
      value: isSet4(object.value) ? ShardHash.fromJSON(object.value) : void 0,
      signatures: Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => CommitSignature.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.height !== void 0 && (obj.height = message.height ? Height.toJSON(message.height) : void 0);
    message.round !== void 0 && (obj.round = Math.round(message.round));
    message.value !== void 0 && (obj.value = message.value ? ShardHash.toJSON(message.value) : void 0);
    if (message.signatures) {
      obj.signatures = message.signatures.map((e) => e ? CommitSignature.toJSON(e) : void 0);
    } else {
      obj.signatures = [];
    }
    return obj;
  },
  create(base) {
    return Commits.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCommits();
    message.height = object.height !== void 0 && object.height !== null ? Height.fromPartial(object.height) : void 0;
    message.round = object.round ?? 0;
    message.value = object.value !== void 0 && object.value !== null ? ShardHash.fromPartial(object.value) : void 0;
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => CommitSignature.fromPartial(e))) || [];
    return message;
  }
};
function createBaseBlockHeader() {
  return {
    height: void 0,
    timestamp: 0,
    version: 0,
    chainId: 0,
    shardWitnessesHash: new Uint8Array(),
    parentHash: new Uint8Array()
  };
}
var BlockHeader = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.height !== void 0) {
      Height.encode(message.height, writer.uint32(10).fork()).ldelim();
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.version !== 0) {
      writer.uint32(24).uint32(message.version);
    }
    if (message.chainId !== 0) {
      writer.uint32(32).int32(message.chainId);
    }
    if (message.shardWitnessesHash.length !== 0) {
      writer.uint32(42).bytes(message.shardWitnessesHash);
    }
    if (message.parentHash.length !== 0) {
      writer.uint32(50).bytes(message.parentHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.height = Height.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.timestamp = longToNumber4(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.version = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.chainId = reader.int32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.shardWitnessesHash = reader.bytes();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.parentHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet4(object.height) ? Height.fromJSON(object.height) : void 0,
      timestamp: isSet4(object.timestamp) ? Number(object.timestamp) : 0,
      version: isSet4(object.version) ? Number(object.version) : 0,
      chainId: isSet4(object.chainId) ? farcasterNetworkFromJSON(object.chainId) : 0,
      shardWitnessesHash: isSet4(object.shardWitnessesHash) ? bytesFromBase644(object.shardWitnessesHash) : new Uint8Array(),
      parentHash: isSet4(object.parentHash) ? bytesFromBase644(object.parentHash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.height !== void 0 && (obj.height = message.height ? Height.toJSON(message.height) : void 0);
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.version !== void 0 && (obj.version = Math.round(message.version));
    message.chainId !== void 0 && (obj.chainId = farcasterNetworkToJSON(message.chainId));
    message.shardWitnessesHash !== void 0 && (obj.shardWitnessesHash = base64FromBytes4(
      message.shardWitnessesHash !== void 0 ? message.shardWitnessesHash : new Uint8Array()
    ));
    message.parentHash !== void 0 && (obj.parentHash = base64FromBytes4(message.parentHash !== void 0 ? message.parentHash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return BlockHeader.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockHeader();
    message.height = object.height !== void 0 && object.height !== null ? Height.fromPartial(object.height) : void 0;
    message.timestamp = object.timestamp ?? 0;
    message.version = object.version ?? 0;
    message.chainId = object.chainId ?? 0;
    message.shardWitnessesHash = object.shardWitnessesHash ?? new Uint8Array();
    message.parentHash = object.parentHash ?? new Uint8Array();
    return message;
  }
};
function createBaseShardWitness() {
  return { shardChunkWitnesses: [] };
}
var ShardWitness = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    for (const v of message.shardChunkWitnesses) {
      ShardChunkWitness.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardWitness();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.shardChunkWitnesses.push(ShardChunkWitness.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardChunkWitnesses: Array.isArray(object == null ? void 0 : object.shardChunkWitnesses) ? object.shardChunkWitnesses.map((e) => ShardChunkWitness.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.shardChunkWitnesses) {
      obj.shardChunkWitnesses = message.shardChunkWitnesses.map((e) => e ? ShardChunkWitness.toJSON(e) : void 0);
    } else {
      obj.shardChunkWitnesses = [];
    }
    return obj;
  },
  create(base) {
    return ShardWitness.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseShardWitness();
    message.shardChunkWitnesses = ((_a = object.shardChunkWitnesses) == null ? void 0 : _a.map((e) => ShardChunkWitness.fromPartial(e))) || [];
    return message;
  }
};
function createBaseShardChunkWitness() {
  return { height: void 0, shardRoot: new Uint8Array(), shardHash: new Uint8Array() };
}
var ShardChunkWitness = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.height !== void 0) {
      Height.encode(message.height, writer.uint32(10).fork()).ldelim();
    }
    if (message.shardRoot.length !== 0) {
      writer.uint32(18).bytes(message.shardRoot);
    }
    if (message.shardHash.length !== 0) {
      writer.uint32(26).bytes(message.shardHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardChunkWitness();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.height = Height.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.shardRoot = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.shardHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet4(object.height) ? Height.fromJSON(object.height) : void 0,
      shardRoot: isSet4(object.shardRoot) ? bytesFromBase644(object.shardRoot) : new Uint8Array(),
      shardHash: isSet4(object.shardHash) ? bytesFromBase644(object.shardHash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.height !== void 0 && (obj.height = message.height ? Height.toJSON(message.height) : void 0);
    message.shardRoot !== void 0 && (obj.shardRoot = base64FromBytes4(message.shardRoot !== void 0 ? message.shardRoot : new Uint8Array()));
    message.shardHash !== void 0 && (obj.shardHash = base64FromBytes4(message.shardHash !== void 0 ? message.shardHash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return ShardChunkWitness.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseShardChunkWitness();
    message.height = object.height !== void 0 && object.height !== null ? Height.fromPartial(object.height) : void 0;
    message.shardRoot = object.shardRoot ?? new Uint8Array();
    message.shardHash = object.shardHash ?? new Uint8Array();
    return message;
  }
};
function createBaseBlock() {
  return { header: void 0, hash: new Uint8Array(), shardWitness: void 0, commits: void 0 };
}
var Block = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.header !== void 0) {
      BlockHeader.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.shardWitness !== void 0) {
      ShardWitness.encode(message.shardWitness, writer.uint32(26).fork()).ldelim();
    }
    if (message.commits !== void 0) {
      Commits.encode(message.commits, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.header = BlockHeader.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.shardWitness = ShardWitness.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.commits = Commits.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      header: isSet4(object.header) ? BlockHeader.fromJSON(object.header) : void 0,
      hash: isSet4(object.hash) ? bytesFromBase644(object.hash) : new Uint8Array(),
      shardWitness: isSet4(object.shardWitness) ? ShardWitness.fromJSON(object.shardWitness) : void 0,
      commits: isSet4(object.commits) ? Commits.fromJSON(object.commits) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.header !== void 0 && (obj.header = message.header ? BlockHeader.toJSON(message.header) : void 0);
    message.hash !== void 0 && (obj.hash = base64FromBytes4(message.hash !== void 0 ? message.hash : new Uint8Array()));
    message.shardWitness !== void 0 && (obj.shardWitness = message.shardWitness ? ShardWitness.toJSON(message.shardWitness) : void 0);
    message.commits !== void 0 && (obj.commits = message.commits ? Commits.toJSON(message.commits) : void 0);
    return obj;
  },
  create(base) {
    return Block.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlock();
    message.header = object.header !== void 0 && object.header !== null ? BlockHeader.fromPartial(object.header) : void 0;
    message.hash = object.hash ?? new Uint8Array();
    message.shardWitness = object.shardWitness !== void 0 && object.shardWitness !== null ? ShardWitness.fromPartial(object.shardWitness) : void 0;
    message.commits = object.commits !== void 0 && object.commits !== null ? Commits.fromPartial(object.commits) : void 0;
    return message;
  }
};
function createBaseShardHeader() {
  return { height: void 0, timestamp: 0, parentHash: new Uint8Array(), shardRoot: new Uint8Array() };
}
var ShardHeader = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.height !== void 0) {
      Height.encode(message.height, writer.uint32(10).fork()).ldelim();
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.parentHash.length !== 0) {
      writer.uint32(26).bytes(message.parentHash);
    }
    if (message.shardRoot.length !== 0) {
      writer.uint32(34).bytes(message.shardRoot);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.height = Height.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.timestamp = longToNumber4(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.parentHash = reader.bytes();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.shardRoot = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet4(object.height) ? Height.fromJSON(object.height) : void 0,
      timestamp: isSet4(object.timestamp) ? Number(object.timestamp) : 0,
      parentHash: isSet4(object.parentHash) ? bytesFromBase644(object.parentHash) : new Uint8Array(),
      shardRoot: isSet4(object.shardRoot) ? bytesFromBase644(object.shardRoot) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.height !== void 0 && (obj.height = message.height ? Height.toJSON(message.height) : void 0);
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.parentHash !== void 0 && (obj.parentHash = base64FromBytes4(message.parentHash !== void 0 ? message.parentHash : new Uint8Array()));
    message.shardRoot !== void 0 && (obj.shardRoot = base64FromBytes4(message.shardRoot !== void 0 ? message.shardRoot : new Uint8Array()));
    return obj;
  },
  create(base) {
    return ShardHeader.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseShardHeader();
    message.height = object.height !== void 0 && object.height !== null ? Height.fromPartial(object.height) : void 0;
    message.timestamp = object.timestamp ?? 0;
    message.parentHash = object.parentHash ?? new Uint8Array();
    message.shardRoot = object.shardRoot ?? new Uint8Array();
    return message;
  }
};
function createBaseShardChunk() {
  return { header: void 0, hash: new Uint8Array(), transactions: [], commits: void 0 };
}
var ShardChunk = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.header !== void 0) {
      ShardHeader.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    for (const v of message.transactions) {
      Transaction.encode(v, writer.uint32(26).fork()).ldelim();
    }
    if (message.commits !== void 0) {
      Commits.encode(message.commits, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.header = ShardHeader.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.commits = Commits.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      header: isSet4(object.header) ? ShardHeader.fromJSON(object.header) : void 0,
      hash: isSet4(object.hash) ? bytesFromBase644(object.hash) : new Uint8Array(),
      transactions: Array.isArray(object == null ? void 0 : object.transactions) ? object.transactions.map((e) => Transaction.fromJSON(e)) : [],
      commits: isSet4(object.commits) ? Commits.fromJSON(object.commits) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.header !== void 0 && (obj.header = message.header ? ShardHeader.toJSON(message.header) : void 0);
    message.hash !== void 0 && (obj.hash = base64FromBytes4(message.hash !== void 0 ? message.hash : new Uint8Array()));
    if (message.transactions) {
      obj.transactions = message.transactions.map((e) => e ? Transaction.toJSON(e) : void 0);
    } else {
      obj.transactions = [];
    }
    message.commits !== void 0 && (obj.commits = message.commits ? Commits.toJSON(message.commits) : void 0);
    return obj;
  },
  create(base) {
    return ShardChunk.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseShardChunk();
    message.header = object.header !== void 0 && object.header !== null ? ShardHeader.fromPartial(object.header) : void 0;
    message.hash = object.hash ?? new Uint8Array();
    message.transactions = ((_a = object.transactions) == null ? void 0 : _a.map((e) => Transaction.fromPartial(e))) || [];
    message.commits = object.commits !== void 0 && object.commits !== null ? Commits.fromPartial(object.commits) : void 0;
    return message;
  }
};
function createBaseTransaction() {
  return { fid: 0, userMessages: [], systemMessages: [], accountRoot: new Uint8Array() };
}
var Transaction = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    for (const v of message.userMessages) {
      Message.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.systemMessages) {
      ValidatorMessage.encode(v, writer.uint32(26).fork()).ldelim();
    }
    if (message.accountRoot.length !== 0) {
      writer.uint32(34).bytes(message.accountRoot);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber4(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.userMessages.push(Message.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.systemMessages.push(ValidatorMessage.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.accountRoot = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet4(object.fid) ? Number(object.fid) : 0,
      userMessages: Array.isArray(object == null ? void 0 : object.userMessages) ? object.userMessages.map((e) => Message.fromJSON(e)) : [],
      systemMessages: Array.isArray(object == null ? void 0 : object.systemMessages) ? object.systemMessages.map((e) => ValidatorMessage.fromJSON(e)) : [],
      accountRoot: isSet4(object.accountRoot) ? bytesFromBase644(object.accountRoot) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    if (message.userMessages) {
      obj.userMessages = message.userMessages.map((e) => e ? Message.toJSON(e) : void 0);
    } else {
      obj.userMessages = [];
    }
    if (message.systemMessages) {
      obj.systemMessages = message.systemMessages.map((e) => e ? ValidatorMessage.toJSON(e) : void 0);
    } else {
      obj.systemMessages = [];
    }
    message.accountRoot !== void 0 && (obj.accountRoot = base64FromBytes4(message.accountRoot !== void 0 ? message.accountRoot : new Uint8Array()));
    return obj;
  },
  create(base) {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseTransaction();
    message.fid = object.fid ?? 0;
    message.userMessages = ((_a = object.userMessages) == null ? void 0 : _a.map((e) => Message.fromPartial(e))) || [];
    message.systemMessages = ((_b = object.systemMessages) == null ? void 0 : _b.map((e) => ValidatorMessage.fromPartial(e))) || [];
    message.accountRoot = object.accountRoot ?? new Uint8Array();
    return message;
  }
};
function createBaseFnameTransfer() {
  return { id: 0, fromFid: 0, proof: void 0 };
}
var FnameTransfer = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.fromFid !== 0) {
      writer.uint32(16).uint64(message.fromFid);
    }
    if (message.proof !== void 0) {
      UserNameProof.encode(message.proof, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFnameTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.id = longToNumber4(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.fromFid = longToNumber4(reader.uint64());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.proof = UserNameProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet4(object.id) ? Number(object.id) : 0,
      fromFid: isSet4(object.fromFid) ? Number(object.fromFid) : 0,
      proof: isSet4(object.proof) ? UserNameProof.fromJSON(object.proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.id !== void 0 && (obj.id = Math.round(message.id));
    message.fromFid !== void 0 && (obj.fromFid = Math.round(message.fromFid));
    message.proof !== void 0 && (obj.proof = message.proof ? UserNameProof.toJSON(message.proof) : void 0);
    return obj;
  },
  create(base) {
    return FnameTransfer.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFnameTransfer();
    message.id = object.id ?? 0;
    message.fromFid = object.fromFid ?? 0;
    message.proof = object.proof !== void 0 && object.proof !== null ? UserNameProof.fromPartial(object.proof) : void 0;
    return message;
  }
};
function createBaseValidatorMessage() {
  return { onChainEvent: void 0, fnameTransfer: void 0 };
}
var ValidatorMessage = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.onChainEvent !== void 0) {
      OnChainEvent.encode(message.onChainEvent, writer.uint32(10).fork()).ldelim();
    }
    if (message.fnameTransfer !== void 0) {
      FnameTransfer.encode(message.fnameTransfer, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.onChainEvent = OnChainEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.fnameTransfer = FnameTransfer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      onChainEvent: isSet4(object.onChainEvent) ? OnChainEvent.fromJSON(object.onChainEvent) : void 0,
      fnameTransfer: isSet4(object.fnameTransfer) ? FnameTransfer.fromJSON(object.fnameTransfer) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.onChainEvent !== void 0 && (obj.onChainEvent = message.onChainEvent ? OnChainEvent.toJSON(message.onChainEvent) : void 0);
    message.fnameTransfer !== void 0 && (obj.fnameTransfer = message.fnameTransfer ? FnameTransfer.toJSON(message.fnameTransfer) : void 0);
    return obj;
  },
  create(base) {
    return ValidatorMessage.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorMessage();
    message.onChainEvent = object.onChainEvent !== void 0 && object.onChainEvent !== null ? OnChainEvent.fromPartial(object.onChainEvent) : void 0;
    message.fnameTransfer = object.fnameTransfer !== void 0 && object.fnameTransfer !== null ? FnameTransfer.fromPartial(object.fnameTransfer) : void 0;
    return message;
  }
};
var tsProtoGlobalThis4 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase644(b64) {
  if (tsProtoGlobalThis4.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis4.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis4.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes4(arr) {
  if (tsProtoGlobalThis4.Buffer) {
    return tsProtoGlobalThis4.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis4.btoa(bin.join(""));
  }
}
function longToNumber4(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis4.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal4.default.util.Long !== import_long4.default) {
  import_minimal4.default.util.Long = import_long4.default;
  import_minimal4.default.configure();
}
function isSet4(value) {
  return value !== null && value !== void 0;
}

// src/generated/hub_event.ts
init_cjs_shims();
var import_long5 = __toESM(require_long());
var import_minimal5 = __toESM(require_minimal2());
function hubEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "HUB_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "HUB_EVENT_TYPE_MERGE_MESSAGE":
      return 1 /* MERGE_MESSAGE */;
    case 2:
    case "HUB_EVENT_TYPE_PRUNE_MESSAGE":
      return 2 /* PRUNE_MESSAGE */;
    case 3:
    case "HUB_EVENT_TYPE_REVOKE_MESSAGE":
      return 3 /* REVOKE_MESSAGE */;
    case 6:
    case "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF":
      return 6 /* MERGE_USERNAME_PROOF */;
    case 9:
    case "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT":
      return 9 /* MERGE_ON_CHAIN_EVENT */;
    case 10:
    case "HUB_EVENT_TYPE_MERGE_FAILURE":
      return 10 /* MERGE_FAILURE */;
    case 11:
    case "HUB_EVENT_TYPE_BLOCK_CONFIRMED":
      return 11 /* BLOCK_CONFIRMED */;
    default:
      throw new tsProtoGlobalThis5.Error("Unrecognized enum value " + object + " for enum HubEventType");
  }
}
function hubEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "HUB_EVENT_TYPE_NONE";
    case 1 /* MERGE_MESSAGE */:
      return "HUB_EVENT_TYPE_MERGE_MESSAGE";
    case 2 /* PRUNE_MESSAGE */:
      return "HUB_EVENT_TYPE_PRUNE_MESSAGE";
    case 3 /* REVOKE_MESSAGE */:
      return "HUB_EVENT_TYPE_REVOKE_MESSAGE";
    case 6 /* MERGE_USERNAME_PROOF */:
      return "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF";
    case 9 /* MERGE_ON_CHAIN_EVENT */:
      return "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT";
    case 10 /* MERGE_FAILURE */:
      return "HUB_EVENT_TYPE_MERGE_FAILURE";
    case 11 /* BLOCK_CONFIRMED */:
      return "HUB_EVENT_TYPE_BLOCK_CONFIRMED";
    default:
      throw new tsProtoGlobalThis5.Error("Unrecognized enum value " + object + " for enum HubEventType");
  }
}
function createBaseMergeMessageBody() {
  return { message: void 0, deletedMessages: [] };
}
var MergeMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.deletedMessages) {
      Message.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.deletedMessages.push(Message.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0,
      deletedMessages: Array.isArray(object == null ? void 0 : object.deletedMessages) ? object.deletedMessages.map((e) => Message.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    if (message.deletedMessages) {
      obj.deletedMessages = message.deletedMessages.map((e) => e ? Message.toJSON(e) : void 0);
    } else {
      obj.deletedMessages = [];
    }
    return obj;
  },
  create(base) {
    return MergeMessageBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMergeMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    message.deletedMessages = ((_a = object.deletedMessages) == null ? void 0 : _a.map((e) => Message.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMergeFailureBody() {
  return { message: void 0, code: "", reason: "" };
}
var MergeFailureBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeFailureBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.code = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0,
      code: isSet5(object.code) ? String(object.code) : "",
      reason: isSet5(object.reason) ? String(object.reason) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    message.code !== void 0 && (obj.code = message.code);
    message.reason !== void 0 && (obj.reason = message.reason);
    return obj;
  },
  create(base) {
    return MergeFailureBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMergeFailureBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    message.code = object.code ?? "";
    message.reason = object.reason ?? "";
    return message;
  }
};
function createBasePruneMessageBody() {
  return { message: void 0 };
}
var PruneMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePruneMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return PruneMessageBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePruneMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
function createBaseRevokeMessageBody() {
  return { message: void 0 };
}
var RevokeMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRevokeMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return RevokeMessageBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRevokeMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
function createBaseBlockConfirmedBody() {
  return {
    blockNumber: 0,
    shardIndex: 0,
    timestamp: 0,
    blockHash: new Uint8Array(),
    totalEvents: 0,
    eventCountsByType: {}
  };
}
var BlockConfirmedBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.blockNumber !== 0) {
      writer.uint32(8).uint64(message.blockNumber);
    }
    if (message.shardIndex !== 0) {
      writer.uint32(16).uint32(message.shardIndex);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint64(message.timestamp);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(34).bytes(message.blockHash);
    }
    if (message.totalEvents !== 0) {
      writer.uint32(40).uint64(message.totalEvents);
    }
    Object.entries(message.eventCountsByType).forEach(([key, value]) => {
      BlockConfirmedBody_EventCountsByTypeEntry.encode({ key, value }, writer.uint32(50).fork()).ldelim();
    });
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockConfirmedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.blockNumber = longToNumber5(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.timestamp = longToNumber5(reader.uint64());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.blockHash = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.totalEvents = longToNumber5(reader.uint64());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          const entry6 = BlockConfirmedBody_EventCountsByTypeEntry.decode(reader, reader.uint32());
          if (entry6.value !== void 0) {
            message.eventCountsByType[entry6.key] = entry6.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      blockNumber: isSet5(object.blockNumber) ? Number(object.blockNumber) : 0,
      shardIndex: isSet5(object.shardIndex) ? Number(object.shardIndex) : 0,
      timestamp: isSet5(object.timestamp) ? Number(object.timestamp) : 0,
      blockHash: isSet5(object.blockHash) ? bytesFromBase645(object.blockHash) : new Uint8Array(),
      totalEvents: isSet5(object.totalEvents) ? Number(object.totalEvents) : 0,
      eventCountsByType: isObject(object.eventCountsByType) ? Object.entries(object.eventCountsByType).reduce((acc, [key, value]) => {
        acc[Number(key)] = Number(value);
        return acc;
      }, {}) : {}
    };
  },
  toJSON(message) {
    const obj = {};
    message.blockNumber !== void 0 && (obj.blockNumber = Math.round(message.blockNumber));
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.blockHash !== void 0 && (obj.blockHash = base64FromBytes5(message.blockHash !== void 0 ? message.blockHash : new Uint8Array()));
    message.totalEvents !== void 0 && (obj.totalEvents = Math.round(message.totalEvents));
    obj.eventCountsByType = {};
    if (message.eventCountsByType) {
      Object.entries(message.eventCountsByType).forEach(([k, v]) => {
        obj.eventCountsByType[k] = Math.round(v);
      });
    }
    return obj;
  },
  create(base) {
    return BlockConfirmedBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockConfirmedBody();
    message.blockNumber = object.blockNumber ?? 0;
    message.shardIndex = object.shardIndex ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.blockHash = object.blockHash ?? new Uint8Array();
    message.totalEvents = object.totalEvents ?? 0;
    message.eventCountsByType = Object.entries(object.eventCountsByType ?? {}).reduce(
      (acc, [key, value]) => {
        if (value !== void 0) {
          acc[Number(key)] = Number(value);
        }
        return acc;
      },
      {}
    );
    return message;
  }
};
function createBaseBlockConfirmedBody_EventCountsByTypeEntry() {
  return { key: 0, value: 0 };
}
var BlockConfirmedBody_EventCountsByTypeEntry = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockConfirmedBody_EventCountsByTypeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.key = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.value = longToNumber5(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet5(object.key) ? Number(object.key) : 0, value: isSet5(object.value) ? Number(object.value) : 0 };
  },
  toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = Math.round(message.key));
    message.value !== void 0 && (obj.value = Math.round(message.value));
    return obj;
  },
  create(base) {
    return BlockConfirmedBody_EventCountsByTypeEntry.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockConfirmedBody_EventCountsByTypeEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  }
};
function createBaseMergeOnChainEventBody() {
  return { onChainEvent: void 0 };
}
var MergeOnChainEventBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.onChainEvent !== void 0) {
      OnChainEvent.encode(message.onChainEvent, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeOnChainEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.onChainEvent = OnChainEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { onChainEvent: isSet5(object.onChainEvent) ? OnChainEvent.fromJSON(object.onChainEvent) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.onChainEvent !== void 0 && (obj.onChainEvent = message.onChainEvent ? OnChainEvent.toJSON(message.onChainEvent) : void 0);
    return obj;
  },
  create(base) {
    return MergeOnChainEventBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMergeOnChainEventBody();
    message.onChainEvent = object.onChainEvent !== void 0 && object.onChainEvent !== null ? OnChainEvent.fromPartial(object.onChainEvent) : void 0;
    return message;
  }
};
function createBaseMergeUserNameProofBody() {
  return {
    usernameProof: void 0,
    deletedUsernameProof: void 0,
    usernameProofMessage: void 0,
    deletedUsernameProofMessage: void 0
  };
}
var MergeUserNameProofBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.usernameProof !== void 0) {
      UserNameProof.encode(message.usernameProof, writer.uint32(10).fork()).ldelim();
    }
    if (message.deletedUsernameProof !== void 0) {
      UserNameProof.encode(message.deletedUsernameProof, writer.uint32(18).fork()).ldelim();
    }
    if (message.usernameProofMessage !== void 0) {
      Message.encode(message.usernameProofMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.deletedUsernameProofMessage !== void 0) {
      Message.encode(message.deletedUsernameProofMessage, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeUserNameProofBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.usernameProof = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.deletedUsernameProof = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.usernameProofMessage = Message.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.deletedUsernameProofMessage = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      usernameProof: isSet5(object.usernameProof) ? UserNameProof.fromJSON(object.usernameProof) : void 0,
      deletedUsernameProof: isSet5(object.deletedUsernameProof) ? UserNameProof.fromJSON(object.deletedUsernameProof) : void 0,
      usernameProofMessage: isSet5(object.usernameProofMessage) ? Message.fromJSON(object.usernameProofMessage) : void 0,
      deletedUsernameProofMessage: isSet5(object.deletedUsernameProofMessage) ? Message.fromJSON(object.deletedUsernameProofMessage) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.usernameProof !== void 0 && (obj.usernameProof = message.usernameProof ? UserNameProof.toJSON(message.usernameProof) : void 0);
    message.deletedUsernameProof !== void 0 && (obj.deletedUsernameProof = message.deletedUsernameProof ? UserNameProof.toJSON(message.deletedUsernameProof) : void 0);
    message.usernameProofMessage !== void 0 && (obj.usernameProofMessage = message.usernameProofMessage ? Message.toJSON(message.usernameProofMessage) : void 0);
    message.deletedUsernameProofMessage !== void 0 && (obj.deletedUsernameProofMessage = message.deletedUsernameProofMessage ? Message.toJSON(message.deletedUsernameProofMessage) : void 0);
    return obj;
  },
  create(base) {
    return MergeUserNameProofBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMergeUserNameProofBody();
    message.usernameProof = object.usernameProof !== void 0 && object.usernameProof !== null ? UserNameProof.fromPartial(object.usernameProof) : void 0;
    message.deletedUsernameProof = object.deletedUsernameProof !== void 0 && object.deletedUsernameProof !== null ? UserNameProof.fromPartial(object.deletedUsernameProof) : void 0;
    message.usernameProofMessage = object.usernameProofMessage !== void 0 && object.usernameProofMessage !== null ? Message.fromPartial(object.usernameProofMessage) : void 0;
    message.deletedUsernameProofMessage = object.deletedUsernameProofMessage !== void 0 && object.deletedUsernameProofMessage !== null ? Message.fromPartial(object.deletedUsernameProofMessage) : void 0;
    return message;
  }
};
function createBaseHubEvent() {
  return {
    type: 0,
    id: 0,
    mergeMessageBody: void 0,
    pruneMessageBody: void 0,
    revokeMessageBody: void 0,
    mergeUsernameProofBody: void 0,
    mergeOnChainEventBody: void 0,
    mergeFailure: void 0,
    blockConfirmedBody: void 0,
    blockNumber: 0,
    shardIndex: 0,
    timestamp: 0
  };
}
var HubEvent = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.mergeMessageBody !== void 0) {
      MergeMessageBody.encode(message.mergeMessageBody, writer.uint32(26).fork()).ldelim();
    }
    if (message.pruneMessageBody !== void 0) {
      PruneMessageBody.encode(message.pruneMessageBody, writer.uint32(34).fork()).ldelim();
    }
    if (message.revokeMessageBody !== void 0) {
      RevokeMessageBody.encode(message.revokeMessageBody, writer.uint32(42).fork()).ldelim();
    }
    if (message.mergeUsernameProofBody !== void 0) {
      MergeUserNameProofBody.encode(message.mergeUsernameProofBody, writer.uint32(66).fork()).ldelim();
    }
    if (message.mergeOnChainEventBody !== void 0) {
      MergeOnChainEventBody.encode(message.mergeOnChainEventBody, writer.uint32(90).fork()).ldelim();
    }
    if (message.mergeFailure !== void 0) {
      MergeFailureBody.encode(message.mergeFailure, writer.uint32(106).fork()).ldelim();
    }
    if (message.blockConfirmedBody !== void 0) {
      BlockConfirmedBody.encode(message.blockConfirmedBody, writer.uint32(130).fork()).ldelim();
    }
    if (message.blockNumber !== 0) {
      writer.uint32(96).uint64(message.blockNumber);
    }
    if (message.shardIndex !== 0) {
      writer.uint32(112).uint32(message.shardIndex);
    }
    if (message.timestamp !== 0) {
      writer.uint32(120).uint64(message.timestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHubEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.id = longToNumber5(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.mergeMessageBody = MergeMessageBody.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pruneMessageBody = PruneMessageBody.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.revokeMessageBody = RevokeMessageBody.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }
          message.mergeUsernameProofBody = MergeUserNameProofBody.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }
          message.mergeOnChainEventBody = MergeOnChainEventBody.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }
          message.mergeFailure = MergeFailureBody.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }
          message.blockConfirmedBody = BlockConfirmedBody.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 96) {
            break;
          }
          message.blockNumber = longToNumber5(reader.uint64());
          continue;
        case 14:
          if (tag != 112) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
        case 15:
          if (tag != 120) {
            break;
          }
          message.timestamp = longToNumber5(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet5(object.type) ? hubEventTypeFromJSON(object.type) : 0,
      id: isSet5(object.id) ? Number(object.id) : 0,
      mergeMessageBody: isSet5(object.mergeMessageBody) ? MergeMessageBody.fromJSON(object.mergeMessageBody) : void 0,
      pruneMessageBody: isSet5(object.pruneMessageBody) ? PruneMessageBody.fromJSON(object.pruneMessageBody) : void 0,
      revokeMessageBody: isSet5(object.revokeMessageBody) ? RevokeMessageBody.fromJSON(object.revokeMessageBody) : void 0,
      mergeUsernameProofBody: isSet5(object.mergeUsernameProofBody) ? MergeUserNameProofBody.fromJSON(object.mergeUsernameProofBody) : void 0,
      mergeOnChainEventBody: isSet5(object.mergeOnChainEventBody) ? MergeOnChainEventBody.fromJSON(object.mergeOnChainEventBody) : void 0,
      mergeFailure: isSet5(object.mergeFailure) ? MergeFailureBody.fromJSON(object.mergeFailure) : void 0,
      blockConfirmedBody: isSet5(object.blockConfirmedBody) ? BlockConfirmedBody.fromJSON(object.blockConfirmedBody) : void 0,
      blockNumber: isSet5(object.blockNumber) ? Number(object.blockNumber) : 0,
      shardIndex: isSet5(object.shardIndex) ? Number(object.shardIndex) : 0,
      timestamp: isSet5(object.timestamp) ? Number(object.timestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = hubEventTypeToJSON(message.type));
    message.id !== void 0 && (obj.id = Math.round(message.id));
    message.mergeMessageBody !== void 0 && (obj.mergeMessageBody = message.mergeMessageBody ? MergeMessageBody.toJSON(message.mergeMessageBody) : void 0);
    message.pruneMessageBody !== void 0 && (obj.pruneMessageBody = message.pruneMessageBody ? PruneMessageBody.toJSON(message.pruneMessageBody) : void 0);
    message.revokeMessageBody !== void 0 && (obj.revokeMessageBody = message.revokeMessageBody ? RevokeMessageBody.toJSON(message.revokeMessageBody) : void 0);
    message.mergeUsernameProofBody !== void 0 && (obj.mergeUsernameProofBody = message.mergeUsernameProofBody ? MergeUserNameProofBody.toJSON(message.mergeUsernameProofBody) : void 0);
    message.mergeOnChainEventBody !== void 0 && (obj.mergeOnChainEventBody = message.mergeOnChainEventBody ? MergeOnChainEventBody.toJSON(message.mergeOnChainEventBody) : void 0);
    message.mergeFailure !== void 0 && (obj.mergeFailure = message.mergeFailure ? MergeFailureBody.toJSON(message.mergeFailure) : void 0);
    message.blockConfirmedBody !== void 0 && (obj.blockConfirmedBody = message.blockConfirmedBody ? BlockConfirmedBody.toJSON(message.blockConfirmedBody) : void 0);
    message.blockNumber !== void 0 && (obj.blockNumber = Math.round(message.blockNumber));
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    return obj;
  },
  create(base) {
    return HubEvent.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseHubEvent();
    message.type = object.type ?? 0;
    message.id = object.id ?? 0;
    message.mergeMessageBody = object.mergeMessageBody !== void 0 && object.mergeMessageBody !== null ? MergeMessageBody.fromPartial(object.mergeMessageBody) : void 0;
    message.pruneMessageBody = object.pruneMessageBody !== void 0 && object.pruneMessageBody !== null ? PruneMessageBody.fromPartial(object.pruneMessageBody) : void 0;
    message.revokeMessageBody = object.revokeMessageBody !== void 0 && object.revokeMessageBody !== null ? RevokeMessageBody.fromPartial(object.revokeMessageBody) : void 0;
    message.mergeUsernameProofBody = object.mergeUsernameProofBody !== void 0 && object.mergeUsernameProofBody !== null ? MergeUserNameProofBody.fromPartial(object.mergeUsernameProofBody) : void 0;
    message.mergeOnChainEventBody = object.mergeOnChainEventBody !== void 0 && object.mergeOnChainEventBody !== null ? MergeOnChainEventBody.fromPartial(object.mergeOnChainEventBody) : void 0;
    message.mergeFailure = object.mergeFailure !== void 0 && object.mergeFailure !== null ? MergeFailureBody.fromPartial(object.mergeFailure) : void 0;
    message.blockConfirmedBody = object.blockConfirmedBody !== void 0 && object.blockConfirmedBody !== null ? BlockConfirmedBody.fromPartial(object.blockConfirmedBody) : void 0;
    message.blockNumber = object.blockNumber ?? 0;
    message.shardIndex = object.shardIndex ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  }
};
var tsProtoGlobalThis5 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase645(b64) {
  if (tsProtoGlobalThis5.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis5.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis5.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes5(arr) {
  if (tsProtoGlobalThis5.Buffer) {
    return tsProtoGlobalThis5.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis5.btoa(bin.join(""));
  }
}
function longToNumber5(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis5.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal5.default.util.Long !== import_long5.default) {
  import_minimal5.default.util.Long = import_long5.default;
  import_minimal5.default.configure();
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function isSet5(value) {
  return value !== null && value !== void 0;
}

// src/generated/request_response.ts
init_cjs_shims();
var import_long7 = __toESM(require_long());
var import_minimal7 = __toESM(require_minimal2());

// src/generated/gossip.ts
init_cjs_shims();
var import_long6 = __toESM(require_long());
var import_minimal6 = __toESM(require_minimal2());
function createBaseContactInfoBody() {
  return { gossipAddress: "", peerId: new Uint8Array(), snapchainVersion: "", network: 0, timestamp: 0 };
}
var ContactInfoBody = {
  encode(message, writer = import_minimal6.default.Writer.create()) {
    if (message.gossipAddress !== "") {
      writer.uint32(10).string(message.gossipAddress);
    }
    if (message.peerId.length !== 0) {
      writer.uint32(18).bytes(message.peerId);
    }
    if (message.snapchainVersion !== "") {
      writer.uint32(26).string(message.snapchainVersion);
    }
    if (message.network !== 0) {
      writer.uint32(32).int32(message.network);
    }
    if (message.timestamp !== 0) {
      writer.uint32(40).uint64(message.timestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseContactInfoBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.gossipAddress = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.peerId = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.snapchainVersion = reader.string();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.network = reader.int32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.timestamp = longToNumber6(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gossipAddress: isSet6(object.gossipAddress) ? String(object.gossipAddress) : "",
      peerId: isSet6(object.peerId) ? bytesFromBase646(object.peerId) : new Uint8Array(),
      snapchainVersion: isSet6(object.snapchainVersion) ? String(object.snapchainVersion) : "",
      network: isSet6(object.network) ? farcasterNetworkFromJSON(object.network) : 0,
      timestamp: isSet6(object.timestamp) ? Number(object.timestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.gossipAddress !== void 0 && (obj.gossipAddress = message.gossipAddress);
    message.peerId !== void 0 && (obj.peerId = base64FromBytes6(message.peerId !== void 0 ? message.peerId : new Uint8Array()));
    message.snapchainVersion !== void 0 && (obj.snapchainVersion = message.snapchainVersion);
    message.network !== void 0 && (obj.network = farcasterNetworkToJSON(message.network));
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    return obj;
  },
  create(base) {
    return ContactInfoBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseContactInfoBody();
    message.gossipAddress = object.gossipAddress ?? "";
    message.peerId = object.peerId ?? new Uint8Array();
    message.snapchainVersion = object.snapchainVersion ?? "";
    message.network = object.network ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  }
};
var tsProtoGlobalThis6 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase646(b64) {
  if (tsProtoGlobalThis6.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis6.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis6.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes6(arr) {
  if (tsProtoGlobalThis6.Buffer) {
    return tsProtoGlobalThis6.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis6.btoa(bin.join(""));
  }
}
function longToNumber6(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis6.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal6.default.util.Long !== import_long6.default) {
  import_minimal6.default.util.Long = import_long6.default;
  import_minimal6.default.configure();
}
function isSet6(value) {
  return value !== null && value !== void 0;
}

// src/generated/request_response.ts
function storeTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "STORE_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "STORE_TYPE_CASTS":
      return 1 /* CASTS */;
    case 2:
    case "STORE_TYPE_LINKS":
      return 2 /* LINKS */;
    case 3:
    case "STORE_TYPE_REACTIONS":
      return 3 /* REACTIONS */;
    case 4:
    case "STORE_TYPE_USER_DATA":
      return 4 /* USER_DATA */;
    case 5:
    case "STORE_TYPE_VERIFICATIONS":
      return 5 /* VERIFICATIONS */;
    case 6:
    case "STORE_TYPE_USERNAME_PROOFS":
      return 6 /* USERNAME_PROOFS */;
    default:
      throw new tsProtoGlobalThis7.Error("Unrecognized enum value " + object + " for enum StoreType");
  }
}
function storeTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "STORE_TYPE_NONE";
    case 1 /* CASTS */:
      return "STORE_TYPE_CASTS";
    case 2 /* LINKS */:
      return "STORE_TYPE_LINKS";
    case 3 /* REACTIONS */:
      return "STORE_TYPE_REACTIONS";
    case 4 /* USER_DATA */:
      return "STORE_TYPE_USER_DATA";
    case 5 /* VERIFICATIONS */:
      return "STORE_TYPE_VERIFICATIONS";
    case 6 /* USERNAME_PROOFS */:
      return "STORE_TYPE_USERNAME_PROOFS";
    default:
      throw new tsProtoGlobalThis7.Error("Unrecognized enum value " + object + " for enum StoreType");
  }
}
function storageUnitTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "UNIT_TYPE_LEGACY":
      return 0 /* UNIT_TYPE_LEGACY */;
    case 1:
    case "UNIT_TYPE_2024":
      return 1 /* UNIT_TYPE_2024 */;
    case 2:
    case "UNIT_TYPE_2025":
      return 2 /* UNIT_TYPE_2025 */;
    default:
      throw new tsProtoGlobalThis7.Error("Unrecognized enum value " + object + " for enum StorageUnitType");
  }
}
function storageUnitTypeToJSON(object) {
  switch (object) {
    case 0 /* UNIT_TYPE_LEGACY */:
      return "UNIT_TYPE_LEGACY";
    case 1 /* UNIT_TYPE_2024 */:
      return "UNIT_TYPE_2024";
    case 2 /* UNIT_TYPE_2025 */:
      return "UNIT_TYPE_2025";
    default:
      throw new tsProtoGlobalThis7.Error("Unrecognized enum value " + object + " for enum StorageUnitType");
  }
}
function createBaseBlocksRequest() {
  return { shardId: 0, startBlockNumber: 0, stopBlockNumber: void 0 };
}
var BlocksRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.shardId !== 0) {
      writer.uint32(8).uint32(message.shardId);
    }
    if (message.startBlockNumber !== 0) {
      writer.uint32(16).uint64(message.startBlockNumber);
    }
    if (message.stopBlockNumber !== void 0) {
      writer.uint32(24).uint64(message.stopBlockNumber);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlocksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.startBlockNumber = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.stopBlockNumber = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardId: isSet7(object.shardId) ? Number(object.shardId) : 0,
      startBlockNumber: isSet7(object.startBlockNumber) ? Number(object.startBlockNumber) : 0,
      stopBlockNumber: isSet7(object.stopBlockNumber) ? Number(object.stopBlockNumber) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardId !== void 0 && (obj.shardId = Math.round(message.shardId));
    message.startBlockNumber !== void 0 && (obj.startBlockNumber = Math.round(message.startBlockNumber));
    message.stopBlockNumber !== void 0 && (obj.stopBlockNumber = Math.round(message.stopBlockNumber));
    return obj;
  },
  create(base) {
    return BlocksRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlocksRequest();
    message.shardId = object.shardId ?? 0;
    message.startBlockNumber = object.startBlockNumber ?? 0;
    message.stopBlockNumber = object.stopBlockNumber ?? void 0;
    return message;
  }
};
function createBaseShardChunksRequest() {
  return { shardId: 0, startBlockNumber: 0, stopBlockNumber: void 0 };
}
var ShardChunksRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.shardId !== 0) {
      writer.uint32(8).uint32(message.shardId);
    }
    if (message.startBlockNumber !== 0) {
      writer.uint32(16).uint64(message.startBlockNumber);
    }
    if (message.stopBlockNumber !== void 0) {
      writer.uint32(24).uint64(message.stopBlockNumber);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardChunksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.startBlockNumber = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.stopBlockNumber = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardId: isSet7(object.shardId) ? Number(object.shardId) : 0,
      startBlockNumber: isSet7(object.startBlockNumber) ? Number(object.startBlockNumber) : 0,
      stopBlockNumber: isSet7(object.stopBlockNumber) ? Number(object.stopBlockNumber) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardId !== void 0 && (obj.shardId = Math.round(message.shardId));
    message.startBlockNumber !== void 0 && (obj.startBlockNumber = Math.round(message.startBlockNumber));
    message.stopBlockNumber !== void 0 && (obj.stopBlockNumber = Math.round(message.stopBlockNumber));
    return obj;
  },
  create(base) {
    return ShardChunksRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseShardChunksRequest();
    message.shardId = object.shardId ?? 0;
    message.startBlockNumber = object.startBlockNumber ?? 0;
    message.stopBlockNumber = object.stopBlockNumber ?? void 0;
    return message;
  }
};
function createBaseShardChunksResponse() {
  return { shardChunks: [] };
}
var ShardChunksResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.shardChunks) {
      ShardChunk.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardChunksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.shardChunks.push(ShardChunk.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardChunks: Array.isArray(object == null ? void 0 : object.shardChunks) ? object.shardChunks.map((e) => ShardChunk.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.shardChunks) {
      obj.shardChunks = message.shardChunks.map((e) => e ? ShardChunk.toJSON(e) : void 0);
    } else {
      obj.shardChunks = [];
    }
    return obj;
  },
  create(base) {
    return ShardChunksResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseShardChunksResponse();
    message.shardChunks = ((_a = object.shardChunks) == null ? void 0 : _a.map((e) => ShardChunk.fromPartial(e))) || [];
    return message;
  }
};
function createBaseSubscribeRequest() {
  return { eventTypes: [], fromId: void 0, shardIndex: void 0 };
}
var SubscribeRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.eventTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.fromId !== void 0) {
      writer.uint32(16).uint64(message.fromId);
    }
    if (message.shardIndex !== void 0) {
      writer.uint32(32).uint32(message.shardIndex);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag == 8) {
            message.eventTypes.push(reader.int32());
            continue;
          }
          if (tag == 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.eventTypes.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag != 16) {
            break;
          }
          message.fromId = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      eventTypes: Array.isArray(object == null ? void 0 : object.eventTypes) ? object.eventTypes.map((e) => hubEventTypeFromJSON(e)) : [],
      fromId: isSet7(object.fromId) ? Number(object.fromId) : void 0,
      shardIndex: isSet7(object.shardIndex) ? Number(object.shardIndex) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.eventTypes) {
      obj.eventTypes = message.eventTypes.map((e) => hubEventTypeToJSON(e));
    } else {
      obj.eventTypes = [];
    }
    message.fromId !== void 0 && (obj.fromId = Math.round(message.fromId));
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    return obj;
  },
  create(base) {
    return SubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSubscribeRequest();
    message.eventTypes = ((_a = object.eventTypes) == null ? void 0 : _a.map((e) => e)) || [];
    message.fromId = object.fromId ?? void 0;
    message.shardIndex = object.shardIndex ?? void 0;
    return message;
  }
};
function createBaseDbStats() {
  return { numMessages: 0, numFidRegistrations: 0, approxSize: 0 };
}
var DbStats = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.numMessages !== 0) {
      writer.uint32(8).uint64(message.numMessages);
    }
    if (message.numFidRegistrations !== 0) {
      writer.uint32(16).uint64(message.numFidRegistrations);
    }
    if (message.approxSize !== 0) {
      writer.uint32(32).uint64(message.approxSize);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDbStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.numFidRegistrations = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.approxSize = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      numMessages: isSet7(object.numMessages) ? Number(object.numMessages) : 0,
      numFidRegistrations: isSet7(object.numFidRegistrations) ? Number(object.numFidRegistrations) : 0,
      approxSize: isSet7(object.approxSize) ? Number(object.approxSize) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.numFidRegistrations !== void 0 && (obj.numFidRegistrations = Math.round(message.numFidRegistrations));
    message.approxSize !== void 0 && (obj.approxSize = Math.round(message.approxSize));
    return obj;
  },
  create(base) {
    return DbStats.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDbStats();
    message.numMessages = object.numMessages ?? 0;
    message.numFidRegistrations = object.numFidRegistrations ?? 0;
    message.approxSize = object.approxSize ?? 0;
    return message;
  }
};
function createBaseShardInfo() {
  return {
    shardId: 0,
    maxHeight: 0,
    numMessages: 0,
    numFidRegistrations: 0,
    approxSize: 0,
    blockDelay: 0,
    mempoolSize: 0
  };
}
var ShardInfo = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.shardId !== 0) {
      writer.uint32(8).uint32(message.shardId);
    }
    if (message.maxHeight !== 0) {
      writer.uint32(16).uint64(message.maxHeight);
    }
    if (message.numMessages !== 0) {
      writer.uint32(24).uint64(message.numMessages);
    }
    if (message.numFidRegistrations !== 0) {
      writer.uint32(32).uint64(message.numFidRegistrations);
    }
    if (message.approxSize !== 0) {
      writer.uint32(40).uint64(message.approxSize);
    }
    if (message.blockDelay !== 0) {
      writer.uint32(48).uint64(message.blockDelay);
    }
    if (message.mempoolSize !== 0) {
      writer.uint32(56).uint64(message.mempoolSize);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseShardInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.maxHeight = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.numFidRegistrations = longToNumber7(reader.uint64());
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.approxSize = longToNumber7(reader.uint64());
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.blockDelay = longToNumber7(reader.uint64());
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.mempoolSize = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardId: isSet7(object.shardId) ? Number(object.shardId) : 0,
      maxHeight: isSet7(object.maxHeight) ? Number(object.maxHeight) : 0,
      numMessages: isSet7(object.numMessages) ? Number(object.numMessages) : 0,
      numFidRegistrations: isSet7(object.numFidRegistrations) ? Number(object.numFidRegistrations) : 0,
      approxSize: isSet7(object.approxSize) ? Number(object.approxSize) : 0,
      blockDelay: isSet7(object.blockDelay) ? Number(object.blockDelay) : 0,
      mempoolSize: isSet7(object.mempoolSize) ? Number(object.mempoolSize) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardId !== void 0 && (obj.shardId = Math.round(message.shardId));
    message.maxHeight !== void 0 && (obj.maxHeight = Math.round(message.maxHeight));
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.numFidRegistrations !== void 0 && (obj.numFidRegistrations = Math.round(message.numFidRegistrations));
    message.approxSize !== void 0 && (obj.approxSize = Math.round(message.approxSize));
    message.blockDelay !== void 0 && (obj.blockDelay = Math.round(message.blockDelay));
    message.mempoolSize !== void 0 && (obj.mempoolSize = Math.round(message.mempoolSize));
    return obj;
  },
  create(base) {
    return ShardInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseShardInfo();
    message.shardId = object.shardId ?? 0;
    message.maxHeight = object.maxHeight ?? 0;
    message.numMessages = object.numMessages ?? 0;
    message.numFidRegistrations = object.numFidRegistrations ?? 0;
    message.approxSize = object.approxSize ?? 0;
    message.blockDelay = object.blockDelay ?? 0;
    message.mempoolSize = object.mempoolSize ?? 0;
    return message;
  }
};
function createBaseGetInfoRequest() {
  return {};
}
var GetInfoRequest = {
  encode(_, writer = import_minimal7.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetInfoRequest();
    return message;
  }
};
function createBaseGetInfoResponse() {
  return { version: "", dbStats: void 0, peerId: "", numShards: 0, shardInfos: [] };
}
var GetInfoResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.dbStats !== void 0) {
      DbStats.encode(message.dbStats, writer.uint32(42).fork()).ldelim();
    }
    if (message.peerId !== "") {
      writer.uint32(50).string(message.peerId);
    }
    if (message.numShards !== 0) {
      writer.uint32(64).uint32(message.numShards);
    }
    for (const v of message.shardInfos) {
      ShardInfo.encode(v, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.version = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.dbStats = DbStats.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.peerId = reader.string();
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.numShards = reader.uint32();
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.shardInfos.push(ShardInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet7(object.version) ? String(object.version) : "",
      dbStats: isSet7(object.dbStats) ? DbStats.fromJSON(object.dbStats) : void 0,
      peerId: isSet7(object.peerId) ? String(object.peerId) : "",
      numShards: isSet7(object.numShards) ? Number(object.numShards) : 0,
      shardInfos: Array.isArray(object == null ? void 0 : object.shardInfos) ? object.shardInfos.map((e) => ShardInfo.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.version !== void 0 && (obj.version = message.version);
    message.dbStats !== void 0 && (obj.dbStats = message.dbStats ? DbStats.toJSON(message.dbStats) : void 0);
    message.peerId !== void 0 && (obj.peerId = message.peerId);
    message.numShards !== void 0 && (obj.numShards = Math.round(message.numShards));
    if (message.shardInfos) {
      obj.shardInfos = message.shardInfos.map((e) => e ? ShardInfo.toJSON(e) : void 0);
    } else {
      obj.shardInfos = [];
    }
    return obj;
  },
  create(base) {
    return GetInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetInfoResponse();
    message.version = object.version ?? "";
    message.dbStats = object.dbStats !== void 0 && object.dbStats !== null ? DbStats.fromPartial(object.dbStats) : void 0;
    message.peerId = object.peerId ?? "";
    message.numShards = object.numShards ?? 0;
    message.shardInfos = ((_a = object.shardInfos) == null ? void 0 : _a.map((e) => ShardInfo.fromPartial(e))) || [];
    return message;
  }
};
function createBaseEventRequest() {
  return { id: 0, shardIndex: 0 };
}
var EventRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.shardIndex !== 0) {
      writer.uint32(40).uint32(message.shardIndex);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.id = longToNumber7(reader.uint64());
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet7(object.id) ? Number(object.id) : 0,
      shardIndex: isSet7(object.shardIndex) ? Number(object.shardIndex) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.id !== void 0 && (obj.id = Math.round(message.id));
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    return obj;
  },
  create(base) {
    return EventRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventRequest();
    message.id = object.id ?? 0;
    message.shardIndex = object.shardIndex ?? 0;
    return message;
  }
};
function createBaseFidRequest() {
  return { fid: 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var FidRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(26).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(32).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return FidRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFidRequest();
    message.fid = object.fid ?? 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseFidTimestampRequest() {
  return {
    fid: 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0,
    startTimestamp: void 0,
    stopTimestamp: void 0
  };
}
var FidTimestampRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(26).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(32).bool(message.reverse);
    }
    if (message.startTimestamp !== void 0) {
      writer.uint32(40).uint64(message.startTimestamp);
    }
    if (message.stopTimestamp !== void 0) {
      writer.uint32(48).uint64(message.stopTimestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidTimestampRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.reverse = reader.bool();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.startTimestamp = longToNumber7(reader.uint64());
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.stopTimestamp = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0,
      startTimestamp: isSet7(object.startTimestamp) ? Number(object.startTimestamp) : void 0,
      stopTimestamp: isSet7(object.stopTimestamp) ? Number(object.stopTimestamp) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    message.startTimestamp !== void 0 && (obj.startTimestamp = Math.round(message.startTimestamp));
    message.stopTimestamp !== void 0 && (obj.stopTimestamp = Math.round(message.stopTimestamp));
    return obj;
  },
  create(base) {
    return FidTimestampRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFidTimestampRequest();
    message.fid = object.fid ?? 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    message.startTimestamp = object.startTimestamp ?? void 0;
    message.stopTimestamp = object.stopTimestamp ?? void 0;
    return message;
  }
};
function createBaseFidsRequest() {
  return { pageSize: void 0, pageToken: void 0, reverse: void 0, shardId: 0 };
}
var FidsRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.pageSize !== void 0) {
      writer.uint32(8).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(18).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(24).bool(message.reverse);
    }
    if (message.shardId !== 0) {
      writer.uint32(32).uint32(message.shardId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.reverse = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.shardId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0,
      shardId: isSet7(object.shardId) ? Number(object.shardId) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    message.shardId !== void 0 && (obj.shardId = Math.round(message.shardId));
    return obj;
  },
  create(base) {
    return FidsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFidsRequest();
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    message.shardId = object.shardId ?? 0;
    return message;
  }
};
function createBaseFidsResponse() {
  return { fids: [], nextPageToken: void 0 };
}
var FidsResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.fids) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag == 8) {
            message.fids.push(longToNumber7(reader.uint64()));
            continue;
          }
          if (tag == 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.fids.push(longToNumber7(reader.uint64()));
            }
            continue;
          }
          break;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fids: Array.isArray(object == null ? void 0 : object.fids) ? object.fids.map((e) => Number(e)) : [],
      nextPageToken: isSet7(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.fids) {
      obj.fids = message.fids.map((e) => Math.round(e));
    } else {
      obj.fids = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return FidsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFidsResponse();
    message.fids = ((_a = object.fids) == null ? void 0 : _a.map((e) => e)) || [];
    message.nextPageToken = object.nextPageToken ?? void 0;
    return message;
  }
};
function createBaseMessagesResponse() {
  return { messages: [], nextPageToken: void 0 };
}
var MessagesResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.messages) {
      Message.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      messages: Array.isArray(object == null ? void 0 : object.messages) ? object.messages.map((e) => Message.fromJSON(e)) : [],
      nextPageToken: isSet7(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.messages) {
      obj.messages = message.messages.map((e) => e ? Message.toJSON(e) : void 0);
    } else {
      obj.messages = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return MessagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMessagesResponse();
    message.messages = ((_a = object.messages) == null ? void 0 : _a.map((e) => Message.fromPartial(e))) || [];
    message.nextPageToken = object.nextPageToken ?? void 0;
    return message;
  }
};
function createBaseCastsByParentRequest() {
  return {
    parentCastId: void 0,
    parentUrl: void 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0
  };
}
var CastsByParentRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.parentCastId !== void 0) {
      CastId.encode(message.parentCastId, writer.uint32(10).fork()).ldelim();
    }
    if (message.parentUrl !== void 0) {
      writer.uint32(42).string(message.parentUrl);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(26).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(32).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastsByParentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.parentCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.parentUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      parentCastId: isSet7(object.parentCastId) ? CastId.fromJSON(object.parentCastId) : void 0,
      parentUrl: isSet7(object.parentUrl) ? String(object.parentUrl) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.parentCastId !== void 0 && (obj.parentCastId = message.parentCastId ? CastId.toJSON(message.parentCastId) : void 0);
    message.parentUrl !== void 0 && (obj.parentUrl = message.parentUrl);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return CastsByParentRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCastsByParentRequest();
    message.parentCastId = object.parentCastId !== void 0 && object.parentCastId !== null ? CastId.fromPartial(object.parentCastId) : void 0;
    message.parentUrl = object.parentUrl ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseReactionRequest() {
  return { fid: 0, reactionType: 0, targetCastId: void 0, targetUrl: void 0 };
}
var ReactionRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.reactionType !== 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(26).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(34).string(message.targetUrl);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      reactionType: isSet7(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : 0,
      targetCastId: isSet7(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet7(object.targetUrl) ? String(object.targetUrl) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.reactionType !== void 0 && (obj.reactionType = reactionTypeToJSON(message.reactionType));
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    return obj;
  },
  create(base) {
    return ReactionRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseReactionRequest();
    message.fid = object.fid ?? 0;
    message.reactionType = object.reactionType ?? 0;
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = object.targetUrl ?? void 0;
    return message;
  }
};
function createBaseReactionsByFidRequest() {
  return { fid: 0, reactionType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var ReactionsByFidRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.reactionType !== void 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionsByFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      reactionType: isSet7(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.reactionType !== void 0 && (obj.reactionType = message.reactionType !== void 0 ? reactionTypeToJSON(message.reactionType) : void 0);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return ReactionsByFidRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseReactionsByFidRequest();
    message.fid = object.fid ?? 0;
    message.reactionType = object.reactionType ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseReactionsByTargetRequest() {
  return {
    targetCastId: void 0,
    targetUrl: void 0,
    reactionType: void 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0
  };
}
var ReactionsByTargetRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(10).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(50).string(message.targetUrl);
    }
    if (message.reactionType !== void 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionsByTargetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      targetCastId: isSet7(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet7(object.targetUrl) ? String(object.targetUrl) : void 0,
      reactionType: isSet7(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    message.reactionType !== void 0 && (obj.reactionType = message.reactionType !== void 0 ? reactionTypeToJSON(message.reactionType) : void 0);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return ReactionsByTargetRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseReactionsByTargetRequest();
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = object.targetUrl ?? void 0;
    message.reactionType = object.reactionType ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseUserDataRequest() {
  return { fid: 0, userDataType: 0 };
}
var UserDataRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.userDataType !== 0) {
      writer.uint32(16).int32(message.userDataType);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.userDataType = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      userDataType: isSet7(object.userDataType) ? userDataTypeFromJSON(object.userDataType) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.userDataType !== void 0 && (obj.userDataType = userDataTypeToJSON(message.userDataType));
    return obj;
  },
  create(base) {
    return UserDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUserDataRequest();
    message.fid = object.fid ?? 0;
    message.userDataType = object.userDataType ?? 0;
    return message;
  }
};
function createBaseOnChainEventRequest() {
  return { fid: 0, eventType: 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var OnChainEventRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      eventType: isSet7(object.eventType) ? onChainEventTypeFromJSON(object.eventType) : 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.eventType !== void 0 && (obj.eventType = onChainEventTypeToJSON(message.eventType));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return OnChainEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOnChainEventRequest();
    message.fid = object.fid ?? 0;
    message.eventType = object.eventType ?? 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseOnChainEventResponse() {
  return { events: [], nextPageToken: void 0 };
}
var OnChainEventResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.events) {
      OnChainEvent.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.events.push(OnChainEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      events: Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => OnChainEvent.fromJSON(e)) : [],
      nextPageToken: isSet7(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.events) {
      obj.events = message.events.map((e) => e ? OnChainEvent.toJSON(e) : void 0);
    } else {
      obj.events = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return OnChainEventResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseOnChainEventResponse();
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => OnChainEvent.fromPartial(e))) || [];
    message.nextPageToken = object.nextPageToken ?? void 0;
    return message;
  }
};
function createBaseTierDetails() {
  return { tierType: 0, expiresAt: 0 };
}
var TierDetails = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.tierType !== 0) {
      writer.uint32(8).int32(message.tierType);
    }
    if (message.expiresAt !== 0) {
      writer.uint32(16).uint64(message.expiresAt);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTierDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.tierType = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.expiresAt = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tierType: isSet7(object.tierType) ? tierTypeFromJSON(object.tierType) : 0,
      expiresAt: isSet7(object.expiresAt) ? Number(object.expiresAt) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.tierType !== void 0 && (obj.tierType = tierTypeToJSON(message.tierType));
    message.expiresAt !== void 0 && (obj.expiresAt = Math.round(message.expiresAt));
    return obj;
  },
  create(base) {
    return TierDetails.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTierDetails();
    message.tierType = object.tierType ?? 0;
    message.expiresAt = object.expiresAt ?? 0;
    return message;
  }
};
function createBaseStorageLimitsResponse() {
  return { limits: [], units: 0, unitDetails: [], tierSubscriptions: [] };
}
var StorageLimitsResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.limits) {
      StorageLimit.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.units !== 0) {
      writer.uint32(16).uint32(message.units);
    }
    for (const v of message.unitDetails) {
      StorageUnitDetails.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.tierSubscriptions) {
      TierDetails.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageLimitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.limits.push(StorageLimit.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.units = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.unitDetails.push(StorageUnitDetails.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.tierSubscriptions.push(TierDetails.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      limits: Array.isArray(object == null ? void 0 : object.limits) ? object.limits.map((e) => StorageLimit.fromJSON(e)) : [],
      units: isSet7(object.units) ? Number(object.units) : 0,
      unitDetails: Array.isArray(object == null ? void 0 : object.unitDetails) ? object.unitDetails.map((e) => StorageUnitDetails.fromJSON(e)) : [],
      tierSubscriptions: Array.isArray(object == null ? void 0 : object.tierSubscriptions) ? object.tierSubscriptions.map((e) => TierDetails.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.limits) {
      obj.limits = message.limits.map((e) => e ? StorageLimit.toJSON(e) : void 0);
    } else {
      obj.limits = [];
    }
    message.units !== void 0 && (obj.units = Math.round(message.units));
    if (message.unitDetails) {
      obj.unitDetails = message.unitDetails.map((e) => e ? StorageUnitDetails.toJSON(e) : void 0);
    } else {
      obj.unitDetails = [];
    }
    if (message.tierSubscriptions) {
      obj.tierSubscriptions = message.tierSubscriptions.map((e) => e ? TierDetails.toJSON(e) : void 0);
    } else {
      obj.tierSubscriptions = [];
    }
    return obj;
  },
  create(base) {
    return StorageLimitsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseStorageLimitsResponse();
    message.limits = ((_a = object.limits) == null ? void 0 : _a.map((e) => StorageLimit.fromPartial(e))) || [];
    message.units = object.units ?? 0;
    message.unitDetails = ((_b = object.unitDetails) == null ? void 0 : _b.map((e) => StorageUnitDetails.fromPartial(e))) || [];
    message.tierSubscriptions = ((_c = object.tierSubscriptions) == null ? void 0 : _c.map((e) => TierDetails.fromPartial(e))) || [];
    return message;
  }
};
function createBaseStorageUnitDetails() {
  return { unitType: 0, unitSize: 0 };
}
var StorageUnitDetails = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.unitType !== 0) {
      writer.uint32(8).int32(message.unitType);
    }
    if (message.unitSize !== 0) {
      writer.uint32(16).uint32(message.unitSize);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageUnitDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.unitType = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.unitSize = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      unitType: isSet7(object.unitType) ? storageUnitTypeFromJSON(object.unitType) : 0,
      unitSize: isSet7(object.unitSize) ? Number(object.unitSize) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.unitType !== void 0 && (obj.unitType = storageUnitTypeToJSON(message.unitType));
    message.unitSize !== void 0 && (obj.unitSize = Math.round(message.unitSize));
    return obj;
  },
  create(base) {
    return StorageUnitDetails.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStorageUnitDetails();
    message.unitType = object.unitType ?? 0;
    message.unitSize = object.unitSize ?? 0;
    return message;
  }
};
function createBaseStorageLimit() {
  return { storeType: 0, name: "", limit: 0, used: 0, earliestTimestamp: 0, earliestHash: new Uint8Array() };
}
var StorageLimit = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.storeType !== 0) {
      writer.uint32(8).int32(message.storeType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint64(message.limit);
    }
    if (message.used !== 0) {
      writer.uint32(32).uint64(message.used);
    }
    if (message.earliestTimestamp !== 0) {
      writer.uint32(40).uint64(message.earliestTimestamp);
    }
    if (message.earliestHash.length !== 0) {
      writer.uint32(50).bytes(message.earliestHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.storeType = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.limit = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.used = longToNumber7(reader.uint64());
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.earliestTimestamp = longToNumber7(reader.uint64());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.earliestHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      storeType: isSet7(object.storeType) ? storeTypeFromJSON(object.storeType) : 0,
      name: isSet7(object.name) ? String(object.name) : "",
      limit: isSet7(object.limit) ? Number(object.limit) : 0,
      used: isSet7(object.used) ? Number(object.used) : 0,
      earliestTimestamp: isSet7(object.earliestTimestamp) ? Number(object.earliestTimestamp) : 0,
      earliestHash: isSet7(object.earliestHash) ? bytesFromBase647(object.earliestHash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.storeType !== void 0 && (obj.storeType = storeTypeToJSON(message.storeType));
    message.name !== void 0 && (obj.name = message.name);
    message.limit !== void 0 && (obj.limit = Math.round(message.limit));
    message.used !== void 0 && (obj.used = Math.round(message.used));
    message.earliestTimestamp !== void 0 && (obj.earliestTimestamp = Math.round(message.earliestTimestamp));
    message.earliestHash !== void 0 && (obj.earliestHash = base64FromBytes7(
      message.earliestHash !== void 0 ? message.earliestHash : new Uint8Array()
    ));
    return obj;
  },
  create(base) {
    return StorageLimit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStorageLimit();
    message.storeType = object.storeType ?? 0;
    message.name = object.name ?? "";
    message.limit = object.limit ?? 0;
    message.used = object.used ?? 0;
    message.earliestTimestamp = object.earliestTimestamp ?? 0;
    message.earliestHash = object.earliestHash ?? new Uint8Array();
    return message;
  }
};
function createBaseUsernameProofRequest() {
  return { name: new Uint8Array() };
}
var UsernameProofRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.name.length !== 0) {
      writer.uint32(10).bytes(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUsernameProofRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.name = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet7(object.name) ? bytesFromBase647(object.name) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.name !== void 0 && (obj.name = base64FromBytes7(message.name !== void 0 ? message.name : new Uint8Array()));
    return obj;
  },
  create(base) {
    return UsernameProofRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUsernameProofRequest();
    message.name = object.name ?? new Uint8Array();
    return message;
  }
};
function createBaseUsernameProofsResponse() {
  return { proofs: [] };
}
var UsernameProofsResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.proofs) {
      UserNameProof.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUsernameProofsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.proofs.push(UserNameProof.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proofs: Array.isArray(object == null ? void 0 : object.proofs) ? object.proofs.map((e) => UserNameProof.fromJSON(e)) : [] };
  },
  toJSON(message) {
    const obj = {};
    if (message.proofs) {
      obj.proofs = message.proofs.map((e) => e ? UserNameProof.toJSON(e) : void 0);
    } else {
      obj.proofs = [];
    }
    return obj;
  },
  create(base) {
    return UsernameProofsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseUsernameProofsResponse();
    message.proofs = ((_a = object.proofs) == null ? void 0 : _a.map((e) => UserNameProof.fromPartial(e))) || [];
    return message;
  }
};
function createBaseValidationResponse() {
  return { valid: false, message: void 0 };
}
var ValidationResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.valid === true) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.valid = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      valid: isSet7(object.valid) ? Boolean(object.valid) : false,
      message: isSet7(object.message) ? Message.fromJSON(object.message) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.valid !== void 0 && (obj.valid = message.valid);
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return ValidationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidationResponse();
    message.valid = object.valid ?? false;
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
function createBaseVerificationRequest() {
  return { fid: 0, address: new Uint8Array() };
}
var VerificationRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.address.length !== 0) {
      writer.uint32(18).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      address: isSet7(object.address) ? bytesFromBase647(object.address) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.address !== void 0 && (obj.address = base64FromBytes7(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return VerificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVerificationRequest();
    message.fid = object.fid ?? 0;
    message.address = object.address ?? new Uint8Array();
    return message;
  }
};
function createBaseSignerRequest() {
  return { fid: 0, signer: new Uint8Array() };
}
var SignerRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      signer: isSet7(object.signer) ? bytesFromBase647(object.signer) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.signer !== void 0 && (obj.signer = base64FromBytes7(message.signer !== void 0 ? message.signer : new Uint8Array()));
    return obj;
  },
  create(base) {
    return SignerRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignerRequest();
    message.fid = object.fid ?? 0;
    message.signer = object.signer ?? new Uint8Array();
    return message;
  }
};
function createBaseLinkRequest() {
  return { fid: 0, linkType: "", targetFid: void 0 };
}
var LinkRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.linkType !== "") {
      writer.uint32(18).string(message.linkType);
    }
    if (message.targetFid !== void 0) {
      writer.uint32(24).uint64(message.targetFid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.targetFid = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      linkType: isSet7(object.linkType) ? String(object.linkType) : "",
      targetFid: isSet7(object.targetFid) ? Number(object.targetFid) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    return obj;
  },
  create(base) {
    return LinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLinkRequest();
    message.fid = object.fid ?? 0;
    message.linkType = object.linkType ?? "";
    message.targetFid = object.targetFid ?? void 0;
    return message;
  }
};
function createBaseLinksByFidRequest() {
  return { fid: 0, linkType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var LinksByFidRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.linkType !== void 0) {
      writer.uint32(18).string(message.linkType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinksByFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      linkType: isSet7(object.linkType) ? String(object.linkType) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return LinksByFidRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLinksByFidRequest();
    message.fid = object.fid ?? 0;
    message.linkType = object.linkType ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseLinksByTargetRequest() {
  return { targetFid: void 0, linkType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var LinksByTargetRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.targetFid !== void 0) {
      writer.uint32(8).uint64(message.targetFid);
    }
    if (message.linkType !== void 0) {
      writer.uint32(18).string(message.linkType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinksByTargetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.targetFid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      targetFid: isSet7(object.targetFid) ? Number(object.targetFid) : void 0,
      linkType: isSet7(object.linkType) ? String(object.linkType) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return LinksByTargetRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLinksByTargetRequest();
    message.targetFid = object.targetFid ?? void 0;
    message.linkType = object.linkType ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseIdRegistryEventByAddressRequest() {
  return { address: new Uint8Array() };
}
var IdRegistryEventByAddressRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseIdRegistryEventByAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { address: isSet7(object.address) ? bytesFromBase647(object.address) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes7(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return IdRegistryEventByAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseIdRegistryEventByAddressRequest();
    message.address = object.address ?? new Uint8Array();
    return message;
  }
};
function createBaseTrieNodeMetadataRequest() {
  return { shardId: 0, prefix: new Uint8Array() };
}
var TrieNodeMetadataRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.shardId !== 0) {
      writer.uint32(8).uint32(message.shardId);
    }
    if (message.prefix.length !== 0) {
      writer.uint32(18).bytes(message.prefix);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTrieNodeMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.shardId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      shardId: isSet7(object.shardId) ? Number(object.shardId) : 0,
      prefix: isSet7(object.prefix) ? bytesFromBase647(object.prefix) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.shardId !== void 0 && (obj.shardId = Math.round(message.shardId));
    message.prefix !== void 0 && (obj.prefix = base64FromBytes7(message.prefix !== void 0 ? message.prefix : new Uint8Array()));
    return obj;
  },
  create(base) {
    return TrieNodeMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTrieNodeMetadataRequest();
    message.shardId = object.shardId ?? 0;
    message.prefix = object.prefix ?? new Uint8Array();
    return message;
  }
};
function createBaseTrieNodeMetadataResponse() {
  return { prefix: new Uint8Array(), numMessages: 0, hash: "", children: [] };
}
var TrieNodeMetadataResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.prefix.length !== 0) {
      writer.uint32(10).bytes(message.prefix);
    }
    if (message.numMessages !== 0) {
      writer.uint32(16).uint64(message.numMessages);
    }
    if (message.hash !== "") {
      writer.uint32(26).string(message.hash);
    }
    for (const v of message.children) {
      TrieNodeMetadataResponse.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTrieNodeMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.hash = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.children.push(TrieNodeMetadataResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      prefix: isSet7(object.prefix) ? bytesFromBase647(object.prefix) : new Uint8Array(),
      numMessages: isSet7(object.numMessages) ? Number(object.numMessages) : 0,
      hash: isSet7(object.hash) ? String(object.hash) : "",
      children: Array.isArray(object == null ? void 0 : object.children) ? object.children.map((e) => TrieNodeMetadataResponse.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.prefix !== void 0 && (obj.prefix = base64FromBytes7(message.prefix !== void 0 ? message.prefix : new Uint8Array()));
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.hash !== void 0 && (obj.hash = message.hash);
    if (message.children) {
      obj.children = message.children.map((e) => e ? TrieNodeMetadataResponse.toJSON(e) : void 0);
    } else {
      obj.children = [];
    }
    return obj;
  },
  create(base) {
    return TrieNodeMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTrieNodeMetadataResponse();
    message.prefix = object.prefix ?? new Uint8Array();
    message.numMessages = object.numMessages ?? 0;
    message.hash = object.hash ?? "";
    message.children = ((_a = object.children) == null ? void 0 : _a.map((e) => TrieNodeMetadataResponse.fromPartial(e))) || [];
    return message;
  }
};
function createBaseEventsRequest() {
  return {
    startId: 0,
    shardIndex: void 0,
    stopId: void 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0
  };
}
var EventsRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.startId !== 0) {
      writer.uint32(8).uint64(message.startId);
    }
    if (message.shardIndex !== void 0) {
      writer.uint32(16).uint32(message.shardIndex);
    }
    if (message.stopId !== void 0) {
      writer.uint32(24).uint64(message.stopId);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(32).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(42).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(48).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.startId = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.shardIndex = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.stopId = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      startId: isSet7(object.startId) ? Number(object.startId) : 0,
      shardIndex: isSet7(object.shardIndex) ? Number(object.shardIndex) : void 0,
      stopId: isSet7(object.stopId) ? Number(object.stopId) : void 0,
      pageSize: isSet7(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet7(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet7(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.startId !== void 0 && (obj.startId = Math.round(message.startId));
    message.shardIndex !== void 0 && (obj.shardIndex = Math.round(message.shardIndex));
    message.stopId !== void 0 && (obj.stopId = Math.round(message.stopId));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return EventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventsRequest();
    message.startId = object.startId ?? 0;
    message.shardIndex = object.shardIndex ?? void 0;
    message.stopId = object.stopId ?? void 0;
    message.pageSize = object.pageSize ?? void 0;
    message.pageToken = object.pageToken ?? void 0;
    message.reverse = object.reverse ?? void 0;
    return message;
  }
};
function createBaseEventsResponse() {
  return { events: [], nextPageToken: void 0 };
}
var EventsResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.events) {
      HubEvent.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.events.push(HubEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      events: Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => HubEvent.fromJSON(e)) : [],
      nextPageToken: isSet7(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.events) {
      obj.events = message.events.map((e) => e ? HubEvent.toJSON(e) : void 0);
    } else {
      obj.events = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return EventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseEventsResponse();
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => HubEvent.fromPartial(e))) || [];
    message.nextPageToken = object.nextPageToken ?? void 0;
    return message;
  }
};
function createBaseFidAddressTypeRequest() {
  return { fid: 0, address: new Uint8Array() };
}
var FidAddressTypeRequest = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.address.length !== 0) {
      writer.uint32(18).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidAddressTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      address: isSet7(object.address) ? bytesFromBase647(object.address) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.address !== void 0 && (obj.address = base64FromBytes7(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return FidAddressTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFidAddressTypeRequest();
    message.fid = object.fid ?? 0;
    message.address = object.address ?? new Uint8Array();
    return message;
  }
};
function createBaseFidAddressTypeResponse() {
  return { isCustody: false, isAuth: false, isVerified: false };
}
var FidAddressTypeResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.isCustody === true) {
      writer.uint32(8).bool(message.isCustody);
    }
    if (message.isAuth === true) {
      writer.uint32(16).bool(message.isAuth);
    }
    if (message.isVerified === true) {
      writer.uint32(24).bool(message.isVerified);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidAddressTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.isCustody = reader.bool();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.isAuth = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.isVerified = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      isCustody: isSet7(object.isCustody) ? Boolean(object.isCustody) : false,
      isAuth: isSet7(object.isAuth) ? Boolean(object.isAuth) : false,
      isVerified: isSet7(object.isVerified) ? Boolean(object.isVerified) : false
    };
  },
  toJSON(message) {
    const obj = {};
    message.isCustody !== void 0 && (obj.isCustody = message.isCustody);
    message.isAuth !== void 0 && (obj.isAuth = message.isAuth);
    message.isVerified !== void 0 && (obj.isVerified = message.isVerified);
    return obj;
  },
  create(base) {
    return FidAddressTypeResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFidAddressTypeResponse();
    message.isCustody = object.isCustody ?? false;
    message.isAuth = object.isAuth ?? false;
    message.isVerified = object.isVerified ?? false;
    return message;
  }
};
function createBaseGetConnectedPeersRequest() {
  return {};
}
var GetConnectedPeersRequest = {
  encode(_, writer = import_minimal7.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetConnectedPeersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetConnectedPeersRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetConnectedPeersRequest();
    return message;
  }
};
function createBaseGetConnectedPeersResponse() {
  return { contacts: [] };
}
var GetConnectedPeersResponse = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    for (const v of message.contacts) {
      ContactInfoBody.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetConnectedPeersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.contacts.push(ContactInfoBody.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      contacts: Array.isArray(object == null ? void 0 : object.contacts) ? object.contacts.map((e) => ContactInfoBody.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.contacts) {
      obj.contacts = message.contacts.map((e) => e ? ContactInfoBody.toJSON(e) : void 0);
    } else {
      obj.contacts = [];
    }
    return obj;
  },
  create(base) {
    return GetConnectedPeersResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetConnectedPeersResponse();
    message.contacts = ((_a = object.contacts) == null ? void 0 : _a.map((e) => ContactInfoBody.fromPartial(e))) || [];
    return message;
  }
};
var tsProtoGlobalThis7 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase647(b64) {
  if (tsProtoGlobalThis7.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis7.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis7.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes7(arr) {
  if (tsProtoGlobalThis7.Buffer) {
    return tsProtoGlobalThis7.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis7.btoa(bin.join(""));
  }
}
function longToNumber7(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis7.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal7.default.util.Long !== import_long7.default) {
  import_minimal7.default.util.Long = import_long7.default;
  import_minimal7.default.configure();
}
function isSet7(value) {
  return value !== null && value !== void 0;
}

// src/generated/rpc.ts
var HubServiceService = {
  /** Write API */
  submitMessage: {
    path: "/HubService/SubmitMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    requestDeserialize: (value) => Message.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  /** Validation Methods */
  validateMessage: {
    path: "/HubService/ValidateMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    requestDeserialize: (value) => Message.decode(value),
    responseSerialize: (value) => Buffer.from(ValidationResponse.encode(value).finish()),
    responseDeserialize: (value) => ValidationResponse.decode(value)
  },
  /** Block API */
  getBlocks: {
    path: "/HubService/GetBlocks",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value) => Buffer.from(BlocksRequest.encode(value).finish()),
    requestDeserialize: (value) => BlocksRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Block.encode(value).finish()),
    responseDeserialize: (value) => Block.decode(value)
  },
  getShardChunks: {
    path: "/HubService/GetShardChunks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(ShardChunksRequest.encode(value).finish()),
    requestDeserialize: (value) => ShardChunksRequest.decode(value),
    responseSerialize: (value) => Buffer.from(ShardChunksResponse.encode(value).finish()),
    responseDeserialize: (value) => ShardChunksResponse.decode(value)
  },
  getInfo: {
    path: "/HubService/GetInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(GetInfoRequest.encode(value).finish()),
    requestDeserialize: (value) => GetInfoRequest.decode(value),
    responseSerialize: (value) => Buffer.from(GetInfoResponse.encode(value).finish()),
    responseDeserialize: (value) => GetInfoResponse.decode(value)
  },
  getFids: {
    path: "/HubService/GetFids",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidsRequest.encode(value).finish()),
    requestDeserialize: (value) => FidsRequest.decode(value),
    responseSerialize: (value) => Buffer.from(FidsResponse.encode(value).finish()),
    responseDeserialize: (value) => FidsResponse.decode(value)
  },
  getConnectedPeers: {
    path: "/HubService/GetConnectedPeers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(GetConnectedPeersRequest.encode(value).finish()),
    requestDeserialize: (value) => GetConnectedPeersRequest.decode(value),
    responseSerialize: (value) => Buffer.from(GetConnectedPeersResponse.encode(value).finish()),
    responseDeserialize: (value) => GetConnectedPeersResponse.decode(value)
  },
  /** Events */
  subscribe: {
    path: "/HubService/Subscribe",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value) => Buffer.from(SubscribeRequest.encode(value).finish()),
    requestDeserialize: (value) => SubscribeRequest.decode(value),
    responseSerialize: (value) => Buffer.from(HubEvent.encode(value).finish()),
    responseDeserialize: (value) => HubEvent.decode(value)
  },
  getEvent: {
    path: "/HubService/GetEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(EventRequest.encode(value).finish()),
    requestDeserialize: (value) => EventRequest.decode(value),
    responseSerialize: (value) => Buffer.from(HubEvent.encode(value).finish()),
    responseDeserialize: (value) => HubEvent.decode(value)
  },
  getEvents: {
    path: "/HubService/GetEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(EventsRequest.encode(value).finish()),
    requestDeserialize: (value) => EventsRequest.decode(value),
    responseSerialize: (value) => Buffer.from(EventsResponse.encode(value).finish()),
    responseDeserialize: (value) => EventsResponse.decode(value)
  },
  /** Casts */
  getCast: {
    path: "/HubService/GetCast",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(CastId.encode(value).finish()),
    requestDeserialize: (value) => CastId.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  getCastsByFid: {
    path: "/HubService/GetCastsByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getCastsByParent: {
    path: "/HubService/GetCastsByParent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(CastsByParentRequest.encode(value).finish()),
    requestDeserialize: (value) => CastsByParentRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getCastsByMention: {
    path: "/HubService/GetCastsByMention",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** Reactions */
  getReaction: {
    path: "/HubService/GetReaction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(ReactionRequest.encode(value).finish()),
    requestDeserialize: (value) => ReactionRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  getReactionsByFid: {
    path: "/HubService/GetReactionsByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(ReactionsByFidRequest.encode(value).finish()),
    requestDeserialize: (value) => ReactionsByFidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** To be deprecated */
  getReactionsByCast: {
    path: "/HubService/GetReactionsByCast",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(ReactionsByTargetRequest.encode(value).finish()),
    requestDeserialize: (value) => ReactionsByTargetRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getReactionsByTarget: {
    path: "/HubService/GetReactionsByTarget",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(ReactionsByTargetRequest.encode(value).finish()),
    requestDeserialize: (value) => ReactionsByTargetRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** User Data */
  getUserData: {
    path: "/HubService/GetUserData",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(UserDataRequest.encode(value).finish()),
    requestDeserialize: (value) => UserDataRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  getUserDataByFid: {
    path: "/HubService/GetUserDataByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** Username Proof */
  getUsernameProof: {
    path: "/HubService/GetUsernameProof",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(UsernameProofRequest.encode(value).finish()),
    requestDeserialize: (value) => UsernameProofRequest.decode(value),
    responseSerialize: (value) => Buffer.from(UserNameProof.encode(value).finish()),
    responseDeserialize: (value) => UserNameProof.decode(value)
  },
  getUserNameProofsByFid: {
    path: "/HubService/GetUserNameProofsByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(UsernameProofsResponse.encode(value).finish()),
    responseDeserialize: (value) => UsernameProofsResponse.decode(value)
  },
  /** Verifications */
  getVerification: {
    path: "/HubService/GetVerification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(VerificationRequest.encode(value).finish()),
    requestDeserialize: (value) => VerificationRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  getVerificationsByFid: {
    path: "/HubService/GetVerificationsByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** OnChain Events */
  getOnChainSigner: {
    path: "/HubService/GetOnChainSigner",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(SignerRequest.encode(value).finish()),
    requestDeserialize: (value) => SignerRequest.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEvent.encode(value).finish()),
    responseDeserialize: (value) => OnChainEvent.decode(value)
  },
  getOnChainSignersByFid: {
    path: "/HubService/GetOnChainSignersByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEventResponse.encode(value).finish()),
    responseDeserialize: (value) => OnChainEventResponse.decode(value)
  },
  getOnChainEvents: {
    path: "/HubService/GetOnChainEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(OnChainEventRequest.encode(value).finish()),
    requestDeserialize: (value) => OnChainEventRequest.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEventResponse.encode(value).finish()),
    responseDeserialize: (value) => OnChainEventResponse.decode(value)
  },
  getIdRegistryOnChainEvent: {
    path: "/HubService/GetIdRegistryOnChainEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEvent.encode(value).finish()),
    responseDeserialize: (value) => OnChainEvent.decode(value)
  },
  getIdRegistryOnChainEventByAddress: {
    path: "/HubService/GetIdRegistryOnChainEventByAddress",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(IdRegistryEventByAddressRequest.encode(value).finish()),
    requestDeserialize: (value) => IdRegistryEventByAddressRequest.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEvent.encode(value).finish()),
    responseDeserialize: (value) => OnChainEvent.decode(value)
  },
  getCurrentStorageLimitsByFid: {
    path: "/HubService/GetCurrentStorageLimitsByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(StorageLimitsResponse.encode(value).finish()),
    responseDeserialize: (value) => StorageLimitsResponse.decode(value)
  },
  getFidAddressType: {
    path: "/HubService/GetFidAddressType",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidAddressTypeRequest.encode(value).finish()),
    requestDeserialize: (value) => FidAddressTypeRequest.decode(value),
    responseSerialize: (value) => Buffer.from(FidAddressTypeResponse.encode(value).finish()),
    responseDeserialize: (value) => FidAddressTypeResponse.decode(value)
  },
  /** Links */
  getLink: {
    path: "/HubService/GetLink",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(LinkRequest.encode(value).finish()),
    requestDeserialize: (value) => LinkRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value) => Message.decode(value)
  },
  getLinksByFid: {
    path: "/HubService/GetLinksByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(LinksByFidRequest.encode(value).finish()),
    requestDeserialize: (value) => LinksByFidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getLinksByTarget: {
    path: "/HubService/GetLinksByTarget",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(LinksByTargetRequest.encode(value).finish()),
    requestDeserialize: (value) => LinksByTargetRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getLinkCompactStateMessageByFid: {
    path: "/HubService/GetLinkCompactStateMessageByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidRequest.encode(value).finish()),
    requestDeserialize: (value) => FidRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  /** Bulk Methods */
  getAllCastMessagesByFid: {
    path: "/HubService/GetAllCastMessagesByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidTimestampRequest.encode(value).finish()),
    requestDeserialize: (value) => FidTimestampRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getAllReactionMessagesByFid: {
    path: "/HubService/GetAllReactionMessagesByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidTimestampRequest.encode(value).finish()),
    requestDeserialize: (value) => FidTimestampRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getAllVerificationMessagesByFid: {
    path: "/HubService/GetAllVerificationMessagesByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidTimestampRequest.encode(value).finish()),
    requestDeserialize: (value) => FidTimestampRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getAllUserDataMessagesByFid: {
    path: "/HubService/GetAllUserDataMessagesByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidTimestampRequest.encode(value).finish()),
    requestDeserialize: (value) => FidTimestampRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getAllLinkMessagesByFid: {
    path: "/HubService/GetAllLinkMessagesByFid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(FidTimestampRequest.encode(value).finish()),
    requestDeserialize: (value) => FidTimestampRequest.decode(value),
    responseSerialize: (value) => Buffer.from(MessagesResponse.encode(value).finish()),
    responseDeserialize: (value) => MessagesResponse.decode(value)
  },
  getTrieMetadataByPrefix: {
    path: "/HubService/GetTrieMetadataByPrefix",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(TrieNodeMetadataRequest.encode(value).finish()),
    requestDeserialize: (value) => TrieNodeMetadataRequest.decode(value),
    responseSerialize: (value) => Buffer.from(TrieNodeMetadataResponse.encode(value).finish()),
    responseDeserialize: (value) => TrieNodeMetadataResponse.decode(value)
  }
};
var HubServiceClient = (0, import_grpc_js.makeGenericClientConstructor)(HubServiceService, "HubService");

// src/client.ts
init_cjs_shims();

// src/generated/admin_rpc.ts
init_cjs_shims();
var import_grpc_js2 = require("@grpc/grpc-js");
var import_long8 = __toESM(require_long());
var import_minimal8 = __toESM(require_minimal2());
function createBaseEmpty() {
  return {};
}
var Empty = {
  encode(_, writer = import_minimal8.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseEmpty();
    return message;
  }
};
function createBaseRetryBlockNumberRange() {
  return { startBlockNumber: 0, stopBlockNumber: 0 };
}
var RetryBlockNumberRange = {
  encode(message, writer = import_minimal8.default.Writer.create()) {
    if (message.startBlockNumber !== 0) {
      writer.uint32(8).uint64(message.startBlockNumber);
    }
    if (message.stopBlockNumber !== 0) {
      writer.uint32(16).uint64(message.stopBlockNumber);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRetryBlockNumberRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.startBlockNumber = longToNumber8(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.stopBlockNumber = longToNumber8(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      startBlockNumber: isSet8(object.startBlockNumber) ? Number(object.startBlockNumber) : 0,
      stopBlockNumber: isSet8(object.stopBlockNumber) ? Number(object.stopBlockNumber) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.startBlockNumber !== void 0 && (obj.startBlockNumber = Math.round(message.startBlockNumber));
    message.stopBlockNumber !== void 0 && (obj.stopBlockNumber = Math.round(message.stopBlockNumber));
    return obj;
  },
  create(base) {
    return RetryBlockNumberRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRetryBlockNumberRange();
    message.startBlockNumber = object.startBlockNumber ?? 0;
    message.stopBlockNumber = object.stopBlockNumber ?? 0;
    return message;
  }
};
function createBaseRetryOnchainEventsRequest() {
  return { fid: void 0, blockRange: void 0 };
}
var RetryOnchainEventsRequest = {
  encode(message, writer = import_minimal8.default.Writer.create()) {
    if (message.fid !== void 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.blockRange !== void 0) {
      RetryBlockNumberRange.encode(message.blockRange, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRetryOnchainEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber8(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.blockRange = RetryBlockNumberRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet8(object.fid) ? Number(object.fid) : void 0,
      blockRange: isSet8(object.blockRange) ? RetryBlockNumberRange.fromJSON(object.blockRange) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.blockRange !== void 0 && (obj.blockRange = message.blockRange ? RetryBlockNumberRange.toJSON(message.blockRange) : void 0);
    return obj;
  },
  create(base) {
    return RetryOnchainEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRetryOnchainEventsRequest();
    message.fid = object.fid ?? void 0;
    message.blockRange = object.blockRange !== void 0 && object.blockRange !== null ? RetryBlockNumberRange.fromPartial(object.blockRange) : void 0;
    return message;
  }
};
function createBaseRetryFnameRequest() {
  return { fid: void 0, fname: void 0 };
}
var RetryFnameRequest = {
  encode(message, writer = import_minimal8.default.Writer.create()) {
    if (message.fid !== void 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.fname !== void 0) {
      writer.uint32(18).string(message.fname);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRetryFnameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber8(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.fname = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet8(object.fid) ? Number(object.fid) : void 0,
      fname: isSet8(object.fname) ? String(object.fname) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.fname !== void 0 && (obj.fname = message.fname);
    return obj;
  },
  create(base) {
    return RetryFnameRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRetryFnameRequest();
    message.fid = object.fid ?? void 0;
    message.fname = object.fname ?? void 0;
    return message;
  }
};
function createBaseUploadSnapshotRequest() {
  return { shardIndexes: [] };
}
var UploadSnapshotRequest = {
  encode(message, writer = import_minimal8.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.shardIndexes) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUploadSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag == 8) {
            message.shardIndexes.push(reader.uint32());
            continue;
          }
          if (tag == 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.shardIndexes.push(reader.uint32());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { shardIndexes: Array.isArray(object == null ? void 0 : object.shardIndexes) ? object.shardIndexes.map((e) => Number(e)) : [] };
  },
  toJSON(message) {
    const obj = {};
    if (message.shardIndexes) {
      obj.shardIndexes = message.shardIndexes.map((e) => Math.round(e));
    } else {
      obj.shardIndexes = [];
    }
    return obj;
  },
  create(base) {
    return UploadSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseUploadSnapshotRequest();
    message.shardIndexes = ((_a = object.shardIndexes) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var AdminServiceService = {
  submitOnChainEvent: {
    path: "/AdminService/SubmitOnChainEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(OnChainEvent.encode(value).finish()),
    requestDeserialize: (value) => OnChainEvent.decode(value),
    responseSerialize: (value) => Buffer.from(OnChainEvent.encode(value).finish()),
    responseDeserialize: (value) => OnChainEvent.decode(value)
  },
  submitUserNameProof: {
    path: "/AdminService/SubmitUserNameProof",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(UserNameProof.encode(value).finish()),
    requestDeserialize: (value) => UserNameProof.decode(value),
    responseSerialize: (value) => Buffer.from(UserNameProof.encode(value).finish()),
    responseDeserialize: (value) => UserNameProof.decode(value)
  },
  uploadSnapshot: {
    path: "/AdminService/UploadSnapshot",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(UploadSnapshotRequest.encode(value).finish()),
    requestDeserialize: (value) => UploadSnapshotRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value) => Empty.decode(value)
  },
  retryOnchainEvents: {
    path: "/AdminService/RetryOnchainEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(RetryOnchainEventsRequest.encode(value).finish()),
    requestDeserialize: (value) => RetryOnchainEventsRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value) => Empty.decode(value)
  },
  retryFnameEvents: {
    path: "/AdminService/RetryFnameEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value) => Buffer.from(RetryFnameRequest.encode(value).finish()),
    requestDeserialize: (value) => RetryFnameRequest.decode(value),
    responseSerialize: (value) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value) => Empty.decode(value)
  }
};
var AdminServiceClient = (0, import_grpc_js2.makeGenericClientConstructor)(AdminServiceService, "AdminService");
var tsProtoGlobalThis8 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function longToNumber8(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis8.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal8.default.util.Long !== import_long8.default) {
  import_minimal8.default.util.Long = import_long8.default;
  import_minimal8.default.configure();
}
function isSet8(value) {
  return value !== null && value !== void 0;
}

// src/client.ts
var grpc = __toESM(require("@grpc/grpc-js"));
var import_grpc_js3 = require("@grpc/grpc-js");
var import_neverthrow = require("neverthrow");
var import_core = require("@farcaster/core");
var fromServiceError = (err2) => {
  let context = err2.details;
  if (err2.code === 14 && err2.details === "No connection established") {
    context = `Connection failed: please check that the hub\u2019s address, ports and authentication config are correct. ${context}`;
  }
  const hubErrorCode = err2.metadata.get("errCode")[0] || err2.metadata.get("x-err-code")[0];
  return new import_core.HubError(hubErrorCode, context);
};
var promisifyClient = (client) => {
  return new Proxy(client, {
    get: (target, descriptor) => {
      const key = descriptor;
      if (key === "$")
        return target;
      if (key === "close")
        return () => target.close;
      const func = target[key];
      if (typeof func === "function" && func.responseStream === false) {
        return (...args) => new Promise(
          (resolve, _reject) => func.call(
            target,
            ...[
              ...args,
              (e, res) => e ? resolve((0, import_neverthrow.err)(fromServiceError(e))) : resolve((0, import_neverthrow.ok)(res))
            ]
          )
        );
      }
      if (typeof func === "function" && func.responseStream === true) {
        return (...args) => {
          return new Promise((resolve) => {
            const stream = func.call(target, ...args);
            stream.on("error", (e) => {
              return e;
            });
            resolve((0, import_neverthrow.ok)(stream));
          });
        };
      }
      return func;
    }
  });
};
var getSSLHubRpcClient = (address, options) => {
  return promisifyClient(getSSLClient(address, options));
};
var getInsecureHubRpcClient = (address, options) => {
  return promisifyClient(getInsecureClient(address, options));
};
var getAdminRpcClient = async (address) => {
  return promisifyClient(getAdminClient(address));
};
var getAuthMetadata = (username, password) => {
  const metadata = new import_grpc_js3.Metadata();
  metadata.set("authorization", `Basic ${Buffer.from(`${username}:${password}`).toString("base64")}`);
  return metadata;
};
var getServer = () => {
  const server = new grpc.Server({
    "grpc.keepalive_time_ms": 10 * 1e3,
    "grpc.keepalive_timeout_ms": 5 * 1e3,
    "grpc.client_idle_timeout_ms": 60 * 1e3
  });
  return server;
};
var getSSLClient = (address, options) => {
  if (!address)
    throw new Error("Hub address not specified");
  return new HubServiceClient(address, grpc.credentials.createSsl(), { ...options });
};
var getInsecureClient = (address, options) => {
  if (!address)
    throw new Error("Hub address not specified");
  return new HubServiceClient(address, grpc.credentials.createInsecure(), { ...options });
};
var getAdminClient = (address, options) => {
  if (!address)
    throw new Error("Hub address not specified");
  return new AdminServiceClient(address, grpc.credentials.createInsecure(), { ...options });
};
function createDefaultMetadataKeyInterceptor(key, value) {
  return function metadataKeyInterceptor(options, nextCall) {
    const requester = {
      start: function(metadata, listener, next) {
        if (metadata.get(key).length === 0) {
          metadata.set(key, value);
        }
        next(metadata, listener);
      }
    };
    return new grpc.InterceptingCall(nextCall(options), requester);
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HubServiceClient,
  HubServiceService,
  Metadata,
  Server,
  ServerCredentials,
  createDefaultMetadataKeyInterceptor,
  getAdminClient,
  getAdminRpcClient,
  getAuthMetadata,
  getInsecureClient,
  getInsecureHubRpcClient,
  getSSLClient,
  getSSLHubRpcClient,
  getServer,
  status
});
