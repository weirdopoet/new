import { AbstractWallet } from "./abstract";
import { ethers, TypedDataDomain, type Signer, TypedDataField } from "ethers";
import { AwsKmsSigner, type AwsKmsSignerCredentials } from "ethers-aws-kms-signer";
export declare class AwsSigner extends AwsKmsSigner {
    private _options;
    constructor(options: AwsKmsSignerCredentials, provider?: ethers.providers.Provider);
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
    connect(provider: ethers.providers.Provider): AwsSigner;
}
/**
 * Connect to a custodial wallet with a signing key in [AWS Key Management Service](https://aws.amazon.com/kms/).
 *
 * In order to instantiate an AWS KMS wallet, you need to get the relevant credentials for the AWS KMS key that you want to use.
 *
 * @example
 * ```js
 * import { AwsKmsWallet } from "@thirdweb-dev/wallets/evm/wallets/aws-kms";
 *
 * const wallet = new AwsKmsWallet({
 *   region: "us-east-1",
 *   accessKeyId: process.env.AWS_ACCESS_KEY_ID,
 *   secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
 *   sessionToken: process.env.AWS_SESSION_TOKEN,
 *   keyId: process.env.AWS_KEY_ID,
 * });
 * ```
 *
 * @wallet
 */
export declare class AwsKmsWallet extends AbstractWallet {
    private _signer?;
    private _options;
    /**
     * Create instance of `AwsKmsWallet`
     * @param options -
     * The `options` object of type `AwsKmsSignerCredentials` from `ethers-aws-kms-signer` package
     */
    constructor(options: AwsKmsSignerCredentials);
    /**
     * Get [ethers signer](https://docs.ethers.io/v5/api/signer/) of the connected wallet
     */
    getSigner(): Promise<Signer>;
}
//# sourceMappingURL=aws-kms.d.ts.map