import { providers } from "ethers";
import { UserOperationStruct } from "@account-abstraction/contracts";
import { EstimateUserOpGasResult, ZkTransactionInput } from "../types";
export declare const DEBUG = false;
export declare class HttpRpcClient {
    private readonly userOpJsonRpcProvider;
    initializing: Promise<void>;
    bundlerUrl: string;
    entryPointAddress: string;
    chainId: number;
    constructor(bundlerUrl: string, entryPointAddress: string, chainId: number, clientId?: string, secretKey?: string);
    validateChainId(): Promise<void>;
    /**
     * send a UserOperation to the bundler
     * @param userOp1 - The UserOperation to send
     * @returns userOpHash the id of this operation, for getUserOperationTransaction
     */
    sendUserOpToBundler(userOp1: UserOperationStruct): Promise<string>;
    estimateUserOpGas(userOp: Partial<UserOperationStruct>): Promise<EstimateUserOpGasResult>;
    getUserOperationGasPrice(): Promise<{
        maxFeePerGas: string;
        maxPriorityFeePerGas: string;
    }>;
    getUserOperationReceipt(userOpHash: string): Promise<any>;
    zkPaymasterData(transactionInput: providers.TransactionRequest): Promise<any>;
    zkBroadcastTransaction(transactionInput: ZkTransactionInput): Promise<any>;
    private printUserOperation;
}
//# sourceMappingURL=http-rpc-client.d.ts.map