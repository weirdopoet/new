export { A as APPROVED_IMPLEMENTATIONS, a as ContractDeployer, C as ContractVerifier, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, c as checkClientIdOrSecretKey, f as checkVerificationStatus, h as computeCloneFactoryAddress, t as convertParamValues, l as deployCreate2Factory, m as directDeployDeterministic, o as directDeployDeterministicPublished, n as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, b as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, x as getApprovedImplementation, y as getDefaultTrustedForwarders, u as getDeployArguments, k as getEncodedConstructorParamsForThirdwebContract, j as getThirdwebContractAddress, w as getTrustedForwarders, i as isVerifiedOnEtherscan, q as predictAddressDeterministic, s as predictAddressDeterministicPublished, r as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, d as verify, v as verifyThirdwebPrebuiltImplementation } from './sdk-3e21fc5c.browser.esm.js';
export { G as ALL_ROLES, bi as AbiObjectSchema, bj as AbiSchema, bh as AbiTypeSchema, b9 as AddressOrEnsSchema, b8 as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bc as BYOCContractMetadataSchema, b5 as BigNumberSchema, b7 as BigNumberTransformSchema, b6 as BigNumberishSchema, aq as COMMON_FACTORY, C as CONTRACTS_MAP, aO as CONTRACT_ADDRESSES, ao as CREATE2_FACTORY_BYTECODE, ba as CallOverrideSchema, aS as ChainId, bm as ChainIdToAddressSchema, bE as CommonContractOutputSchema, bD as CommonContractSchema, bH as CommonPlatformFeeSchema, bG as CommonPrimarySaleSchema, bF as CommonRoyaltySchema, bJ as CommonSymbolSchema, bI as CommonTrustedForwarderSchema, bB as CompilerMetadataFetchedSchema, bk as CompilerTypeInput, bA as ContractInfoSchema, bf as CustomContractDeploy, bd as CustomContractInput, be as CustomContractOutput, bg as CustomContractSchema, bn as CustomFactoryInput, at as DEPLOYER_ABI, as as DEPLOYER_BYTECODE, bq as DeployTypeInput, bs as DeploymentNetworkInput, bW as DropErc1155ContractDeploy, bU as DropErc1155ContractInput, bV as DropErc1155ContractOutput, bX as DropErc1155ContractSchema, bS as DropErc721ContractDeploy, bQ as DropErc721ContractInput, bR as DropErc721ContractOutput, bT as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, aZ as EventType, x as ExtensionNotImplementedError, bt as ExtraPublishMetadataSchemaInput, bu as ExtraPublishMetadataSchemaOutput, bp as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bv as FullPublishMetadataSchemaInput, bw as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, ar as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, aY as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, b_ as MarketplaceContractDeploy, bY as MarketplaceContractInput, bZ as MarketplaceContractOutput, b$ as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bK as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, bo as ModularFactoryInput, c as MultiwrapInitializer, aW as NATIVE_TOKENS, aV as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aN as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c2 as PackContractDeploy, c0 as PackContractInput, c1 as PackContractOutput, c3 as PackContractSchema, P as PackInitializer, bl as PreDeployMetadata, bC as PreDeployMetadataFetchedSchema, bx as ProfileSchemaInput, by as ProfileSchemaOutput, cq as ProposalOutputSchema, bz as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, br as RouterTypeInput, bb as SDKOptionsSchema, ap as SIGNATURE, b4 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bL as SnapshotEntryInput, bN as SnapshotEntryWithProofSchema, bP as SnapshotInfoSchema, bM as SnapshotInputSchema, bO as SnapshotSchema, f as SplitInitializer, c6 as SplitsContractDeploy, c4 as SplitsContractInput, c5 as SplitsContractOutput, c7 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aH as THIRDWEB_DEPLOYER, T as TokenDropInitializer, ci as TokenErc1155ContractDeploy, cg as TokenErc1155ContractInput, ch as TokenErc1155ContractOutput, cj as TokenErc1155ContractSchema, ca as TokenErc20ContractDeploy, c8 as TokenErc20ContractInput, c9 as TokenErc20ContractOutput, cb as TokenErc20ContractSchema, ce as TokenErc721ContractDeploy, cc as TokenErc721ContractInput, cd as TokenErc721ContractOutput, cf as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, co as VoteContractDeploy, cm as VoteContractInput, cn as VoteContractOutput, cp as VoteContractSchema, V as VoteInitializer, ck as VoteSettingsInputSchema, cl as VoteSettingsOuputSchema, W as WrongListingTypeError, ax as computeCreate2FactoryTransaction, aA as computeDeploymentAddress, aE as computeDeploymentInfo, aB as computeEOAForwarderAddress, aC as computeForwarderAddress, af as constructAbiFromBytecode, ab as detectFeatures, ac as detectFeaturesFromBytecode, aF as encodeConstructorParamsForImplementation, a0 as extractCommentFromMetadata, a1 as extractConstructorParamsFromAbi, a2 as extractFunctionsFromAbi, a7 as extractIPFSHashFromBytecode, a3 as extractMinimalProxyImplementationAddress, X as fetchAbiFromAddress, aJ as fetchAndCacheDeployMetadata, Y as fetchContractMetadata, K as fetchContractMetadataFromAddress, O as fetchContractMetadataFromBytecode, aa as fetchExtendedReleaseMetadata, a9 as fetchPreDeployMetadata, aI as fetchPublishedContractFromPolygon, a8 as fetchRawPredeployMetadata, Z as formatCompilerMetadata, ag as getAllDetectedExtensions, ae as getAllDetectedExtensionsFromBytecode, ad as getAllDetectedFeatures, a$ as getChainIdFromNetwork, b0 as getChainIdOrName, a_ as getChainProvider, ak as getCompositeABI, aP as getContractAddressByChainId, J as getContractMetadataFromCache, k as getContractName, aQ as getContractPublisherAddress, j as getContractTypeForRemoteName, aw as getCreate2FactoryAddress, aG as getCreate2FactoryDeploymentInfo, az as getInitBytecodeWithSalt, aD as getKeylessTxn, aR as getMultichainRegistryAddress, aX as getNativeTokenByChainId, b2 as getProviderFromRpcUrl, H as getRoleHash, ay as getSaltHash, b3 as getSignerAndProvider, aU as getSupportedChains, _ as hasMatchingAbi, B as includesErrorMessage, b1 as isChainConfig, au as isContractDeployed, an as isDowngradeVersion, av as isEIP155Enforced, ai as isExtensionEnabled, ah as isFeatureEnabled, am as isIncrementalVersion, l as isProvider, m as isSigner, aj as joinABIs, $ as matchesAbiFromBytecode, z as parseRevertReason, aL as resolveAddress, a5 as resolveContractUriAndBytecode, a4 as resolveContractUriFromAddress, aK as resolveEns, a6 as resolveImplementation, aT as setSupportedChains, aM as signTypedDataInternal, al as toSemver } from './index-33cd3415.browser.esm.js';
export { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from './fetchCurrencyValue-32d08b05.browser.esm.js';
export { c as cleanCurrencyAddress } from './cleanCurrencyAddress-ded19cfe.browser.esm.js';
export { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';
export { s as setErc20Allowance } from './setErc20Allowance-7f76f677.browser.esm.js';
export { B as BaseSignaturePayloadInput, j as ClaimConditionInputArray, i as ClaimConditionInputSchema, e as ClaimConditionMetadataSchema, k as ClaimConditionOutputSchema, C as ClaimEligibility, l as CurrencySchema, m as CurrencyValueSchema, G as GenericRequest, w as MintRequest1155, M as MintRequest20, v as MintRequest721, x as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, q as Signature1155PayloadInput, r as Signature1155PayloadInputWithTokenId, s as Signature1155PayloadOutput, S as Signature20PayloadInput, n as Signature20PayloadOutput, o as Signature721PayloadInput, p as Signature721PayloadOutput, t as Signature721WithQuantityInput, u as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, d as createMerkleTreeFromAllowList, b as createSnapshot, f as fetchSnapshotEntryForAddress, g as getProofsForAllowListEntry, h as hashAllowListEntry } from './signature-d3ea643d.browser.esm.js';
export { h as hasERC20Allowance } from './hasERC20Allowance-654a940b.browser.esm.js';
export { E as Erc20, a as Erc20SignatureMintable, n as normalizeAmount } from './erc-20-9a18a51c.browser.esm.js';
export { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction, t as toEther } from './contract-appuri-5c40af52.browser.esm.js';
export { E as Erc721, a as Erc721WithQuantitySignatureMintable, t as toWei } from './erc-721-27306550.browser.esm.js';
export { k as EditionMetadataInputOrUriSchema, j as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, i as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, e as compatibleExtensions, f as computeNativeTokenAddress, h as deployContractDeterministicRaw, b as getBuyWithCryptoHistory, c as getBuyWithCryptoQuote, d as getBuyWithCryptoStatus, g as getCachedAbiForContract, m as matchesPrebuiltAbi, a as toDisplayValue, t as toUnits } from './getStatus-7ee3964f.browser.esm.js';
export { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-95d1cc2b.browser.esm.js';
export { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';
export { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from './contract-owner-49e75547.browser.esm.js';
export { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';
export { D as DropClaimConditions } from './drop-claim-conditions-e6f2abbf.browser.esm.js';
export { D as DropErc1155ClaimConditions, E as Erc1155, a as Erc1155SignatureMintable } from './erc-1155-7ce9bee1.browser.esm.js';
export { A as Account, a as AccountFactory, f as AdminFlag, d as Airdrop1155, b as Airdrop20, c as Airdrop721, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, E as ExtensionManager, P as PermissionSnapshotSchema, h as SignerPermissionRequest, g as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from './airdrop-erc1155-f9016b81.browser.esm.js';
export { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';
export { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';
export { D as DeployTransaction, T as Transaction, e as engineSendFunction, c as estimateTransactionCost, g as getDefaultGasOverrides, a as getDynamicFeeData, b as getGasPrice, d as getPolygonGasPriorityFee, p as prepareGaslessRequest } from './transactions-72f9603c.browser.esm.js';
export { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from './marketplacev3-offers-ce1f096b.browser.esm.js';
export { e as extractConstructorParams, a as extractFunctions } from './contract-publisher-01e4eba8.browser.esm.js';
export { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';
export { f as fetchSourceFilesFromMetadata } from './fetchSourceFilesFromMetadata-906c835e.browser.esm.js';
export { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from './deployContractDeterministic-7823c15c.browser.esm.js';
export { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from './QueryParams-32a56510.browser.esm.js';
export { L as ListingType } from './ListingType-cba090cb.browser.esm.js';
export { V as VoteType } from './Vote-3b66775c.browser.esm.js';
export { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from './pack-29c3a58f.browser.esm.js';
import '@thirdweb-dev/storage';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';
import 'ethers';
import 'eventemitter3';
import 'tiny-invariant';
import '@thirdweb-dev/chains';
import '@thirdweb-dev/generated-abis';
import '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';
import 'zod';
import '@thirdweb-dev/crypto';
import 'bn.js';
import 'bs58';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';
import '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';
import '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';
import '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';
import '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';
import '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';
import 'ethers/lib/utils';
import '@thirdweb-dev/merkletree';
import 'uuid';
import 'thirdweb';
import 'thirdweb/pay';
import 'thirdweb/utils';
import 'fast-deep-equal';
import './marketplace-e3129e2f.browser.esm.js';
import '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';

/**
 * @internal
 */
function getRpcUrl(network, clientId) {
  return `https://${network}.rpc.thirdweb.com/${clientId || ""}`;
}

// handle browser vs node global

// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects
globalThis.global = globalThis;

export { getRpcUrl };
