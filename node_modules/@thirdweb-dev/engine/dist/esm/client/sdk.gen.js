// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from "./client.gen.js";
/**
 * Write Contract
 * Call a contract function with a transaction
 */
export const writeContract = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Write Transaction
 * Execute raw transactions
 */
export const sendTransaction = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/transaction",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Sign Message
 * Sign messages using either EOA or Smart Account
 */
export const signMessage = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/message",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Sign Typed Data
 * Sign EIP-712 typed data using either EOA or Smart Account
 */
export const signTypedData = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/typed-data",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Read Contract
 * Read from smart contracts with intelligent execution strategy:
 * - Single calls: Always executed directly for efficiency
 * - Multiple calls: Uses multicall by default, or direct calls if disabled
 * - Failed preparations: Returns preparation errors directly
 *
 * If multicall is not specified, it will be used by default. In case of multicall related errors, engine will fallback to direct calls.
 * Only in the case where multicall is explicitly enabled, engine will not fallback to direct calls.
 */
export const readContract = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/read/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Encode Contract
 * Encode contract function calls without execution
 */
export const encodeContract = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/encode/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
/**
 * Cancel Transaction
 * Attempt to cancel a queued transaction. Transactions that have been sent and are waiting for mine cannot be cancelled.
 */
export const cancelTransaction = (options) => {
    return (options.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/{id}/cancel",
        ...options,
    });
};
/**
 * List Server Wallets
 * List all engine server wallets for the current project. Returns an array of EOA addresses with their corresponding predicted smart account addresses.
 */
export const listAccounts = (options) => {
    return (options?.client ?? _heyApiClient).get({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/accounts",
        ...options,
    });
};
/**
 * Get or Create Server Wallet
 * Create a new engine server wallet or retrieve an existing one. If the EOA already exists for the given label, it will be returned without creating a new one.
 */
export const createAccount = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/accounts",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Get Transactions
 * Search transactions with various filters and pagination
 */
export const getTransactions = (options) => {
    return (options?.client ?? _heyApiClient).get({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions",
        ...options,
    });
};
/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
export const getTransactionAnalytics = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
export const getTransactionAnalyticsSummary = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics-summary",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
export const searchTransactions = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/search",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
/**
 * Get Activity Logs
 * Get paginated activity logs for a specific transaction with tenancy enforcement
 */
export const getActivityLogs = (options) => {
    return (options.client ?? _heyApiClient).get({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/activity-logs",
        ...options,
    });
};
/**
 * Search Activity Logs
 * Search activity logs across transactions with advanced filtering and tenancy enforcement
 */
export const searchActivityLogs = (options) => {
    return (options?.client ?? _heyApiClient).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/activity-logs/search",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
//# sourceMappingURL=sdk.gen.js.map