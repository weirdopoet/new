{"version":3,"sources":["../src/files/file.ts","../src/project/project.ts"],"names":["CodegenFile","_CodegenFile","path","meta","filePath","exp","imp","value","field","key","existing","symbol","name","target","source","file","relativePath","CodegenProject","fileOrPath","renderer","metadata","existingFile","results"],"mappings":"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","file":"index.cjs","sourcesContent":["import path from 'node:path';\n\nimport type { ICodegenImport } from '../imports/types';\nimport type { ICodegenSymbol } from '../symbols/types';\nimport type { ICodegenFile } from './types';\n\nexport class CodegenFile implements ICodegenFile {\n  private cache: {\n    exports?: ReadonlyArray<ICodegenImport>;\n    imports?: ReadonlyArray<ICodegenImport>;\n    symbols?: ReadonlyArray<ICodegenSymbol>;\n  } = {};\n\n  private state: {\n    exports: Map<string, ICodegenImport>;\n    imports: Map<string, ICodegenImport>;\n    symbols: Map<string, ICodegenSymbol>;\n  } = {\n    exports: new Map(),\n    imports: new Map(),\n    symbols: new Map(),\n  };\n\n  constructor(\n    public path: string,\n    public meta: ICodegenFile['meta'] = {},\n  ) {\n    let filePath = CodegenFile.pathToFilePath(path);\n    if (meta.path) {\n      if (typeof meta.path === 'function') {\n        filePath = meta.path(filePath);\n      } else {\n        filePath = meta.path.replace('{{path}}', filePath);\n      }\n    }\n    this.path = filePath;\n  }\n\n  addExport(exp: ICodegenImport): void {\n    return this.addImportExport(exp, 'exports');\n  }\n\n  addImport(imp: ICodegenImport): void {\n    return this.addImportExport(imp, 'imports');\n  }\n\n  private addImportExport(\n    value: ICodegenImport,\n    field: 'exports' | 'imports',\n  ): void {\n    const key = typeof value.from === 'string' ? value.from : value.from.path;\n    const existing = this.state[field].get(key);\n    if (existing) {\n      this.mergeImportExportValues(existing, value);\n      this.state[field].set(key, existing);\n    } else {\n      this.state[field].set(key, { ...value }); // clone to avoid mutation\n    }\n    this.cache[field] = undefined;\n  }\n\n  addSymbol(symbol: ICodegenSymbol): void {\n    const key = symbol.name;\n    const existing = this.state.symbols.get(key);\n    if (existing) {\n      existing.value = symbol.value;\n      this.state.symbols.set(key, existing);\n    } else {\n      this.state.symbols.set(key, { ...symbol }); // clone to avoid mutation\n    }\n    this.cache.symbols = undefined;\n  }\n\n  get exports(): ReadonlyArray<ICodegenImport> {\n    if (!this.cache.exports) {\n      this.cache.exports = Array.from(this.state.exports.values());\n    }\n    return this.cache.exports;\n  }\n\n  getAllSymbols(): ReadonlyArray<ICodegenSymbol> {\n    return [\n      ...this.symbols,\n      ...this.imports.flatMap((imp) =>\n        (imp.names ?? []).map((name) => ({\n          name: imp.aliases?.[name] ?? name,\n        })),\n      ),\n      ...this.exports.flatMap((imp) =>\n        (imp.names ?? []).map((name) => ({\n          name: imp.aliases?.[name] ?? name,\n        })),\n      ),\n    ];\n  }\n\n  hasContent(): boolean {\n    return this.state.symbols.size > 0 || this.state.exports.size > 0;\n  }\n\n  hasSymbol(name: string): boolean {\n    return this.state.symbols.has(name);\n  }\n\n  get imports(): ReadonlyArray<ICodegenImport> {\n    if (!this.cache.imports) {\n      this.cache.imports = Array.from(this.state.imports.values());\n    }\n    return this.cache.imports;\n  }\n\n  private mergeImportExportValues(\n    target: ICodegenImport,\n    source: ICodegenImport,\n  ): void {\n    target.aliases = { ...target.aliases, ...source.aliases };\n    if (source.defaultImport !== undefined) {\n      target.defaultImport = source.defaultImport;\n    }\n    target.names = [\n      ...new Set([...(target.names ?? []), ...(source.names ?? [])]),\n    ];\n    if (source.namespaceImport !== undefined) {\n      target.namespaceImport = source.namespaceImport;\n    }\n    if (source.typeDefaultImport !== undefined) {\n      target.typeDefaultImport = source.typeDefaultImport;\n    }\n    target.typeNames = [\n      ...new Set([...(target.typeNames ?? []), ...(source.typeNames ?? [])]),\n    ];\n    if (source.typeNamespaceImport !== undefined) {\n      target.typeNamespaceImport = source.typeNamespaceImport;\n    }\n  }\n\n  static pathToFilePath(source: string): string {\n    if (source.includes('/')) {\n      return source.split('/').filter(Boolean).join(path.sep);\n    }\n    if (source.includes('\\\\')) {\n      return source.split('\\\\').filter(Boolean).join(path.sep);\n    }\n    return source.split(path.sep).filter(Boolean).join(path.sep);\n  }\n\n  relativePathFromFile(file: Pick<ICodegenFile, 'path'>): string {\n    let relativePath = path.posix.relative(\n      path.posix.dirname(file.path),\n      this.path,\n    );\n    if (!relativePath.startsWith('.')) {\n      relativePath = `./${relativePath}`;\n    }\n    return relativePath;\n  }\n\n  relativePathToFile(file: Pick<ICodegenFile, 'path'>): string {\n    let relativePath = path.posix.relative(\n      path.posix.dirname(this.path),\n      file.path,\n    );\n    if (!relativePath.startsWith('.')) {\n      relativePath = `./${relativePath}`;\n    }\n    return relativePath;\n  }\n\n  get symbols(): ReadonlyArray<ICodegenSymbol> {\n    if (!this.cache.symbols) {\n      this.cache.symbols = Array.from(this.state.symbols.values());\n    }\n    return this.cache.symbols;\n  }\n}\n","import { CodegenFile } from '../files/file';\nimport type { ICodegenImport } from '../imports/types';\nimport type { ICodegenMeta } from '../meta/types';\nimport type { ICodegenOutput } from '../output/types';\nimport type { ICodegenRenderer } from '../renderers/types';\nimport type { ICodegenSymbol } from '../symbols/types';\nimport type { ICodegenProject } from './types';\n\nexport class CodegenProject implements ICodegenProject {\n  private filesMap: Map<string, CodegenFile> = new Map();\n  private filesOrder: Array<CodegenFile> = [];\n  private renderers: Map<string, ICodegenRenderer> = new Map();\n\n  addExportToFile(fileOrPath: CodegenFile | string, imp: ICodegenImport): void {\n    const file = this.ensureFile(fileOrPath);\n    file.addExport(imp);\n  }\n\n  addImportToFile(fileOrPath: CodegenFile | string, imp: ICodegenImport): void {\n    const file = this.ensureFile(fileOrPath);\n    file.addImport(imp);\n  }\n\n  addSymbolToFile(\n    fileOrPath: CodegenFile | string,\n    symbol: ICodegenSymbol,\n  ): void {\n    const file = this.ensureFile(fileOrPath);\n    file.addSymbol(symbol);\n  }\n\n  createFile(\n    path: string,\n    meta: Omit<CodegenFile['meta'], 'renderer'> & {\n      /**\n       * Renderer to use to render this file.\n       */\n      renderer?: ICodegenRenderer;\n    } = {},\n  ): CodegenFile {\n    const { renderer, ...metadata } = meta;\n    if (renderer) {\n      this.ensureRenderer(renderer);\n    }\n\n    const existing = this.getFileByPath(path);\n    if (existing) {\n      // Whoever is creating the file will override the renderer\n      if (renderer?.id && renderer.id !== existing.meta.renderer) {\n        existing.meta.renderer = renderer.id;\n      }\n      return existing;\n    }\n\n    const file = new CodegenFile(path, {\n      ...metadata,\n      renderer: renderer?.id,\n    });\n    this.filesOrder.push(file);\n    this.filesMap.set(path, file);\n    return file;\n  }\n\n  ensureFile(fileOrPath: CodegenFile | string): CodegenFile {\n    if (typeof fileOrPath !== 'string') {\n      return fileOrPath;\n    }\n    const existingFile = this.getFileByPath(fileOrPath);\n    if (existingFile) {\n      return existingFile;\n    }\n    return this.createFile(fileOrPath);\n  }\n\n  private ensureRenderer(renderer: ICodegenRenderer): ICodegenRenderer {\n    if (!this.renderers.has(renderer.id)) {\n      this.renderers.set(renderer.id, renderer);\n    }\n    return this.renderers.get(renderer.id)!;\n  }\n\n  get files(): ReadonlyArray<CodegenFile> {\n    return [...this.filesOrder];\n  }\n\n  getAllSymbols(): ReadonlyArray<ICodegenSymbol> {\n    return this.filesOrder.flatMap((file) => file.getAllSymbols());\n  }\n\n  getFileByPath(path: string): CodegenFile | undefined {\n    return this.filesMap.get(path);\n  }\n\n  render(meta?: ICodegenMeta): ReadonlyArray<ICodegenOutput> {\n    const results: Array<ICodegenOutput> = [];\n    for (const file of this.filesOrder) {\n      if (!file.meta.renderer) continue;\n      const renderer = this.renderers.get(file.meta.renderer);\n      if (!renderer) continue;\n      results.push(renderer.render(file, meta));\n    }\n    return results;\n  }\n}\n"]}