import { l as Config, L as Logger, c as IR, U as UserConfig, W as WatchValues } from './types.d-44bOq98L.js';
import { JSONSchema } from '@hey-api/json-schema-ref-parser';
import 'semver';
import '@hey-api/codegen-core';
import 'node:fs';
import 'typescript';

/**
 * @internal
 * Parse the resolved OpenAPI specification. This will populate and return
 * `context` with intermediate representation obtained from the parsed spec.
 */
declare const parseOpenApiSpec: ({ config, dependencies, logger, spec, }: {
    config: Config;
    dependencies: Record<string, string>;
    logger: Logger;
    spec: unknown;
}) => IR.Context | undefined;

/**
 * @internal
 */
declare const initConfigs: (userConfig: UserConfig | undefined) => Promise<{
    dependencies: Record<string, string>;
    results: ReadonlyArray<{
        config: Config;
        errors: ReadonlyArray<Error>;
    }>;
}>;

interface SpecResponse {
    data: JSONSchema;
    error?: undefined;
    response?: undefined;
}
interface SpecError {
    data?: undefined;
    error: 'not-modified' | 'not-ok';
    response: Response;
}
/**
 * @internal
 */
declare const getSpec: ({ fetchOptions, inputPath, timeout, watch, }: {
    fetchOptions?: RequestInit;
    inputPath: Config["input"]["path"];
    timeout: number;
    watch: WatchValues;
}) => Promise<SpecResponse | SpecError>;

export { getSpec, initConfigs, parseOpenApiSpec };
