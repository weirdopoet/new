"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const vitest_1 = require("vitest");
const __1 = require("..");
(0, vitest_1.describe)("bundle", () => {
    (0, vitest_1.it)("handles circular reference with description", async () => {
        const refParser = new __1.$RefParser();
        const pathOrUrlOrSchema = path_1.default.resolve("lib", "__tests__", "spec", "circular-ref-with-description.json");
        const schema = await refParser.bundle({ pathOrUrlOrSchema });
        (0, vitest_1.expect)(schema).not.toBeUndefined();
    });
    (0, vitest_1.it)("bundles multiple references to the same file correctly", async () => {
        const refParser = new __1.$RefParser();
        const pathOrUrlOrSchema = path_1.default.resolve("lib", "__tests__", "spec", "multiple-refs.json");
        const schema = (await refParser.bundle({ pathOrUrlOrSchema }));
        // First reference should be fully resolved (no $ref)
        (0, vitest_1.expect)(schema.paths["/test1/{pathId}"].get.parameters[0].name).toBe("pathId");
        (0, vitest_1.expect)(schema.paths["/test1/{pathId}"].get.parameters[0].schema.type).toBe("string");
        (0, vitest_1.expect)(schema.paths["/test1/{pathId}"].get.parameters[0].schema.format).toBe("uuid");
        (0, vitest_1.expect)(schema.paths["/test1/{pathId}"].get.parameters[0].$ref).toBeUndefined();
        // Second reference should be remapped to point to the first reference
        (0, vitest_1.expect)(schema.paths["/test2/{pathId}"].get.parameters[0].$ref).toBe("#/paths/~1test1~1%7BpathId%7D/get/parameters/0");
        // Both should effectively resolve to the same data
        const firstParam = schema.paths["/test1/{pathId}"].get.parameters[0];
        const secondParam = schema.paths["/test2/{pathId}"].get.parameters[0];
        // The second parameter should resolve to the same data as the first
        (0, vitest_1.expect)(secondParam.$ref).toBeDefined();
        (0, vitest_1.expect)(firstParam).toEqual({
            name: "pathId",
            in: "path",
            required: true,
            schema: {
                type: "string",
                format: "uuid",
                description: "Unique identifier for the path",
            },
        });
    });
});
